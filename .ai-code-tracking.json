{
  "version": "1.0",
  "records": [
    {
      "filePath": "E:/Project/GitHub/PandaCoder/src/main/java/com/shuyixiao/DomesticAITranslationAPI.java",
      "timestamp": 1761371356408,
      "startOffset": 306,
      "endOffset": 12170,
      "codeContent": "et.URI;\nimport java.nio.charset.StandardCharsets;\n\n/**\n * 国内大模型翻译API\n * 支持通义千问、文心一言、智谱等国内主流AI模型\n */\npublic class DomesticAITranslationAPI {\n\n    // 通义千问API\n    private static final String QIANWEN_API_URL \u003d \"https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation\";\n    \n    // 文心一言API\n    private static final String WENXIN_API_URL \u003d \"https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/eb-instant\";\n    \n    // 智谱API\n    private static final String ZHIPU_API_URL \u003d \"https://open.bigmodel.cn/api/paas/v4/chat/completions\";\n\n    // 腾讯混元API（码云）\n    private static final String HUNYUAN_API_URL \u003d \"https://ai.gitee.com/api/v1/chat/completions\";\n\n    /**\n     * 使用国内大模型进行翻译\n     * @param text 待翻译的中文文本\n     * @return 翻译后的英文文本\n     * @throws IOException 翻译过程中的异常\n     */\n    public static String translate(String text) throws IOException {\n        PluginSettings settings \u003d PluginSettings.getInstance();\n        String modelType \u003d settings.getDomesticAIModel();\n        String apiKey \u003d settings.getDomesticAIApiKey();\n        \n        if (apiKey \u003d\u003d null || apiKey.isEmpty()) {\n            throw new IOException(\"国内大模型API密钥不能为空\");\n        }\n        \n        switch (modelType) {\n            case \"qianwen\":\n                return translateWithQianwen(text, apiKey);\n            case \"wenxin\":\n                return translateWithWenxin(text, apiKey);\n            case \"zhipu\":\n                return translateWithZhipu(text, apiKey);\n            case \"hunyuan\":\n                return translateWithHunyuan(text, apiKey);\n            default:\n                // 使用配置文件中的默认模型\n                String defaultModel \u003d TranslationModelConfig.getInstance().getDefaultDomesticAIModel();\n                System.out.println(\"[INFO] 使用配置文件默认模型: \" + defaultModel);\n\n                if (\"hunyuan\".equals(defaultModel)) {\n                    return translateWithHunyuan(text, apiKey);\n                } else if (\"qianwen\".equals(defaultModel)) {\n                    return translateWithQianwen(text, apiKey);\n                } else if (\"zhipu\".equals(defaultModel)) {\n                    return translateWithZhipu(text, apiKey);\n                } else if (\"wenxin\".equals(defaultModel)) {\n                    return translateWithWenxin(text, apiKey);\n                } else {\n                    // 最终回退到腾讯混元\n                    return translateWithHunyuan(text, apiKey);\n                }\n        }\n    }\n    \n    /**\n     * 使用国内大模型进行AI文本分析（非纯翻译场景）\n     * @param prompt 分析提示词\n     * @param instruction 具体指令\n     * @return AI分析结果\n     * @throws IOException 分析过程中的异常\n     */\n    public String translateTextWithAI(String prompt, String instruction) throws IOException {\n        PluginSettings settings \u003d PluginSettings.getInstance();\n        String modelType \u003d settings.getDomesticAIModel();\n        String apiKey \u003d settings.getDomesticAIApiKey();\n        \n        if (apiKey \u003d\u003d null || apiKey.isEmpty()) {\n            throw new IOException(\"国内大模型API密钥不能为空\");\n        }\n        \n        // 构建AI分析的提示词，结合用户指令\n        String fullPrompt \u003d instruction + \"\\n\\n\" + prompt;\n        \n        switch (modelType) {\n            case \"qianwen\":\n                return analyzeWithQianwen(fullPrompt, apiKey);\n            case \"wenxin\":\n                return analyzeWithWenxin(fullPrompt, apiKey);\n            case \"zhipu\":\n                return analyzeWithZhipu(fullPrompt, apiKey);\n            case \"hunyuan\":\n                return analyzeWithHunyuan(fullPrompt, apiKey);\n            default:\n                // 使用配置文件中的默认模型\n                String defaultModel \u003d TranslationModelConfig.getInstance().getDefaultDomesticAIModel();\n                System.out.println(\"[INFO] AI分析使用配置文件默认模型: \" + defaultModel);\n\n                if (\"hunyuan\".equals(defaultModel)) {\n                    return analyzeWithHunyuan(fullPrompt, apiKey);\n                } else if (\"qianwen\".equals(defaultModel)) {\n                    return analyzeWithQianwen(fullPrompt, apiKey);\n                } else if (\"zhipu\".equals(defaultModel)) {\n                    return analyzeWithZhipu(fullPrompt, apiKey);\n                } else if (\"wenxin\".equals(defaultModel)) {\n                    return analyzeWithWenxin(fullPrompt, apiKey);\n                } else {\n                    // 最终回退到腾讯混元\n                    return analyzeWithHunyuan(fullPrompt, apiKey);\n                }\n        }\n    }\n\n    /**\n     * 使用通义千问进行翻译\n     */\n    private static String translateWithQianwen(String text, String apiKey) throws IOException {\n        PluginSettings settings \u003d PluginSettings.getInstance();\n        String prompt \u003d buildTranslationPrompt(text, settings);\n        \n        JsonObject requestBody \u003d new JsonObject();\n        requestBody.addProperty(\"model\", \"qwen-turbo\");\n        \n        JsonObject input \u003d new JsonObject();\n        JsonArray messages \u003d new JsonArray();\n        JsonObject message \u003d new JsonObject();\n        message.addProperty(\"role\", \"user\");\n        message.addProperty(\"content\", prompt);\n        messages.add(message);\n        input.add(\"messages\", messages);\n        requestBody.add(\"input\", input);\n        \n        JsonObject parameters \u003d new JsonObject();\n        parameters.addProperty(\"max_tokens\", 100);\n        parameters.addProperty(\"temperature\", 0.1);\n        requestBody.add(\"parameters\", parameters);\n        \n        return sendRequest(QIANWEN_API_URL, requestBody.toString(), apiKey, \"qianwen\");\n    }\n    \n    /**\n     * 使用文心一言进行翻译\n     */\n    private static String translateWithWenxin(String text, String apiKey) throws IOException {\n        PluginSettings settings \u003d PluginSettings.getInstance();\n        String prompt \u003d buildTranslationPrompt(text, settings);\n        \n        JsonArray messages \u003d new JsonArray();\n        JsonObject message \u003d new JsonObject();\n        message.addProperty(\"role\", \"user\");\n        message.addProperty(\"content\", prompt);\n        messages.add(message);\n        \n        JsonObject requestBody \u003d new JsonObject();\n        requestBody.add(\"messages\", messages);\n        requestBody.addProperty(\"temperature\", 0.1);\n        requestBody.addProperty(\"max_output_tokens\", 100);\n        \n        String urlWithToken \u003d WENXIN_API_URL + \"?access_token\u003d\" + apiKey;\n        return sendRequest(urlWithToken, requestBody.toString(), \"\", \"wenxin\");\n    }\n    \n    /**\n     * 使用腾讯混元进行翻译\n     */\n    private static String translateWithHunyuan(String text, String apiKey) throws IOException {\n        PluginSettings settings \u003d PluginSettings.getInstance();\n        String prompt \u003d buildTranslationPrompt(text, settings);\n\n        JsonArray messages \u003d new JsonArray();\n        JsonObject message \u003d new JsonObject();\n        message.addProperty(\"role\", \"user\");\n        message.addProperty(\"content\", prompt);\n        messages.add(message);\n\n        JsonObject requestBody \u003d new JsonObject();\n        requestBody.addProperty(\"model\", \"Hunyuan-MT-Chimera-7B\");\n        requestBody.add(\"messages\", messages);\n        requestBody.addProperty(\"stream\", false);\n        requestBody.addProperty(\"max_tokens\", 100);\n        requestBody.addProperty(\"temperature\", 0.1);\n\n        return sendRequest(HUNYUAN_API_URL, requestBody.toString(), apiKey, \"hunyuan\");\n    }\n\n    /**\n     * 使用智谱AI进行翻译\n     */\n    private static String translateWithZhipu(String text, String apiKey) throws IOException {\n        PluginSettings settings \u003d PluginSettings.getInstance();\n        String prompt \u003d buildTranslationPrompt(text, settings);\n        \n        JsonArray messages \u003d new JsonArray();\n        JsonObject message \u003d new JsonObject();\n        message.addProperty(\"role\", \"user\");\n        message.addProperty(\"content\", prompt);\n        messages.add(message);\n        \n        JsonObject requestBody \u003d new JsonObject();\n        requestBody.addProperty(\"model\", \"glm-4\");\n        requestBody.add(\"messages\", messages);\n        requestBody.addProperty(\"temperature\", 0.1);\n        requestBody.addProperty(\"max_tokens\", 100);\n        \n        return sendRequest(ZHIPU_API_URL, requestBody.toString(), apiKey, \"zhipu\");\n    }\n\n    /**\n     * 使用通义千问进行AI分析\n     */\n    private String analyzeWithQianwen(String prompt, String apiKey) throws IOException {\n        JsonObject requestBody \u003d new JsonObject();\n        requestBody.addProperty(\"model\", \"qwen-turbo\");\n        \n        JsonObject input \u003d new JsonObject();\n        JsonArray messages \u003d new JsonArray();\n        JsonObject message \u003d new JsonObject();\n        message.addProperty(\"role\", \"user\");\n        message.addProperty(\"content\", prompt);\n        messages.add(message);\n        input.add(\"messages\", messages);\n        requestBody.add(\"input\", input);\n        \n        JsonObject parameters \u003d new JsonObject();\n        parameters.addProperty(\"max_tokens\", 1000); // 增加token数量用于详细分析\n        parameters.addProperty(\"temperature\", 0.3); // 稍微提高创造性\n        requestBody.add(\"parameters\", parameters);\n        \n        return sendRequest(QIANWEN_API_URL, requestBody.toString(), apiKey, \"qianwen\");\n    }\n    \n    /**\n     * 使用文心一言进行AI分析\n     */\n    private String analyzeWithWenxin(String prompt, String apiKey) throws IOException {\n        JsonArray messages \u003d new JsonArray();\n        JsonObject message \u003d new JsonObject();\n        message.addProperty(\"role\", \"user\");\n        message.addProperty(\"content\", prompt);\n        messages.add(message);\n        \n        JsonObject requestBody \u003d new JsonObject();\n        requestBody.add(\"messages\", messages);\n        requestBody.addProperty(\"temperature\", 0.3);\n        requestBody.addProperty(\"max_output_tokens\", 1000);\n        \n        String urlWithToken \u003d WENXIN_API_URL + \"?access_token\u003d\" + apiKey;\n        return sendRequest(urlWithToken, requestBody.toString(), \"\", \"wenxin\");\n    }\n    \n    /**\n     * 使用腾讯混元进行分析\n     */\n    private String analyzeWithHunyuan(String prompt, String apiKey) throws IOException {\n        JsonArray messages \u003d new JsonArray();\n        JsonObject message \u003d new JsonObject();\n        message.addProperty(\"role\", \"user\");\n        message.addProperty(\"content\", prompt);\n        messages.add(message);\n\n        JsonObject requestBody \u003d new JsonObject();\n        requestBody.addProperty(\"model\", \"Hunyuan-MT-Chimera-7B\");\n        requestBody.add(\"messages\", messages);\n        requestBody.addProperty(\"stream\", false);\n        requestBody.addProperty(\"max_tokens\", 1000);\n        requestBody.addProperty(\"temperature\", 0.3);\n\n        return sendRequest(HUNYUAN_API_URL, requestBody.toString(), apiKey, \"hunyuan\");\n    }\n\n    /**\n     * 使用智谱AI进行分析\n     */\n    private String analyzeWithZhipu(String prompt, String apiKey) throws IOException {\n        JsonArray messages \u003d new JsonArray();\n        JsonObject message \u003d new JsonObject();\n        message.addProperty(\"role\", \"user\");\n        message.addProperty(\"content\", prompt);\n        messages.add(message);\n        \n        JsonObject requestBody \u003d new JsonObject();\n        requestBody.addProperty(\"model\", \"glm-4\");\n        requestBody.add(\"messages\", messages);\n        requestBody.addProperty(\"temperature\", 0.3);\n        requestBody.addProperty(\"max_tokens\", 1000);\n        \n        return sendRequest(ZHIPU_API_URL, requestBody.toString(), apiKey, \"zhipu\");\n    }\n    \n    /**\n     * 构建翻译提示词\n     */\n    private static String buildTranslationPrompt(String text, PluginSettings settings) {\n        if (settings.isUseCustomPrompt() \u0026\u0026 \n            settings.getTranslationPrompt() !\u003d null \u0026\u0026 \n            !settings.getTranslationPrompt().trim().isEmpty()) {\n            // 使用自定义提示词\n            return settings.getTranslationPrompt() + text;\n        } else {\n            // 使用默认简单提示词\n            return \"请将以下中文翻译为英文，只返回翻译结果，不要解释：\" + text;\n        }\n    }\n    \n    /**\n     * 发送HTTP请求\n     */\n    private static String sendRequest(String urlString, String requestBody, String apiKey, String modelType) throws IOException {\n        URL url \u003d URI.create(urlString).toURL(",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 309
    },
    {
      "filePath": "E:/Project/GitHub/PandaCoder/src/main/java/com/shuyixiao/BaiduAPI.java",
      "timestamp": 1761371968242,
      "startOffset": 4623,
      "endOffset": 17723,
      "codeContent": "java.net.URI.create(API_URL).toURL();\n            HttpURLConnection conn \u003d (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            conn.setConnectTimeout(5000);\n            conn.setReadTimeout(5000);\n\n            try (OutputStreamWriter wr \u003d new OutputStreamWriter(conn.getOutputStream(), StandardCharsets.UTF_8)) {\n                // 构建POST参数\n                StringBuilder postData \u003d new StringBuilder();\n                for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n                    if (postData.length() \u003e 0) {\n                        postData.append(\"\u0026\");\n                    }\n                    postData.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8.toString()));\n                    postData.append(\"\u003d\");\n                    postData.append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8.toString()));\n                }\n                wr.write(postData.toString());\n                wr.flush();\n            }\n\n            // 获取响应\n            int responseCode \u003d conn.getResponseCode();\n            StringBuilder response \u003d new StringBuilder();\n\n            if (responseCode \u003d\u003d HttpURLConnection.HTTP_OK) {\n                try (BufferedReader in \u003d new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {\n                    String line;\n                    while ((line \u003d in.readLine()) !\u003d null) {\n                        response.append(line);\n                    }\n                }\n            } else {\n                // 读取错误流，获取更详细的错误信息\n                StringBuilder errorResponse \u003d new StringBuilder();\n                try (BufferedReader err \u003d new BufferedReader(new InputStreamReader(conn.getErrorStream(), StandardCharsets.UTF_8))) {\n                    String line;\n                    while ((line \u003d err.readLine()) !\u003d null) {\n                        errorResponse.append(line);\n                    }\n                }\n\n                String errorMsg \u003d \"百度翻译API请求失败: 状态码\u003d\" + responseCode;\n                if (errorResponse.length() \u003e 0) {\n                    errorMsg +\u003d \", 错误信息\u003d\" + errorResponse.toString();\n                }\n\n                System.err.println(errorMsg);\n                throw new IOException(errorMsg);\n            }\n\n            try {\n                Gson gson \u003d new Gson();\n                JsonObject jsonObject \u003d gson.fromJson(response.toString(), JsonObject.class);\n\n                // 检查是否包含错误代码\n                if (jsonObject.has(\"error_code\")) {\n                    String errorCode \u003d jsonObject.get(\"error_code\").getAsString();\n                    String errorMsg \u003d jsonObject.has(\"error_msg\") ? \n                                     jsonObject.get(\"error_msg\").getAsString() : \n                                     \"未知错误\";\n\n                    // 根据错误代码提供更友好的错误信息\n                    String userFriendlyError \u003d \"未知错误\";\n                    switch (errorCode) {\n                        case \"52000\": // 成功\n                            userFriendlyError \u003d \"成功\";\n                            break; // 不应该走到这里\n                        case \"52001\":\n                            userFriendlyError \u003d \"请求超时，请重试\";\n                            break;\n                        case \"52002\":\n                            userFriendlyError \u003d \"系统错误，请稍后重试\";\n                            break;\n                        case \"52003\":\n                            userFriendlyError \u003d \"未授权用户，API密钥或应用ID不正确\";\n                            break;\n                        case \"54000\":\n                            userFriendlyError \u003d \"必填参数为空，请检查应用ID或API密钥\";\n                            break;\n                        case \"54001\":\n                            userFriendlyError \u003d \"签名错误，请检查您的API密钥\";\n                            break;\n                        case \"54003\":\n                            userFriendlyError \u003d \"访问频率受限，请降低调用频率\";\n                            break;\n                        case \"54004\":\n                            userFriendlyError \u003d \"账户余额不足，请前往百度翻译开放平台充值\";\n                            break;\n                        case \"54005\":\n                            userFriendlyError \u003d \"长query请求频繁，请降低长文本翻译频率\";\n                            break;\n                        case \"58000\":\n                            userFriendlyError \u003d \"客户端IP非法，请检查您的IP访问权限\";\n                            break;\n                        case \"58001\":\n                            userFriendlyError \u003d \"译文语言方向不支持，请检查语言设置\";\n                            break;\n                        case \"58002\":\n                            userFriendlyError \u003d \"服务当前已关闭，请稍后再试\";\n                            break;\n                        default:\n                            userFriendlyError \u003d \"未知错误，代码：\" + errorCode;\n                    }\n\n                    String detailedError \u003d \"百度翻译API错误: \" + userFriendlyError + \" (代码: \" + errorCode + \", 原始信息: \" + errorMsg + \")\";\n                    System.err.println(detailedError);\n                    throw new IOException(detailedError);\n                }\n\n                JsonArray transResultArray \u003d jsonObject.getAsJsonArray(\"trans_result\");\n\n                if (transResultArray !\u003d null \u0026\u0026 transResultArray.size() \u003e 0) {\n                    JsonObject transResultObject \u003d transResultArray.get(0).getAsJsonObject(); // 取第一个元素\n                    String dstValue \u003d transResultObject.get(\"dst\").getAsString();\n\n                    // 将 Unicode 编码字符串转换成中文\n                    return unicodeToChinese(dstValue);\n                } else {\n                    throw new IOException(\"百度翻译API返回的结果中未包含翻译内容\");\n                }\n            } catch (Exception e) {\n                System.err.println(\"JSON解析或API调用错误: \" + e.getMessage());\n                throw new IOException(\"百度翻译API调用失败: \" + e.getMessage());\n            }\n        } catch (Exception e) {\n            System.out.println(\"Network error: \" + e.getMessage());\n            return simulateTranslation(params.get(\"q\"));\n        }\n    }\n\n    // Unicode 编码字符串转换成中文\n    private static String unicodeToChinese(String unicodeStr) {\n        if (unicodeStr \u003d\u003d null) {\n            return \"\";\n        }\n\n        StringBuilder sb \u003d new StringBuilder();\n        int pos \u003d 0;\n\n        int i \u003d unicodeStr.indexOf(\"\\\\u\", pos);\n        while (i !\u003d -1) {\n            sb.append(unicodeStr, pos, i);\n            if (i + 5 \u003c unicodeStr.length()) {\n                pos \u003d i + 6;\n                sb.append((char) Integer.parseInt(unicodeStr.substring(i + 2, i + 6), 16));\n            }\n            i \u003d unicodeStr.indexOf(\"\\\\u\", pos);\n        }\n\n        sb.append(unicodeStr.substring(pos));\n\n        return sb.toString();\n    }\n\n    /**\n     * 检查API配置是否有效\n     * @return 如果API密钥和应用ID都已配置则返回true，否则返回false\n     */\n    public static boolean isApiConfigured() {\n        String apiKey \u003d getApiKey();\n        String appId \u003d getAppId();\n        return !apiKey.isEmpty() \u0026\u0026 !appId.isEmpty();\n    }\n\n    /**\n     * 验证API配置是否正确\n     * @return 如果API配置正确返回true，否则返回false\n     * @throws Exception 验证过程中出现错误时抛出\n     */\n    public static boolean validateApiConfiguration() throws Exception {\n        String apiKey \u003d getApiKey();\n        String appId \u003d getAppId();\n\n        System.out.println(\"[百度翻译验证] 开始验证API配置\");\n        System.out.println(\"[百度翻译验证] 应用ID: \" + (appId !\u003d null \u0026\u0026 !appId.isEmpty() ? appId : \"未配置\"));\n        System.out.println(\"[百度翻译验证] API密钥: \" + (apiKey !\u003d null \u0026\u0026 !apiKey.isEmpty() ? \"已配置(\" + apiKey.length() + \"个字符)\" : \"未配置\"));\n\n        if (apiKey \u003d\u003d null || apiKey.isEmpty() || appId \u003d\u003d null || appId.isEmpty()) {\n            String error \u003d \"API密钥或应用ID为空，请检查配置\";\n            System.err.println(\"[百度翻译验证] \" + error);\n            throw new Exception(error);\n        }\n\n        try {\n            // 实际调用百度翻译API进行测试\n            // 使用一个简单的中文短语\n            String testPhrase \u003d \"测试\";\n            String salt \u003d String.valueOf(System.currentTimeMillis());\n            \n            // 生成签名：MD5(appid+q+salt+密钥)\n            String sign \u003d generateSign(appId, testPhrase, salt, apiKey);\n            \n            System.out.println(\"[百度翻译验证] 测试短语: \" + testPhrase);\n            System.out.println(\"[百度翻译验证] Salt: \" + salt);\n            System.out.println(\"[百度翻译验证] Sign: \" + sign);\n\n            // 使用GET请求（更简单且稳定）\n            StringBuilder urlBuilder \u003d new StringBuilder(\"https://fanyi-api.baidu.com/api/trans/vip/translate?\");\n            urlBuilder.append(\"q\u003d\").append(URLEncoder.encode(testPhrase, \"UTF-8\"));\n            urlBuilder.append(\"\u0026from\u003dzh\");\n            urlBuilder.append(\"\u0026to\u003den\");\n            urlBuilder.append(\"\u0026appid\u003d\").append(URLEncoder.encode(appId, \"UTF-8\"));\n            urlBuilder.append(\"\u0026salt\u003d\").append(salt);\n            urlBuilder.append(\"\u0026sign\u003d\").append(sign);\n            \n            String fullUrl \u003d urlBuilder.toString();\n            System.out.println(\"[百度翻译验证] 请求URL: \" + fullUrl.substring(0, Math.min(fullUrl.length(), 100)) + \"...\");\n\n            // 发送实际请求到百度API\n            URL obj \u003d java.net.URI.create(fullUrl).toURL();\n            HttpURLConnection conn \u003d (HttpURLConnection) obj.openConnection();\n            conn.setRequestMethod(\"GET\");\n            conn.setConnectTimeout(10000); // 10秒连接超时\n            conn.setReadTimeout(10000);    // 10秒读取超时\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded; charset\u003dUTF-8\");\n\n            // 获取响应\n            int responseCode \u003d conn.getResponseCode();\n            System.out.println(\"[百度翻译验证] 响应码: \" + responseCode);\n\n            // 读取响应\n            StringBuilder response \u003d new StringBuilder();\n            InputStream inputStream \u003d null;\n            \n            try {\n                if (responseCode \u003d\u003d HttpURLConnection.HTTP_OK) {\n                    inputStream \u003d conn.getInputStream();\n                } else {\n                    inputStream \u003d conn.getErrorStream();\n                }\n                \n                if (inputStream !\u003d null) {\n                    try (BufferedReader reader \u003d new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {\n                        String line;\n                        while ((line \u003d reader.readLine()) !\u003d null) {\n                            response.append(line);\n                        }\n                    }\n                }\n            } finally {\n                if (inputStream !\u003d null) {\n                    try { inputStream.close(); } catch (Exception e) { /* 忽略 */ }\n                }\n            }\n            \n            String responseText \u003d response.toString();\n            System.out.println(\"[百度翻译验证] 响应内容: \" + responseText);\n\n            // 解析JSON响应\n            Gson gson \u003d new Gson();\n            JsonObject jsonObject \u003d gson.fromJson(responseText, JsonObject.class);\n\n            // 检查是否包含错误代码\n            if (jsonObject.has(\"error_code\")) {\n                String errorCode \u003d jsonObject.get(\"error_code\").getAsString();\n                String errorMsg \u003d jsonObject.has(\"error_msg\") ? \n                                jsonObject.get(\"error_msg\").getAsString() : \n                                \"未知错误\";\n                \n                // 提供更友好的错误信息\n                String userFriendlyError \u003d getFriendlyErrorMessage(errorCode, errorMsg);\n                System.err.println(\"[百度翻译验证] API错误: \" + userFriendlyError);\n                throw new Exception(userFriendlyError);\n            }\n\n            // 检查是否包含翻译结果\n            if (jsonObject.has(\"trans_result\")) {\n                JsonArray transResultArray \u003d jsonObject.getAsJsonArray(\"trans_result\");\n                if (transResultArray !\u003d null \u0026\u0026 transResultArray.size() \u003e 0) {\n                    System.out.println(\"[百度翻译验证] ✓ 验证成功！\");\n                    return true;\n                }\n            }\n\n            String error \u003d \"API响应格式不正确，响应内容: \" + responseText;\n            System.err.println(\"[百度翻译验证] \" + error);\n            throw new Exception(error);\n            \n        } catch (Exception e) {\n            String errorMsg \u003d e.getMessage();\n            System.err.println(\"[百度翻译验证] 验证失败: \" + errorMsg);\n            \n            // 如果是网络异常，给出更友好的提示\n            if (errorMsg.contains(\"timeout\") || errorMsg.contains(\"connect\")) {\n                throw new Exception(\"网络连接超时，请检查网络连接后重试\");\n            }\n            \n            throw new Exception(errorMsg);\n        }\n    }\n    \n    /**\n     * 将百度API错误代码转换为友好的错误信息\n     */\n    private static String getFriendlyErrorMessage(String errorCode, String originalMsg) {\n        switch (errorCode) {\n            case \"52001\": return \"请求超时，请重试\";\n            case \"52002\": return \"系统错误，请稍后重试\";\n            case \"52003\": return \"未授权用户：应用ID或API密钥不正确，请检查配置\";\n            case \"54000\": return \"必填参数为空：请确保应用ID和API密钥都已填写\";\n            case \"54001\": return \"签名错误：API密钥不正确，请检查\";\n            case \"54003\": return \"访问频率受限，请降低调用频率\";\n            case \"54004\": return \"账户余额不足，请前往百度翻译开放平台充值\";\n            case \"54005\": return \"长query请求频繁，请降低长文本翻译频率\";\n            case \"58000\": return \"客户端IP非法：请检查您的IP访问权限\";\n            case \"58001\": return \"译文语言方向不支持\";\n            case \"58002\": return \"服务当前已关闭，请稍后再试\";\n            default: return \"错误: \" + originalMsg + \" (代码: \" + errorCode + \")\"",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 310
    },
    {
      "filePath": "E:/Project/GitHub/PandaCoder/src/main/java/com/shuyixiao/setting/SettingConfigurable.java",
      "timestamp": 1761372361116,
      "startOffset": 16604,
      "endOffset": 17914,
      "codeContent": "System.out.println(\"[testBaiduApiConfiguration] 验证按钮被点击\");\n        System.out.println(\"[testBaiduApiConfiguration] 从界面读取 - 应用ID: \u0027\" + appId + \"\u0027\");\n        System.out.println(\"[testBaiduApiConfiguration] 从界面读取 - API密钥: \u0027\" + apiKey + \"\u0027 (长度: \" + apiKey.length() + \")\");\n        \n        if (apiKey.isEmpty() || appId.isEmpty()) {\n            JOptionPane.showMessageDialog(panel, \n                \"请先输入百度 API 密钥和应用ID\", \n                \"配置不完整\", \n                JOptionPane.WARNING_MESSAGE);\n            return;\n        }\n        \n        try {\n            // 直接使用界面上的值进行验证，不需要先保存到PluginSettings\n            System.out.println(\"[testBaiduApiConfiguration] 调用验证方法，使用界面上的值...\");\n            if (com.shuyixiao.BaiduAPI.validateApiConfiguration(appId, apiKey)) {\n                JOptionPane.showMessageDialog(panel, \n                    \"百度翻译 API 配置验证成功！\", \n                    \"验证成功\", \n                    JOptionPane.INFORMATION_MESSAGE);\n            } else {\n                JOptionPane.showMessageDialog(panel, \n                    \"百度翻译 API 配置验证失败，请检查密钥和应用ID是否正确\", \n                    \"验证失败\", \n                    JOptionPane.ERROR_MESSAGE);\n            }\n        } catch (Exception ex) {\n            System.err.println(\"[testBaiduApiConfiguration] 验证异常: \" + ex.getMessage());\n            ex.printStackTrace();",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 29
    },
    {
      "filePath": "E:/Project/GitHub/PandaCoder/src/main/java/com/shuyixiao/DomesticAITranslationAPI.java",
      "timestamp": 1761372561059,
      "startOffset": 1011,
      "endOffset": 2875,
      "codeContent": "（从设置中读取配置）\n     * @param text 待翻译的中文文本\n     * @return 翻译后的英文文本\n     * @throws IOException 翻译过程中的异常\n     */\n    public static String translate(String text) throws IOException {\n        PluginSettings settings \u003d PluginSettings.getInstance();\n        String modelType \u003d settings.getDomesticAIModel();\n        String apiKey \u003d settings.getDomesticAIApiKey();\n        \n        return translate(text, modelType, apiKey);\n    }\n    \n    /**\n     * 使用国内大模型进行翻译（使用指定的配置）\n     * @param text 待翻译的中文文本\n     * @param modelType 模型类型（qianwen/wenxin/zhipu/hunyuan）\n     * @param apiKey API密钥\n     * @return 翻译后的英文文本\n     * @throws IOException 翻译过程中的异常\n     */\n    public static String translate(String text, String modelType, String apiKey) throws IOException {\n        System.out.println(\"[国内大模型] 翻译请求 - 模型: \" + modelType + \", API密钥: \" + (apiKey !\u003d null \u0026\u0026 !apiKey.isEmpty() ? \"已配置(\" + apiKey.length() + \"个字符)\" : \"未配置\"));\n        \n        if (apiKey \u003d\u003d null || apiKey.isEmpty()) {\n            throw new IOException(\"国内大模型API密钥不能为空\");\n        }\n        \n        if (modelType \u003d\u003d null || modelType.isEmpty()) {\n            // 使用配置文件中的默认模型\n            modelType \u003d TranslationModelConfig.getInstance().getDefaultDomesticAIModel();\n            System.out.println(\"[国内大模型] 使用默认模型: \" + modelType);\n        }\n        \n        switch (modelType) {\n            case \"qianwen\":\n                return translateWithQianwen(text, apiKey);\n            case \"wenxin\":\n                return translateWithWenxin(text, apiKey);\n            case \"zhipu\":\n                return translateWithZhipu(text, apiKey);\n            case \"hunyuan\":\n                return translateWithHunyuan(text, apiKey);\n            default:\n                // 使用配置文件中的默认模型\n                String defaultModel \u003d TranslationModelConfig.getInstance().getDefaultDomesticAIModel();\n                System.out.println(\"[国内大模型",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 47
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/Hello.java",
      "timestamp": 1761373913508,
      "startOffset": 0,
      "endOffset": 233,
      "codeContent": "/**\n * Copyright © 2025 integration-projects-maven. All rights reserved.\n * ClassName Hello.java\n * author 舒一笑\n * version 1.0.0\n * Description TODO\n * createTime 2025年10月25日 14:31:53\n * 技术分享 · 公众号：舒一笑的架构笔记\n */\npublic class Hello {\n}\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 12
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/user/model/dto/TenantCacheInfo.java",
      "timestamp": 1761533564307,
      "startOffset": 744,
      "endOffset": 820,
      "codeContent": "pipeline.vector.VectorDBTypes;\nimport com.torchv.rag.constant.EmbeddingModel",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/openapi/domain/builder/OpenApiContextBuilder.java",
      "timestamp": 1761533696263,
      "startOffset": 1619,
      "endOffset": 1843,
      "codeContent": "infra.rag.chain.context.ContextBuilder;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.chain.model.ChainRequest;\nimport com.torchv.infra.rag.constant.LLMDispatchers;\nimport com.torchv.infra",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 5
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/openapi/domain/builder/EmbedChatContextBuilder.java",
      "timestamp": 1761533696266,
      "startOffset": 1875,
      "endOffset": 2154,
      "codeContent": "infra.rag.chain.context.ContextBuilder;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.chain.model.ChainRequest;\nimport com.torchv.infra.rag.constant.AgentPromptSteps;\nimport com.torchv.infra.rag.constant.LLMDispatchers;\nimport com.torchv.infra",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 6
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/openapi/domain/builder/EmbedStoreChatContextBuilder.java",
      "timestamp": 1761533696282,
      "startOffset": 1605,
      "endOffset": 1884,
      "codeContent": "infra.rag.chain.context.ContextBuilder;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.chain.model.ChainRequest;\nimport com.torchv.infra.rag.constant.AgentPromptSteps;\nimport com.torchv.infra.rag.constant.LLMDispatchers;\nimport com.torchv.infra",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 6
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/openapi/domain/builder/OpenApiCommunityContextBuilder.java",
      "timestamp": 1761533696288,
      "startOffset": 1734,
      "endOffset": 1958,
      "codeContent": "infra.rag.chain.context.ContextBuilder;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.chain.model.ChainRequest;\nimport com.torchv.infra.rag.constant.LLMDispatchers;\nimport com.torchv.infra",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 5
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/assistant/domain/builder/EChartsDataContextBuilder.java",
      "timestamp": 1761533697161,
      "startOffset": 1296,
      "endOffset": 1467,
      "codeContent": "infra.rag.chain.context.ContextBuilder;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.chain.model.ChainRequest;\nimport com.torchv.infra",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 4
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/assistant/service/impl/EChartsDataServiceImpl.java",
      "timestamp": 1761533697168,
      "startOffset": 1176,
      "endOffset": 1352,
      "codeContent": "infra.rag.agent.BotAgent;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.llm.model.completions.BotCompletionResponse;\nimport com.torchv.infra",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 4
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/billing/web/BillingMessageController.java",
      "timestamp": 1761533697185,
      "startOffset": 987,
      "endOffset": 1438,
      "codeContent": "infra.common.external.queue.RabbitMessageService;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.utils.GsonUtils;\nimport com.torchv.infra.rag.chain.model.billing.BillingDetailOrder;\nimport com.torchv.infra.rag.chain.model.billing.BillingMessageBody;\nimport com.torchv.infra.rag.constant.BillingProcessTypes;\nimport com.torchv.infra.rag.constant.BillingTypes;\nimport com.torchv.infra.rag.constant.LLMModels;\nimport com.torchv.infra.web",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 9
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/builder/InnerWebChatV1ContextBuilder.java",
      "timestamp": 1761533697194,
      "startOffset": 1343,
      "endOffset": 5227,
      "codeContent": "infra.rag.chain.context.ContextBuilder;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.chain.model.ChainRequest;\nimport com.torchv.infra.rag.constant.AgentPromptSteps;\nimport com.torchv.infra.rag.constant.LLMDispatchers;\nimport com.torchv.kb.space.service.SaasKnowledgeContainerPermissionService;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jetbrains.annotations.NotNull;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/4/21 12:07\n * @since torchv_server v1.7.2\n */\n@Slf4j\n@AllArgsConstructor\n@Component(\"innerWebChatV1ContextBuilder\")\npublic class InnerWebChatV1ContextBuilder implements ContextBuilder\u003cInnerWebChatV1Completion\u003e {\n\n    final ChatPromptService chatPromptService;\n    final ChatIntegrationService chatIntegrationService;\n    final KnowledgeEmbeddingChangeService knowledgeEmbeddingChangeService;\n    final KbDepartmentUserService kbDepartmentUserService;\n    final SaasKnowledgeContainerPermissionService saasKnowledgeContainerPermissionService;\n    @Override\n    public ChainContext build(InnerWebChatV1Completion completion) {\n        log.info(\"构建内部web(V1版本)对话上下文\");\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        PromptInfoResp promptInfoResp \u003d completion.promptConfig();\n        ChainContext chainContext \u003d new ChainContext();\n        chainContext.setTenantId(sysUserInfo.getTenantId());\n        chainContext.setUserId(sysUserInfo.getCode());\n        // 构建请求对象\n        ChainRequest chainRequest \u003d getChainRequest(completion);\n        // 查询权限编码,并且透传进行查询控制\n        DepartmentUserOrgPermissions userOrgPermissions\u003dkbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n        // set\n        chainRequest.setPermissionCodes(userOrgPermissions.permissionCodesToList());\n        // 设置系统的Prompt\n        //String currentTime \u003d DateUtil.format(LocalDateTime.now(), \"yyyy-MM-dd HH:mm:ss E\");\n        //String sysPrompt \u003d StrUtil.format(PromptSystemTemplates.SYSTEM_RAG, currentTime);\n        // 设置系统的Prompt\n        //chainRequest.setSystemPrompt(PromptSystemTemplates.SYSTEM_RAG_V1);\n        //设置添加系统prompt  读取全局配置\n        PromptInfoResp info \u003d chatPromptService.queryPrompt(sysUserInfo.getTenantId());\n        chainContext.getPrompts().addPrompt(AgentPromptSteps.SYSTEM,info.getSystemPrompt());\n        chainContext.setChatRequest(chainRequest);\n        // 是否开启turbo+RAG搜索\n        chainContext.getSearchContext().setTurbo(completion.isTurbo());\n        chainContext.getSearchContext().setRagSearch(completion.isRagSearch());\n        chainContext.getSearchContext().setSearchTopK(completion.getTopK());\n        chainContext.getSearchContext().setRrf(completion.isRrf());\n        if (completion.isChatDebug()){\n            // 是知识的问答调试\n            chainContext.getSearchContext().setEnableReRanker(completion.getUseReranker());\n            // 设置reranker的模型\n            chainContext.getSearchContext().setRankerModelName(completion.getRankerModelName());\n        }\n        // 判断知识库的id类型\n        if (CollUtil.isNotEmpty(completion.getContainerId())){\n            // 设置embedding得名称\n            chainContext.getSearchContext().applyEmbeddingModel(knowledgeEmbeddingChangeService.checkKnowledgeConsistency(completion.getContainerId()));\n            // 要对知识库id鉴权\n            Map\u003cString,String\u003e stringStringMap\u003dsaasKnowledgeContainerPermissionService.getHighestPermissions(completion.getContainerId(),sysUserInfo);\n            // 如果我不在知识库里面，那么要把不在知识库里面的dataId查询出来\n            List\u003cString\u003e  dataIds\u003dsaasKnowledgeContainerPermissionService.getDataIds(stringStringMap,sysUserInfo,chainRequest.getPermissionCodes());\n            if (CollUtil.isNotEmpty(dataIds)){\n                chainContext.getChatRequest().setDataIds(dataIds);\n            }",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 75
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/database/impl/BusinessDataSourceServiceImpl.java",
      "timestamp": 1761533697200,
      "startOffset": 4387,
      "endOffset": 15213,
      "codeContent": "eq(StrUtil.isNotBlank(businessDataSourceQueryReq.getContainerCode()), BusinessDataSource::getContainerCode, businessDataSourceQueryReq.getContainerCode());\n        lambdaQueryWrapper.orderByDesc(BusinessDataSource::getCreateTime);\n        List\u003cBusinessDataSource\u003e businessDataSourceInfos \u003d businessDataSourceMapper.selectList(lambdaQueryWrapper);\n        List\u003cBusinessDataSourceResp\u003e businessDataSourceRespInfos \u003d new ArrayList\u003c\u003e();\n        long count \u003d businessDataSourcePageNo.getTotal();\n        if (CollectionUtil.isNotEmpty(businessDataSourceInfos)) {\n            businessDataSourceRespInfos.addAll(businessDataSourceInfos.stream().map(new BusinessDataSourceApplyFunction()).toList());\n        }\n        // 对数据源对可用状态进行排序\n        // 先对所有可用状态对排到最前，然后按创建时间倒叙\n        businessDataSourceRespInfos.sort((o1, o2) -\u003e {\n            if (StrUtil.equals(o1.getStatus(), DataSourceStatus.AVAILABLE.name()) \u0026\u0026 StrUtil.equals(o2.getStatus(), DataSourceStatus.UNAVAILABLE.name())) {\n                return -1;\n            } else if (StrUtil.equals(o1.getStatus(), DataSourceStatus.UNAVAILABLE.name()) \u0026\u0026 StrUtil.equals(o2.getStatus(), DataSourceStatus.AVAILABLE.name())) {\n                return 1;\n            } else {\n                return o2.getCreateTime().compareTo(o1.getCreateTime());\n            }\n        });\n        return Pagination.pagination(businessDataSourceRespInfos, count, pageNo, pageSize);\n    }\n    \n    @Override\n    public Result\u003cList\u003cBusinessDataSourceCountResp\u003e\u003e listCount(String containerCode) {\n        List\u003cBusinessDataSourceCount\u003e businessDataSourceCounts \u003d businessDataSourceMapper.groupByTenant(UserContextHolder.getTenantId(),containerCode);\n        List\u003cBusinessDataSourceCountResp\u003e businessDataSourceCountResps \u003d CollUtil.newArrayList();\n        if (CollUtil.isNotEmpty(businessDataSourceCounts)) {\n            businessDataSourceCounts.forEach(businessDataSourceCount -\u003e {\n                BusinessDataSourceCountResp businessDataSourceCountResp \u003d new BusinessDataSourceCountResp();\n                businessDataSourceCountResp.setType(businessDataSourceCount.getType());\n                businessDataSourceCountResp.setNumber(businessDataSourceCount.getNumber());\n                businessDataSourceCountResps.add(businessDataSourceCountResp);\n            });\n        }\n        return Result.data(businessDataSourceCountResps);\n    }\n    \n    /**\n     * 新增数据源记录\n     * @param businessDataSourceAddReq 新增数据源条件Vo\n     * @return 是否新增成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e add(BusinessDataSourceAddReq businessDataSourceAddReq) {\n        log.info(\"新增数据源数据,Vo:{}\", businessDataSourceAddReq.toString());\n        DataSourceTypes types \u003d DataSourceTypes.of(businessDataSourceAddReq.getType());\n        if (types \u003d\u003d null) {\n            throw new IllegalArgumentException(\"not support data source type,type:\" + businessDataSourceAddReq.getType());\n        }\n        BusinessDataSource businessDataSource \u003d new BusinessDataSource();\n        BeanUtils.copyProperties(businessDataSourceAddReq, businessDataSource);\n        businessDataSource.setCreateTime(LocalDateTime.now());\n        businessDataSource.setModifierTime(LocalDateTime.now());\n        businessDataSource.setTenantId(UserContextHolder.getTenantId());\n        businessDataSource.setCode(IdUtil.getSnowflakeNextIdStr());\n        businessDataSource.setStatus(ToggleStatusEnum.YES.getValue());\n        businessDataSource.setPassword(SecureDbUtils.encrypt(businessDataSource.getPassword()));\n        // 数据源状态\n        ConnectionProvider connectionProvider \u003d MultiDsProviderFactory.of(types);\n        boolean connectStatus \u003d connectionProvider.connection(businessDataSourceAddReq.toConnectionParams());\n        if (connectStatus) {\n            businessDataSource.setStatus(DataSourceStatus.AVAILABLE.name());\n        } else {\n            businessDataSource.setStatus(DataSourceStatus.UNAVAILABLE.name());\n        }\n        // 数据库的密码，不能用明文存储\n        int ret \u003d businessDataSourceMapper.insert(businessDataSource);\n        return ret \u003e 0 ? Result.defaultSuccess(\"新增成功\") : Result.error(\"新增失败\");\n    }\n    \n    @Override\n    public Result\u003cBoolean\u003e testDs(BusinessDataSourceTestConnectionReq connectionReq) {\n        log.info(\"测试数据源连接,host:{},port:{},db:{}\", connectionReq.getHost(), connectionReq.getPort(), connectionReq.getDbName());\n        DataSourceTypes types \u003d DataSourceTypes.of(connectionReq.getType());\n        if (types \u003d\u003d null) {\n            throw new IllegalArgumentException(\"not support data source type,type:\" + connectionReq.getType());\n        }\n        ConnectionProvider connectionProvider \u003d MultiDsProviderFactory.of(types);\n        boolean ret \u003d connectionProvider.connection(connectionReq.toConnectionParams());\n        log.info(\"连接状态:{}\", ret);\n        return Result.data(ret);\n    }\n    \n    /**\n     * 更新数据源记录\n     * @param businessDataSourceUpdateReq 更新数据源条件Vo\n     * @return 是否更新成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e update(BusinessDataSourceUpdateReq businessDataSourceUpdateReq) {\n        log.info(\"根据containerCode修改数据源数据,Vo:{}\", businessDataSourceUpdateReq.toString());\n        // 查询所有匹配的数据源\n        LambdaQueryWrapper\u003cBusinessDataSource\u003e queryWrapper \u003d Wrappers.lambdaQuery(BusinessDataSource.class)\n                .eq(BusinessDataSource::getTenantId, UserContextHolder.getTenantId())\n                .eq(BusinessDataSource::getContainerCode, businessDataSourceUpdateReq.getContainerCode());\n        List\u003cBusinessDataSource\u003e records \u003d businessDataSourceMapper.selectList(queryWrapper);\n        Assert.notEmpty(records, \"请求数据非法\");\n        \n        // 获取第一条记录用于类型验证和连接测试\n        BusinessDataSource firstRecord \u003d records.get(0);\n        DataSourceTypes types \u003d DataSourceTypes.of(businessDataSourceUpdateReq.getType());\n        if (types \u003d\u003d null) {\n            throw new IllegalArgumentException(\"not support data source type,type:\" + businessDataSourceUpdateReq.getType());\n        }\n        \n        // 准备更新的数据\n        BusinessDataSource businessDataSource \u003d new BusinessDataSource();\n        BeanUtils.copyProperties(businessDataSourceUpdateReq, businessDataSource);\n        businessDataSource.setModifierTime(LocalDateTime.now());\n        businessDataSource.setId(null); // 清除id，避免使用id更新\n        \n        if (StrUtil.isNotBlank(businessDataSourceUpdateReq.getPassword())) {\n            businessDataSource.setPassword(SecureDbUtils.encrypt(businessDataSource.getPassword()));\n        }\n        \n        // 测试数据源连接状态\n        ConnectionProvider connectionProvider \u003d MultiDsProviderFactory.of(types);\n        boolean connectStatus \u003d connectionProvider.connection(businessDataSourceUpdateReq.toConnectionParams(firstRecord));\n        \n        // 更新状态\n        if (connectStatus) {\n            businessDataSource.setStatus(DataSourceStatus.AVAILABLE.name());\n        } else {\n            businessDataSource.setStatus(DataSourceStatus.UNAVAILABLE.name());\n        }\n        \n        // 批量更新所有匹配的数据源\n        LambdaQueryWrapper\u003cBusinessDataSource\u003e updateWrapper \u003d Wrappers.lambdaQuery(BusinessDataSource.class)\n                .eq(BusinessDataSource::getTenantId, UserContextHolder.getTenantId())\n                .eq(BusinessDataSource::getContainerCode, businessDataSourceUpdateReq.getContainerCode());\n        int ret \u003d businessDataSourceMapper.update(businessDataSource, updateWrapper);\n        \n        if (ret \u003e 0) {\n            // 删除缓冲中的所有数据源\n            records.forEach(record -\u003e multiJdbcDataSourceFactory.removeDs(record.getCode()));\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(\"更新成功\") : Result.error(\"更新失败\");\n    }\n    \n    /**\n     * 根据containerCode查询数据源详情\n     * @param containerCode 容器编码\n     * @return 数据源详情列表\n     */\n    @Override\n    public Result\u003cList\u003cBusinessDataSourceResp\u003e\u003e queryById(String containerCode) {\n        log.info(\"根据containerCode查询数据源详情,containerCode:{}\", containerCode);\n        LambdaQueryWrapper\u003cBusinessDataSource\u003e queryWrapper \u003d Wrappers.lambdaQuery(BusinessDataSource.class)\n                .eq(BusinessDataSource::getTenantId, UserContextHolder.getTenantId())\n                .eq(BusinessDataSource::getContainerCode, containerCode);\n        List\u003cBusinessDataSource\u003e businessDataSourceList \u003d businessDataSourceMapper.selectList(queryWrapper);\n        List\u003cBusinessDataSourceResp\u003e respList \u003d new ArrayList\u003c\u003e();\n        if (CollUtil.isNotEmpty(businessDataSourceList)) {\n            businessDataSourceList.forEach(businessDataSource -\u003e {\n                BusinessDataSourceResp businessDataSourceResp \u003d new BusinessDataSourceResp();\n                BeanUtils.copyProperties(businessDataSource, businessDataSourceResp);\n                respList.add(businessDataSourceResp);\n            });\n        }\n        return Result.data(respList);\n    }\n    \n    /**\n     * 根据主键id批量删除数据源\n     * @param ids 批量删除主键id集合\n     * @return 是否删除成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e delete(List\u003cInteger\u003e ids) {\n        log.info(\"批量删除数据源,pageSize:{}\", CollectionUtil.size(ids));\n        LambdaQueryWrapper\u003cBusinessDataSource\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(BusinessDataSource.class)\n                .eq(BusinessDataSource::getTenantId, UserContextHolder.getTenantId());\n        lambdaQueryWrapper.in(BusinessDataSource::getContainerCode, ids);\n        List\u003cBusinessDataSource\u003e businessDataSources \u003d businessDataSourceMapper.selectList(lambdaQueryWrapper);\n        int ret \u003d businessDataSourceMapper.delete(lambdaQueryWrapper);\n        Assert.isTrue(NumberUtil.equals(ret, CollUtil.size(ids)), \"请求数据非法\");\n        if (ret \u003e 0) {\n            businessDataSources.forEach(businessDataSource -\u003e multiJdbcDataSourceFactory.removeDs(businessDataSource.getCode()));\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(\"删除成功\") : Result.error(\"删除失败\");\n    }\n    \n    /**\n     * 根据containerCode删除数据源\n     * @param containerCode 容器编码\n     * @return 是否删除成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e delete(String containerCode) {\n        log.info(\"根据containerCode删除数据源,containerCode:{}\", containerCode);\n        LambdaQueryWrapper\u003cBusinessDataSource\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(BusinessDataSource.class)\n                .eq(BusinessDataSource::getTenantId, UserContextHolder.getTenantId())\n                .eq(BusinessDataSource::getContainerCode, containerCode);\n        List\u003cBusinessDataSource\u003e businessDataSources \u003d businessDataSourceMapper.selectList(lambdaQueryWrapper);\n        Assert.notEmpty(businessDataSources, \"请求数据非法\");\n        int ret \u003d businessDataSourceMapper.delete(lambdaQueryWrapper);\n        if (ret \u003e 0) {\n            businessDataSources.forEach(businessDataSource -\u003e multiJdbcDataSourceFactory.removeDs(businessDataSource.getCode()",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 202
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/database/impl/BusinessDatasourceDynamicServiceImpl.java",
      "timestamp": 1761533697203,
      "startOffset": 2148,
      "endOffset": 12751,
      "codeContent": "infra.common.utils.SQLUtils;\nimport com.torchv.database.util.SecureDbUtils;\nimport com.torchv.repository.database.entity.BusinessDataSource;\nimport com.torchv.repository.database.entity.DataBaseTable;\nimport com.torchv.repository.database.entity.DatabaseColumn;\nimport com.torchv.repository.database.mapper.MySQLMetadataMapper;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/7/16 20:02\n * @since torchv_server v1.7.8\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class BusinessDatasourceDynamicServiceImpl implements BusinessDatasourceDynamicService {\n    \n    final BusinessDataSourceService businessDataSourceService;\n    final MultiJdbcDataSourceFactory multiJdbcDataSourceFactory;\n    final DatabaseAccessProviders databaseAccessProviders;\n    final StringRedisTemplate stringRedisTemplate;\n    \n    @Override\n    public BusinessDataSource checkDataSource(Integer dsId) {\n        Optional\u003cBusinessDataSource\u003e dataSourceOptional \u003d businessDataSourceService.queryInfoById(dsId);\n        if (dataSourceOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        BusinessDataSource dataSource \u003d dataSourceOptional.get();\n        Assert.isTrue(StrUtil.equalsIgnoreCase(dataSource.getTenantId(), UserContextHolder.getTenantId()), \"system.common.request.invalid\");\n        // create\n        DataSourceTypes dataSourceTypes \u003d DataSourceTypes.of(dataSource.getType());\n        if (dataSourceTypes \u003d\u003d null) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        // 避免数据源未加载的情况\n        this.loadDataSource(dataSource);\n        return dataSource;\n    }\n    \n    @Override\n    public Pagination\u003cDataTableResp\u003e list(Integer pageNo, Integer pageSize, Integer dsId) {\n        BusinessDataSource dataSource \u003d this.checkDataSource(dsId);\n        DataSourceTypes dataSourceTypes \u003d DataSourceTypes.of(dataSource.getType());\n        if (dataSourceTypes \u003d\u003d null) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        // 获取数据源\n        List\u003cDataTableResp\u003e tableResps \u003d new LinkedList\u003c\u003e();\n        DatabaseAccessProvider databaseAccessProvider \u003d databaseAccessProviders.createAccessProvider(dataSourceTypes);\n        Pagination\u003cDataBaseTable\u003e tablePagination \u003d databaseAccessProvider.listTables(pageNo, pageSize, dataSource);\n        if (CollUtil.isNotEmpty(tablePagination.getData())) {\n            tableResps \u003d tablePagination.getData().stream().map(DataTableResp::of).toList();\n        }\n        return Pagination.pagination(tableResps, tablePagination.getTotal(), pageNo, pageSize);\n    }\n    \n    @Override\n    public Optional\u003cDataBaseTable\u003e getTable(Integer dsId, String tableName) {\n        BusinessDataSource businessDataSource \u003d this.checkDataSource(dsId);\n        return this.getTable(businessDataSource, tableName);\n    }\n    \n    @Override\n    public Optional\u003cDataBaseTable\u003e getTable(BusinessDataSource businessDataSource, String tableName) {\n        log.info(\"获取表信息，db:{},table:{}\", businessDataSource.getDbName(), tableName);\n        DataSourceTypes dataSourceTypes \u003d DataSourceTypes.of(businessDataSource.getType());\n        if (dataSourceTypes \u003d\u003d null) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        DatabaseAccessProvider databaseAccessProvider \u003d databaseAccessProviders.createAccessProvider(dataSourceTypes);\n        DataBaseTable table \u003d databaseAccessProvider.getTable(businessDataSource, tableName);\n        return Optional.ofNullable(table);\n    }\n    \n    @Override\n    public Result\u003cList\u003cDataTableColumnResp\u003e\u003e listColumns(Integer dsId, String tableName) {\n        BusinessDataSource dataSource \u003d this.checkDataSource(dsId);\n        List\u003cDatabaseColumn\u003e columns \u003d this.listColumns(dataSource, tableName);\n        if (CollUtil.isNotEmpty(columns)) {\n            return Result.data(columns.stream().map(DataTableColumnResp::of).toList());\n        }\n        return Result.data(new ArrayList\u003c\u003e());\n    }\n    \n    @Override\n    public List\u003cDatabaseColumn\u003e listColumns(BusinessDataSource businessDataSource, String tableName) {\n        log.info(\"查询表列信息，dbName:{},tableName:{}\", businessDataSource.getDbName(), tableName);\n        DataSourceTypes dataSourceTypes \u003d DataSourceTypes.of(businessDataSource.getType());\n        if (dataSourceTypes \u003d\u003d null) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        DatabaseAccessProvider databaseAccessProvider \u003d databaseAccessProviders.createAccessProvider(dataSourceTypes);\n        return databaseAccessProvider.listColumns(businessDataSource, tableName);\n    }\n    \n    @Override\n    public List\u003cMap\u003cString, Object\u003e\u003e executeSql(Integer dsId, String sql, int page, int size) {\n        log.info(\"executeQuery,dsId:{},sql:{}\", dsId, sql);\n        sql \u003d SQLUtils.checkSelect(sql);\n        BusinessDataSource dataSource \u003d this.checkDataSource(dsId);\n        DataSourceTypes dataSourceTypes \u003d DataSourceTypes.of(dataSource.getType());\n        if (dataSourceTypes \u003d\u003d null) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        DatabaseAccessProvider databaseAccessProvider \u003d databaseAccessProviders.createAccessProvider(dataSourceTypes);\n        // SQL语句剔除特殊字符，例如句号，分号等\n        sql \u003d StrUtil.replace(sql, \";\", \"\");\n        // sql \u003d StrUtil.replace(sql, \".\", \"\");\n        sql \u003d StrUtil.replace(sql, \"。\", \"\");\n        sql \u003d StrUtil.replace(sql, \"`\", \"\");\n        DataQueryResult queryResult \u003d databaseAccessProvider.executeQuery(dataSource, sql, page, size);\n        return queryResult.getData();\n    }\n    \n    @Override\n    public Result\u003cDataSQLResp\u003e executeQuery(Integer dsId, String sql, int page, int size) {\n        log.info(\"executeQuery,dsId:{},sql:{}\", dsId, sql);\n        sql \u003d SQLUtils.checkSelect(sql);\n        log.info(\"检查SQL语句通过，dsId:{},sql:{}\", dsId, sql);\n        BusinessDataSource dataSource \u003d this.checkDataSource(dsId);\n        DataSourceTypes dataSourceTypes \u003d DataSourceTypes.of(dataSource.getType());\n        if (dataSourceTypes \u003d\u003d null) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        DatabaseAccessProvider databaseAccessProvider \u003d databaseAccessProviders.createAccessProvider(dataSourceTypes);\n        // SQL语句剔除特殊字符，例如句号，分号等\n        sql \u003d StrUtil.replace(sql, \";\", \"\");\n        //sql \u003d StrUtil.replace(sql, \".\", \"\");\n        sql \u003d StrUtil.replace(sql, \"。\", \"\");\n        sql \u003d StrUtil.replace(sql, \"`\", \"\");\n        \n        // 执行查询并获取结果和总数\n        DataQueryResult queryResult \u003d databaseAccessProvider.executeQuery(dataSource, sql, page, size);\n        List\u003cMap\u003cString, Object\u003e\u003e records \u003d queryResult.getData();\n        Long total \u003d queryResult.getTotal();\n        \n        String sqlId \u003d IdUtil.getSnowflakeNextIdStr();\n        if (CollUtil.isNotEmpty(records)) {\n            // 获取当前的记录数据，并且转换为DataColumns\n            Map\u003cString, Object\u003e record \u003d records.get(0);\n            String key \u003d CacheCns.CACHE_KNOWLEDGE_SQL_RESULT + sqlId;\n            List\u003cDatabaseColumn\u003e columns \u003d new LinkedList\u003c\u003e();\n            for (Map.Entry\u003cString, Object\u003e entry : record.entrySet()) {\n                DatabaseColumn column \u003d new DatabaseColumn();\n                column.setName(entry.getKey());\n                column.setNullable(ToggleStatusEnum.NO.getCode());\n                SuperColumnType superColumnType \u003d SuperColumnType.getColumnType(entry.getValue().getClass());\n                column.setType(superColumnType.getDbType());\n                column.setPrimaryKey(ToggleStatusEnum.NO.getCode());\n                column.setDataType(superColumnType.getDbType());\n                column.setDataLength(0L);\n                columns.add(column);\n            }\n            DataSQLCacheResp cacheResp \u003d DataSQLCacheResp.of(sqlId, sql, columns);\n            // 保存\n            log.info(\"保存SQL结果，key:{}\", key);\n            stringRedisTemplate.opsForValue().set(key, cacheResp.toJson(), 10, TimeUnit.MINUTES);\n        }\n        DataSQLResp resp \u003d new DataSQLResp();\n        resp.setRetId(sqlId);\n        resp.setSql(sql);\n        resp.setData(records);\n        resp.setTotal(total);\n        return Result.data(resp);\n    }\n    \n    @Override\n    public synchronized void loadDataSource(BusinessDataSource dataSource) {\n        // create\n        DataSourceTypes dataSourceTypes \u003d DataSourceTypes.of(dataSource.getType());\n        if (dataSourceTypes \u003d\u003d null) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        // 加载数据源\n        if (!multiJdbcDataSourceFactory.containsDs(dataSource.getCode())) {\n            SqlSessionFactoryBean sqlSessionFactoryBean \u003d MultiDsProviderFactory.session(dataSourceTypes).getSessionFactory(this.buildParams(dataSource));\n            multiJdbcDataSourceFactory.addDs(dataSource.getCode(), sqlSessionFactoryBean);\n        }\n    }\n    \n    @Override\n    public DataSourceParams buildParams(BusinessDataSource dataSource) {\n        DataSourceParams dataSourceParams \u003d new DataSourceParams();\n        dataSourceParams.setIdleTimeout(dataSource.getIdleTimeout());\n        dataSourceParams.setMaxLifeTime(Objects.requireNonNullElse(dataSource.getMaxLifeTime(), 120000));\n        dataSourceParams.setMaximumPoolSize(Objects.requireNonNullElse(dataSource.getMaximumPoolSize(), 50));\n        dataSourceParams.setMinimumIdle(Objects.requireNonNullElse(dataSourceParams.getMinimumIdle(), 5));\n        dataSourceParams.setConnectionTimeout(Objects.requireNonNullElse(dataSourceParams.getConnectionTimeout(), 60000));\n        dataSourceParams.setHost(dataSource.getHost());\n        // 密码需要解密\n        dataSourceParams.setPassword(SecureDbUtils.decrypt(dataSource.getPassword()));\n        dataSourceParams.setPort(dataSource.getPort());\n        dataSourceParams.setDbName(dataSource.getDbName());\n        dataSourceParams.setUserName(dataSource.getUserName());\n        //  补充mappers的路径\n        String[] mapperLocations \u003d new String[]{\"classpath*:mapper/*Mapper.xml\", \"classpath*:mapper/*/*Mapper.xml\"};\n        dataSourceParams.setMapperLocations(List.of(mapperLocations));\n        dataSourceParams.setTypeAliasesPackage(\"com.torchv.repository.*.entity\");\n        dataSourceParams.setMapperClasses(List.of(MySQLMetadataMapper.class",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 208
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeChunkSortServiceImpl.java",
      "timestamp": 1761533697239,
      "startOffset": 827,
      "endOffset": 8539,
      "codeContent": "embedding.pojo.UniversalReRankerConfig;\nimport com.torchv.application.knowledge.domain.embedding.pojo.UniversalReRankerRequest;\nimport com.torchv.application.knowledge.domain.embedding.pojo.UniversalReRankerResponse;\nimport com.torchv.application.knowledge.domain.knowledge.KnowledgeChunkSortService;\nimport com.torchv.application.knowledge.model.request.knowledge.KnowledgeChunkSortParagraphReq;\nimport com.torchv.application.knowledge.model.request.knowledge.KnowledgeChunkSortReq;\nimport com.torchv.application.knowledge.model.response.knowledge.ChunkSortParagraph;\nimport com.torchv.application.knowledge.model.response.knowledge.KnowledgeChunkSort;\nimport com.torchv.application.knowledge.model.response.knowledge.KnowledgeChunkSortParagraphResp;\nimport com.torchv.application.knowledge.model.response.knowledge.KnowledgeChunkSortResp;\nimport com.torchv.application.system.service.ModelProviderService;\nimport com.torchv.common.context.UserContextHolder;\nimport com.torchv.common.model.Result;\nimport com.torchv.infra.rag.rerank.UniversalReRankerService;\nimport com.torchv.infra.web.spring.properties.ChatBotConfig;\nimport com.torchv.infra.vector.model.dataset.DataSetScoreChunkInfo;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/6/21 13:32\n * @since torchv_server v1.7.6\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class KnowledgeChunkSortServiceImpl implements KnowledgeChunkSortService {\n    \n    final ChatBotConfig chatBotConfig;\n    final StringRedisTemplate stringRedisTemplate;\n    final ApplicationContext applicationContext;\n    final ModelProviderService modelProviderService;\n    final UniversalReRankerService universalReRankerService;\n\n    @Override\n    public Result\u003cKnowledgeChunkSortResp\u003e sort(KnowledgeChunkSortReq sortReq) {\n        log.info(\"进行知识库chunk排序\");\n        int chunkSize \u003d CollUtil.size(sortReq.getChunks());\n        // 判断chunk数量\n        if (chunkSize \u003c\u003d 1) {\n            return Result.data(sortReq.defaultResult(false));\n        }\n        // rerank成功\n        String cacheKey \u003d sortReq.cacheKey();\n        String value \u003d stringRedisTemplate.opsForValue().get(cacheKey);\n        // 从缓存中获取结果\n        if (StrUtil.isNotBlank(value)) {\n            Optional\u003cKnowledgeChunkSortResp\u003e respOptional \u003d KnowledgeChunkSortResp.of(value);\n            if (respOptional.isPresent()) {\n                return Result.data(respOptional.get());\n            }\n        }\n        // 进行重排序\n        List\u003cDataSetScoreChunkInfo\u003e chunkInfos \u003d sortReq.toChunk();\n\n        // 组装用户问句，对召回对内容进行ReRank\n        List\u003cString\u003e  models\u003dmodelProviderService.availableReRankerModels(UserContextHolder.getTenantId());\n        if (CollUtil.isNotEmpty(models)){\n            Optional\u003cUniversalReRankerConfig\u003e reRankerConfigOptional \u003d modelProviderService\n                    .loadReRanker(models.get(0));\n            if (reRankerConfigOptional.isPresent()) {\n                UniversalReRankerConfig reRankerConfig \u003d reRankerConfigOptional.get();\n\n                        // 构建参数\n                UniversalReRankerRequest request \u003d universalReRankerService.build(reRankerConfig,\n                        sortReq.getQuery(), chunkInfos);\n                // reranker请求\n                UniversalReRankerResponse reRankResponse \u003d universalReRankerService.rerank(reRankerConfig, request);\n                // 获取重排序的片段信息,这里设置一个最小的分值\n                List\u003cDataSetScoreChunkInfo\u003e results \u003d universalReRankerService.result(reRankResponse, chunkInfos, 0f);\n                KnowledgeChunkSortResp result \u003d new KnowledgeChunkSortResp();\n                result.setSorted(true);\n                result.setQuery(sortReq.getQuery());\n                for (DataSetScoreChunkInfo chunkInfo : results) {\n                    result.add(KnowledgeChunkSort.of(chunkInfo.getContent(), chunkInfo.getNormalizedScore()));\n                }\n                String cacheValue \u003d result.toJson();\n                // 缓存10分钟\n                stringRedisTemplate.opsForValue().set(cacheKey, cacheValue, 10, TimeUnit.MINUTES);\n                return Result.data(result);\n            }else {\n                // rerank失败，通过hanlp的工具离线计算距离\n                return Result.data(sortReq.defaultResult(false));\n            }\n        }else {\n            // rerank失败，通过hanlp的工具离线计算距离\n            return Result.data(sortReq.defaultResult(false));\n        }\n\n    }\n    \n    @Override\n    public Result\u003cKnowledgeChunkSortParagraphResp\u003e sortParagraph(KnowledgeChunkSortParagraphReq sortReq) {\n        log.info(\"进行知识库Paragraph排序\");\n        int chunkSize \u003d CollUtil.size(sortReq.getChunks());\n        // 判断chunk数量\n        if (chunkSize \u003c\u003d 1) {\n            return Result.data(sortReq.defaultResult(false));\n        }\n        // rerank成功\n        String cacheKey \u003d sortReq.cacheKey();\n        log.info(\"cacheKey:{}\", cacheKey);\n        String value \u003d stringRedisTemplate.opsForValue().get(cacheKey);\n        // 从缓存中获取结果\n        if (StrUtil.isNotBlank(value)) {\n            Optional\u003cKnowledgeChunkSortParagraphResp\u003e respOptional \u003d KnowledgeChunkSortParagraphResp.of(value);\n            if (respOptional.isPresent()) {\n                return Result.data(respOptional.get());\n            }\n        }\n        // 进行重排序\n        List\u003cDataSetScoreChunkInfo\u003e chunkInfos \u003d sortReq.toChunk();\n\n\n        // 组装用户问句，对召回对内容进行ReRank\n        List\u003cString\u003e  models\u003dmodelProviderService.availableReRankerModels(UserContextHolder.getTenantId());\n        if (CollUtil.isNotEmpty(models)){\n            Optional\u003cUniversalReRankerConfig\u003e reRankerConfigOptional \u003d modelProviderService\n                    .loadReRanker(models.get(0));\n            if (reRankerConfigOptional.isPresent()) {\n                UniversalReRankerConfig reRankerConfig \u003d reRankerConfigOptional.get();\n                // 构建参数\n                UniversalReRankerRequest request \u003d universalReRankerService.build(reRankerConfig,\n                        sortReq.getQuery(), chunkInfos);\n                // reranker请求\n                UniversalReRankerResponse reRankResponse \u003d universalReRankerService.rerank(reRankerConfig, request);\n                // 获取重排序的片段信息,这里设置一个最小的分值\n                List\u003cDataSetScoreChunkInfo\u003e results \u003d universalReRankerService.result(reRankResponse, chunkInfos, 0f);\n                Map\u003cString, ChunkSortParagraph\u003e sortParagraphMap \u003d sortReq.map();\n                for (DataSetScoreChunkInfo chunkInfo : results) {\n                    String mapKey \u003d chunkInfo.mapKey();\n                    if (sortParagraphMap.containsKey(mapKey)) {\n                        sortParagraphMap.get(mapKey).setScore(chunkInfo.getNormalizedScore());\n                    }\n                }\n\n                KnowledgeChunkSortParagraphResp result \u003d new KnowledgeChunkSortParagraphResp();\n                result.setSorted(true);\n                result.setQuery(sortReq.getQuery());\n                for (ChunkSortParagraph chunk : sortParagraphMap.values()) {\n                    result.add(chunk);\n                }\n                // 对result进行排序\n                result.sort();\n                String cacheValue \u003d result.toJson();\n                // 缓存10分钟\n                stringRedisTemplate.opsForValue().set(cacheKey, cacheValue, 10, TimeUnit.MINUTES);\n                return Result.data(result);\n            }else {\n                // rerank失败，通过hanlp的工具离线计算距离\n                return Result.data(sortReq.defaultResult(false));\n            }\n        }",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 162
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761533697256,
      "startOffset": 2324,
      "endOffset": 66623,
      "codeContent": "model.response.SaasTenantInfoCacheResp;\nimport com.torchv.application.user.service.TenantCacheService;\nimport com.torchv.application.user.service.TenantInfoService;\nimport com.torchv.common.constant.Cns;\nimport com.torchv.common.constant.SplitTypes;\nimport com.torchv.common.constant.enums.file.chunk.AnalysisEngineEnum;\nimport com.torchv.common.constant.enums.file.chunk.AnalysisModeEnum;\nimport com.torchv.common.constant.kb.*;\nimport com.torchv.common.constant.knowledge.KnowledgeCategory;\nimport com.torchv.common.constant.knowledge.KnowledgeContainerType;\nimport com.torchv.common.context.UserContextHolder;\nimport com.torchv.common.model.Pagination;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.infra.common.extra.log.LogContext;\nimport com.torchv.infra.rag.constant.EmbeddingModels;\nimport com.torchv.infra.vector.VectorDBTypes;\nimport com.torchv.infra.vector.VectorIndexDelegate;\nimport com.torchv.infra.vector.model.VectorIndexCreateReq;\nimport com.torchv.infra.web.i18n.I18nMessage;\nimport com.torchv.infra.web.spring.properties.SecureConfig;\nimport com.torchv.kb.admin.model.dto.DepartmentUserOrgPermissions;\nimport com.torchv.kb.admin.service.KbDepartmentUserService;\nimport com.torchv.kb.page.model.response.SaasKnowledgeElementPermissionResp;\nimport com.torchv.kb.page.service.PagePermissionService;\nimport com.torchv.kb.space.model.request.KbKnowledgeBasePermissionReq;\nimport com.torchv.kb.space.model.vo.SaasKnowledgeContainerPermissionUpdateReq;\nimport com.torchv.kb.space.service.KbSpaceFollowService;\nimport com.torchv.kb.space.service.SaasKnowledgeConfigContainerService;\nimport com.torchv.kb.space.service.SaasKnowledgeConfigElementService;\nimport com.torchv.kb.space.service.SaasKnowledgeContainerPermissionService;\nimport com.torchv.kb.system.service.KbDashboardComponentService;\nimport com.torchv.repository.chat.dto.ContainerPermissionConditionV1;\nimport com.torchv.repository.chat.entity.SaasKnowledgeContainer;\nimport com.torchv.repository.chat.entity.SaasKnowledgeElementPermission;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeContainerMapper;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeElementPermissionMapper;\nimport com.torchv.repository.kb.department.dto.KbDepartmentUserTypeInfo;\nimport com.torchv.repository.kb.department.entity.KbDepartment;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentMapper;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentUserMapper;\nimport com.torchv.repository.kb.entity.SaasKnowledgeConfigContainer;\nimport com.torchv.repository.kb.entity.SaasKnowledgeConfigElement;\nimport com.torchv.repository.kb.entity.SaasKnowledgeContainerPermission;\nimport com.torchv.repository.kb.space.entity.KbSpaceFollowing;\nimport com.torchv.repository.kb.system.entity.KbDashboardComponent;\nimport com.torchv.repository.tenant.entity.SaasTenantInfo;\nimport com.torchv.repository.user.entity.SysUser;\nimport com.torchv.repository.user.mapper.SysUserMapper;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * 知识库容器模块-业务Service实现\n * @since torchv_server v0.1-beta.1\n * @author \u003ca href\u003d\"mailto:xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/01/02 19:54\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class KnowledgeContainerServiceImpl implements KnowledgeContainerService {\n\n    final SaasKnowledgeContainerMapper saasKnowledgeContainerMapper;\n    final KnowledgeElementService knowledgeElementService;\n    final PlatformKeyContainerService platformKeyContainerService;\n    final SaasKnowledgeContainerPermissionService saasKnowledgeContainerPermissionService;\n    final SaasKnowledgeConfigContainerService saasKnowledgeConfigContainerService;\n    final SaasKnowledgeConfigElementService saasKnowledgeConfigElementService;\n    final I18nMessage i18nMessage;\n    final KnowledgeTagRelationService knowledgeTagRelationService;\n    final KnowledgeCategoryService knowledgeCategoryService;\n    final KbDepartmentUserMapper kbDepartmentUserMapper;\n    final KbDepartmentUserService kbDepartmentUserService;\n    final KbDepartmentMapper kbDepartmentMapper;\n    final SysUserMapper sysUserMapper;\n    final VectorIndexDelegate vectorDatabaseDelegate;\n    final TenantInfoService tenantInfoService;\n    final ModelProviderService modelProviderService;\n    final KbDashboardComponentService kbDashboardComponentService;\n    final KnowledgeContainerDataService knowledgeContainerDataService;\n    final KnowledgeElementEmbeddingQueryService knowledgeElementEmbeddingQueryService;\n    final KnowledgeElementDataService knowledgeElementDataService;\n    final KbSpaceFollowService kbSpaceFollowService;\n    final PagePermissionService pagePermissionService;\n    final SecureConfig secureConfig;\n\n    private LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e getWrapper(KnowledgeContainerQueryReq knowledgeContainerQueryReq,SysUserInfo sysUserInfo) {\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getTenantId());\n        lambdaQueryWrapper.like(StrUtil.isNotBlank(knowledgeContainerQueryReq.getName()), SaasKnowledgeContainer::getName, knowledgeContainerQueryReq.getName());\n        lambdaQueryWrapper.ne(SaasKnowledgeContainer::getType, KnowledgeContainerType.PERSONAL_KNOWLEDGE.name());\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeContainerQueryReq.getCategory()), SaasKnowledgeContainer::getCategory, knowledgeContainerQueryReq.getCategory());\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeContainerQueryReq.getType()), SaasKnowledgeContainer::getType, knowledgeContainerQueryReq.getType());\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeContainerQueryReq.getClassifyCode()), SaasKnowledgeContainer::getClassifyCode, knowledgeContainerQueryReq.getClassifyCode());\n\n        if (StrUtil.isNotBlank(knowledgeContainerQueryReq.getParentCode())) {\n            lambdaQueryWrapper.eq(SaasKnowledgeContainer::getParentCode, knowledgeContainerQueryReq.getParentCode());\n        } else {\n            lambdaQueryWrapper.eq(SaasKnowledgeContainer::getParentCode, \"0\");\n        }\n        // 时间倒叙\n        lambdaQueryWrapper.orderByDesc(SaasKnowledgeContainer::getCreateTime);\n        return lambdaQueryWrapper;\n    }\n\n    /**\n     * 分页查询-知识库容器列表数据\n     * @param knowledgeContainerQueryReq 查询条件Vo\n     * @param pageNo 当前页码\n     * @param pageSize 每页页码大小\n     * @return 知识库容器列表\n     */\n    @Override\n    public Pagination\u003cKnowledgeContainerResp\u003e list(KnowledgeContainerQueryReq knowledgeContainerQueryReq, Integer pageNo, Integer pageSize) {\n        log.info(\"分页查询知识库容器列表,pageNo:{},pageSize:{}\", pageNo, pageSize);\n        log.info(\"分页QueryReq:{}\", knowledgeContainerQueryReq.toString());\n        // 权限增强获取知识库容器列表\n        SysUserInfo sysUserInfo\u003dUserContextHolder.getCurrentUser();\n        String code \u003d sysUserInfo.getCode();\n        String tenantId \u003d sysUserInfo.getTenantId();\n        List\u003cKnowledgeContainerResp\u003e knowledgeContainerRespInfos \u003d new ArrayList\u003c\u003e();\n        // 我的知识库\n        if (knowledgeContainerQueryReq.getCreator()!\u003d null \u0026\u0026 knowledgeContainerQueryReq.getCreator()){\n            // 如果是标签非空的查询，那么首先需要查询标签关联表\n            List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos;\n            long count;\n            try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.selectList(Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getTenantId, tenantId)\n                        .eq(SaasKnowledgeContainer::getCreator, code)\n                                .like(StrUtil.isNotBlank(knowledgeContainerQueryReq.getName()), SaasKnowledgeContainer::getName, knowledgeContainerQueryReq.getName())\n                        .eq(StrUtil.isNotEmpty(knowledgeContainerQueryReq.getClassifyCode()),SaasKnowledgeContainer::getClassifyCode, knowledgeContainerQueryReq.getClassifyCode())\n                        .orderByDesc(SaasKnowledgeContainer::getCreateTime));\n                count \u003d saasKnowledgeContainerPageNo.getTotal();\n            }\n            if (CollectionUtil.isNotEmpty(saasKnowledgeContainerInfos)) {\n                // 获取知识库容器列表\n                List\u003cString\u003e containerId \u003d saasKnowledgeContainerInfos.stream().map(SaasKnowledgeContainer::getCode).toList();\n                // 获取容器下的标签\n                Map\u003cString, List\u003cString\u003e\u003e tagMap \u003d knowledgeTagRelationService.listByContainerIds(containerId, tenantId);\n                Map\u003cString, UniversalEmbeddingConfig\u003e embeddingConfigMap\u003dknowledgeElementEmbeddingQueryService.listEmbeddingModelsByContainerId(containerId);\n                for (SaasKnowledgeContainer container:saasKnowledgeContainerInfos){\n                    KnowledgeContainerResp containerResp\u003d new SaasKnowledgeContainerApplyFunction(tagMap).apply(container);\n                    // 创建者默认就是manage\n                    containerResp.setPermissionType(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode());\n                    containerResp.applyEmbedding(embeddingConfigMap.get(container.getCode()));\n                    knowledgeContainerRespInfos.add(containerResp);\n                }\n            }\n            return Pagination.pagination(knowledgeContainerRespInfos, count, pageNo, pageSize);\n        }else{\n            List\u003cString\u003e teamCodes \u003d new ArrayList\u003c\u003e();\n            List\u003cString\u003e organizationCodes\u003dnew ArrayList\u003c\u003e();\n            // 开始查询\n            List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos;\n            long count;\n            boolean manageKnowledge\u003dsecureConfig.isManageKnowledge() \u0026\u0026 StpUtil.hasRole(Cns.CLI_ADMIN_ROLE);\n            // 启用超管账号，能够看到所有的知识\n            if (manageKnowledge){\n                // 单独查询\n                try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                    //List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByCondition(ContainerPermissionCondition.of(tenantId,code,teamCodes,processedOrgCodes,knowledgeContainerQueryReq.getName(),null));\n                    saasKnowledgeContainerInfos\u003d saasKnowledgeContainerMapper.selectList(getWrapper(knowledgeContainerQueryReq,sysUserInfo));\n                    count \u003d saasKnowledgeContainerPageNo.getTotal();\n                }\n            }else{\n                // 查询全部列表的\n                DepartmentUserOrgPermissions orgPermissions\u003dkbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n                organizationCodes\u003dorgPermissions.getOrganizationCodes();\n                teamCodes\u003dorgPermissions.getTeamCodes();\n                try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                    //List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByCondition(ContainerPermissionCondition.of(tenantId,code,teamCodes,processedOrgCodes,knowledgeContainerQueryReq.getName(),null));\n                    saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByConditionV1(ContainerPermissionConditionV1.of(tenantId, orgPermissions.permissionCodesToList(), knowledgeContainerQueryReq.getName(), null, knowledgeContainerQueryReq.getClassifyCode()));\n                    count \u003d saasKnowledgeContainerPageNo.getTotal();\n                }\n            }\n            if (CollectionUtil.isNotEmpty(saasKnowledgeContainerInfos)) {\n                // 获取知识库容器列表\n                List\u003cString\u003e containerId \u003d saasKnowledgeContainerInfos.stream().map(SaasKnowledgeContainer::getCode).toList();\n                // 批量查询创建者名字\n                Map\u003cString, CreatorInfo\u003e creatorInfoMap \u003d batchQueryCreatorInfo(saasKnowledgeContainerInfos, tenantId);\n                // 查询用户容器的权限列表\n                Map\u003cString,List\u003cSaasKnowledgeContainerPermission\u003e\u003e containerPermissionMap \u003d saasKnowledgeContainerPermissionService.listByContainerId(containerId, tenantId);\n                // 获取容器下的标签\n                Map\u003cString, List\u003cString\u003e\u003e tagMap \u003d knowledgeTagRelationService.listByContainerIds(containerId, tenantId);\n                Map\u003cString, UniversalEmbeddingConfig\u003e embeddingConfigMap\u003dknowledgeElementEmbeddingQueryService.listEmbeddingModelsByContainerId(containerId);\n                for (SaasKnowledgeContainer container:saasKnowledgeContainerInfos){\n                    KnowledgeContainerResp containerResp\u003d new SaasKnowledgeContainerApplyFunction(tagMap).apply(container);\n                    // 设置创建者名字\n                    CreatorInfo creatorInfo \u003d creatorInfoMap.get(container.getCreator());\n                    if (creatorInfo !\u003d null) {\n                        containerResp.setCreatorName(creatorInfo.getName());\n                        containerResp.setCreatorAvatar(creatorInfo.getAvatar());\n                    }\n                    // 判断用户的角色\n                    if (manageKnowledge){\n                        // 默认就是超管\n                        containerResp.setPermissionType(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode());\n                    }else {\n                        // 创建者默认就是manage\n                        containerResp.setPermissionType(getHighestPermission(containerPermissionMap.get(container.getCode()),organizationCodes,teamCodes,code));\n                    }\n                    containerResp.applyEmbedding(embeddingConfigMap.get(container.getCode()));\n                    knowledgeContainerRespInfos.add(containerResp);\n                }\n            }\n            return Pagination.pagination(knowledgeContainerRespInfos, count, pageNo, pageSize);\n        }\n    }\n\n    /**\n     * 创建知识库容器权限对象\n     * @param containerId 容器ID\n     * @param sysUserInfo 用户信息\n     * @param permissionType 权限类型\n     * @param membershipType 成员类型\n     * @param membershipCode 成员编码\n     * @param owner 是否所有者\n     * @return 权限对象\n     */\n    private SaasKnowledgeContainerPermission createContainerPermission(\n                                                                       String containerId,\n                                                                       String visibilityRange,\n                                                                       SysUserInfo sysUserInfo,\n                                                                       String permissionType,\n                                                                       String membershipType,\n                                                                       String membershipCode,\n                                                                       boolean owner) {\n        return SaasKnowledgeContainerPermission.builder()\n                .containerId(containerId)\n                .creator(sysUserInfo.getCode())\n                .createTime(LocalDateTime.now())\n                .modifier(sysUserInfo.getCode())\n                .modifierTime(LocalDateTime.now())\n                .tenantId(sysUserInfo.getTenantId())\n                .permissionType(permissionType)\n                .membershipType(membershipType)\n                .membershipCode(membershipCode)\n                .owner(owner)\n                .build();\n    }\n\n    /**\n     * 设置知识库容器权限\n     * @param containerId 容器ID\n     * @param sysUserInfo 用户信息\n     * @param permissionReqList 权限请求列表\n     */\n    private void setupContainerPermissions(\n                                           String containerId,\n                                           String visibilityRange,\n                                           SysUserInfo sysUserInfo,\n                                           List\u003cKbKnowledgeBasePermissionReq\u003e permissionReqList) {\n        List\u003cSaasKnowledgeContainerPermission\u003e permissionList \u003d new ArrayList\u003c\u003e();\n\n        // 添加用户自定义权限\n        // 过滤用户自己的权限\n        permissionReqList \u003d permissionReqList.stream().filter(kbKnowledgeBasePermissionReq -\u003e !kbKnowledgeBasePermissionReq.getOwner()).toList();\n        if (CollUtil.isNotEmpty(permissionReqList)) {\n            permissionReqList.forEach(req -\u003e {\n                if (req.getPermissionType() \u003d\u003d null \u0026\u0026 req.getMembershipType() \u003d\u003d null \u0026\u0026 req.getMembershipCode() \u003d\u003d null) {\n                    return;\n                }\n                permissionList.add(createContainerPermission(\n                        containerId,\n                        visibilityRange,\n                        sysUserInfo,\n                        req.getPermissionType(),\n                        req.getMembershipType(),\n                        req.getMembershipCode(),\n                        false));\n            });\n        }\n\n        // 添加创建者权限\n        permissionList.add(createContainerPermission(\n                containerId,\n                visibilityRange,\n                sysUserInfo,\n                KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode(),\n                KbKnowledgeBaseContainerMemberTypes.USER.getCode(),\n                sysUserInfo.getCode(),\n                true));\n\n        saasKnowledgeContainerPermissionService.saveBatch(permissionList);\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e add(KnowledgeContainerAddReq knowledgeContainerAddReq) {\n        log.info(\"新增知识库容器数据,Vo:{}\", knowledgeContainerAddReq.toString());\n        // 校验tags的长度\n        knowledgeContainerAddReq.validateTagLength();\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        if (StrUtil.equalsIgnoreCase(knowledgeContainerAddReq.getType(), KnowledgeContainerType.PERSONAL_KNOWLEDGE.name())) {\n            // 校验个人知识库\n            knowledgeContainerDataService.checkExists(sysUserInfo, true);\n        }\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d new SaasKnowledgeContainer();\n        BeanUtils.copyProperties(knowledgeContainerAddReq, saasKnowledgeContainer);\n        // 服务端生成唯一编码\n        saasKnowledgeContainer.setCode(IdUtil.getSnowflakeNextIdStr());\n        saasKnowledgeContainer.setCreator(sysUserInfo.getCode());\n        saasKnowledgeContainer.setCreateTime(LocalDateTime.now());\n        saasKnowledgeContainer.setModifier(sysUserInfo.getCode());\n        saasKnowledgeContainer.setModifierTime(LocalDateTime.now());\n        // 设置租户\n        saasKnowledgeContainer.setTenantId(sysUserInfo.getTenantId());\n        // 知识容器的可见性类型\n        saasKnowledgeContainer.setVisibilityRange(knowledgeContainerAddReq.getVisibilityRange());\n        int ret \u003d saasKnowledgeContainerMapper.insert(saasKnowledgeContainer);\n        if (ret \u003e 0) {\n            // 新增标签关联\n            knowledgeTagRelationService.addTags(saasKnowledgeContainer.getCode(), sysUserInfo, knowledgeContainerAddReq.getTag());\n\n            // 设置知识库配置\n            SaasKnowledgeConfigContainer saasKnowledgeConfigContainer \u003d buildKnowledgeConfigContainer(\n                    saasKnowledgeContainer.getCode(),\n                    sysUserInfo,\n                    knowledgeContainerAddReq);\n            saasKnowledgeConfigContainerService.save(saasKnowledgeConfigContainer);\n            log.info(\"知识库配置信息保存成功\");\n            // 设置容器权限\n            setupContainerPermissions(\n                    saasKnowledgeContainer.getCode(),\n                    knowledgeContainerAddReq.getVisibilityRange(),\n                    sysUserInfo,\n                    knowledgeContainerAddReq.getKbKnowledgeBasePermissionReqList());\n\n            Optional\u003cSaasTenantInfo\u003e saasTenantInfo \u003d tenantInfoService.queryByCode(sysUserInfo.getTenantId());\n            if (saasTenantInfo.isEmpty()) {\n                throw new IllegalArgumentException(\"The tenant account does not exist.\");\n            }\n            Optional\u003cUniversalEmbeddingConfig\u003e embeddingConfigOptional\u003dmodelProviderService.loadEmbedding(saasKnowledgeConfigContainer.getEmbeddingModel());\n            if (embeddingConfigOptional.isEmpty()) {\n                throw new IllegalArgumentException(\"The embedding model does not exist.\");\n            }\n\n\n            // 初始化向量数据库\n            VectorIndexCreateReq createReq \u003d\n                    VectorIndexCreateReq.builder().containerId(saasKnowledgeContainer.getCode())\n                            .tenantId(saasKnowledgeContainer.getTenantId())\n                            .embeddingModels(embeddingConfigOptional.get())\n                            .dbTypes(VectorDBTypes.of(saasTenantInfo.get().getDbType())).build();\n            vectorDatabaseDelegate.createIndex(createReq);\n\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.add.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n    }\n\n    /**\n     * 添加个人知识库\n     * \u003cp\u003e\n     * 该方法用于为当前用户创建一个个人知识库容器。会自动设置知识库的基本配置信息，\n     * 包括名称、类型、分类、分析引擎等参数，并将当前用户设置为知识库的管理者。\n     *\n     * @return Result\u003cString\u003e 操作结果，包含创建的知识库ID或错误信息\n     */\n    @Override\n    public Result\u003cString\u003e addPersonal() {\n        // 获取当前登录用户信息\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n\n        // 根据租户ID获取租户信息，用于获取嵌入模型配置\n        SaasTenantInfoCacheResp tenantInfo \u003d tenantInfoService.getByCode(sysUserInfo.getTenantId());\n\n        // 构建知识库权限列表，将当前用户设置为知识库的拥有者和管理者\n        List\u003cKbKnowledgeBasePermissionReq\u003e permissionReqList \u003d new ArrayList\u003c\u003e();\n        permissionReqList.add(KbKnowledgeBasePermissionReq.builder()\n                .membershipCode(sysUserInfo.getCode())\n                .membershipName(sysUserInfo.getLoginUsername())\n                .membershipType(KbKnowledgeBaseContainerMemberTypes.USER.getCode())\n                .permissionType(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode())\n                .owner(true)\n                .build());\n\n        // 构建知识库添加请求参数\n        KnowledgeContainerAddReq knowledgeContainerAddReq \u003d new KnowledgeContainerAddReq();\n        knowledgeContainerAddReq.setName(sysUserInfo.showName() + \"的个人知识库\");\n        knowledgeContainerAddReq.setType(KnowledgeContainerType.PERSONAL_KNOWLEDGE.name());\n        knowledgeContainerAddReq.setCategory(KnowledgeCategory.COMMON.name());\n        knowledgeContainerAddReq.setAnalysisEngine(AnalysisEngineEnum.DEFAULT.name());\n        knowledgeContainerAddReq.setAnalysisMode(AnalysisModeEnum.FAST_MODE.name());\n        knowledgeContainerAddReq.setEmbeddingModel(tenantInfo.getEmbeddingModel());\n        knowledgeContainerAddReq.setImageOcr(false);\n        knowledgeContainerAddReq.setMaxChunkLength(1024);\n        knowledgeContainerAddReq.setMaxChunkSize(1024);\n        knowledgeContainerAddReq.setOverlapSize(128);\n        knowledgeContainerAddReq.setSplitMode(SplitTypes.SEMANTIC.name());\n        knowledgeContainerAddReq.setVisibilityRange(KbKnowledgeBaseContainerVisibilityRange.MEMBERS_ONLY.getCode());\n        knowledgeContainerAddReq.setKbKnowledgeBasePermissionReqList(permissionReqList);\n\n        // 调用添加知识库方法\n        return this.add(knowledgeContainerAddReq);\n    }\n\n\n    @Override\n    public Result\u003cString\u003e move(KnowledgeContainerMoveReq moveReq) {\n        log.info(\"移动知识库容器,Vo:{}\", moveReq.toString());\n        String tenantId \u003d UserContextHolder.getTenantId();\n        if (!StrUtil.equalsIgnoreCase(moveReq.getParentCode(), \"0\")) {\n            // 校验父id是否存在\n            SaasKnowledgeContainer parentContainer \u003d saasKnowledgeContainerMapper.selectOne(Wrappers.lambdaQuery(SaasKnowledgeContainer.class)\n                    .eq(SaasKnowledgeContainer::getCode, moveReq.getParentCode())\n                    .eq(SaasKnowledgeContainer::getTenantId, tenantId), false);\n            Assert.isTrue(StrUtil.equalsIgnoreCase(KnowledgeContainerType.DIRECTORY.getName(), Objects.requireNonNull(parentContainer, \"knowledge.move.validation.code\").getType()),\n                    \"knowledge.move.validation.dir\");\n        }\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class)\n                .eq(SaasKnowledgeContainer::getId, moveReq.getId())\n                .eq(SaasKnowledgeContainer::getTenantId, tenantId);\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d new SaasKnowledgeContainer();\n        saasKnowledgeContainer.setParentCode(moveReq.getParentCode());\n        saasKnowledgeContainer.setModifierTime(LocalDateTime.now());\n        int ret \u003d saasKnowledgeContainerMapper.update(saasKnowledgeContainer, lambdaQueryWrapper);\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n\n    /**\n     * 更新知识库容器记录\n     * @param knowledgeContainerUpdateReq 更新知识库容器条件Vo\n     * @return 是否更新成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e update(KnowledgeContainerUpdateReq knowledgeContainerUpdateReq) {\n        log.info(\"根据主键id修改知识库容器数据,Vo:{}\", knowledgeContainerUpdateReq.toString());\n        // 校验tags的长度\n        knowledgeContainerUpdateReq.validateTagLength();\n        SaasKnowledgeContainer record \u003d saasKnowledgeContainerMapper.selectById(knowledgeContainerUpdateReq.getId());\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getId, knowledgeContainerUpdateReq.getId())\n                .eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getTenantId());\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d new SaasKnowledgeContainer();\n        BeanUtils.copyProperties(knowledgeContainerUpdateReq, saasKnowledgeContainer);\n        saasKnowledgeContainer.setModifierTime(LocalDateTime.now());\n        int ret \u003d saasKnowledgeContainerMapper.update(saasKnowledgeContainer, lambdaQueryWrapper);\n        if (ret \u003e 0) {\n            // 先删除\n            knowledgeTagRelationService.deleteByContainerId(record.getCode(), sysUserInfo.getTenantId());\n            // 更新标签关联\n            knowledgeTagRelationService.addTags(record.getCode(), sysUserInfo, knowledgeContainerUpdateReq.getTag());\n        }\n        // 更新配置信息\n\n        SaasKnowledgeConfigContainer request \u003d new SaasKnowledgeConfigContainer();\n        BeanUtil.copyProperties(knowledgeContainerUpdateReq, request);\n        request.setSplitDelimiters(knowledgeContainerUpdateReq.delimitersToJson());\n\n        saasKnowledgeConfigContainerService.updateById(request);\n        // 更新权限信息\n        SaasKnowledgeContainerPermissionUpdateReq saasKnowledgeContainerPermissionUpdateReq \u003d new SaasKnowledgeContainerPermissionUpdateReq();\n        saasKnowledgeContainerPermissionUpdateReq.setContainerId(record.getCode());\n        saasKnowledgeContainerPermissionUpdateReq.setVisibilityRange(knowledgeContainerUpdateReq.getVisibilityRange());\n        saasKnowledgeContainerPermissionUpdateReq.setKbKnowledgeBasePermissionReqList(knowledgeContainerUpdateReq.getKbKnowledgeBasePermissionReqList());\n        Result\u003cString\u003e update \u003d saasKnowledgeContainerPermissionService.update(saasKnowledgeContainerPermissionUpdateReq);\n        if (\"更新成功\".equals(update.getMessage())) {\n            ret \u003d 1;\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n\n    /**\n     * 根据id查询知识库容器详情\n     * @param id 知识库容器主键id\n     * @return 知识库容器详情\n     */\n    @Override\n    public Result\u003cKnowledgeContainerResp\u003e queryById(Integer id) {\n        log.info(\"根据主键id查询知识库容器详情,Id:{}\", id);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectById(id);\n        Assert.notNull(saasKnowledgeContainer, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getTenantId(), tenantId), \"system.common.request.invalid\");\n        KnowledgeContainerResp knowledgeContainerResp \u003d new KnowledgeContainerResp();\n        BeanUtils.copyProperties(saasKnowledgeContainer, knowledgeContainerResp);\n        // 查询分类名称\n        if (!StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getClassifyCode(), \"0\")) {\n            // 查询分类\n            knowledgeCategoryService.queryByCode(saasKnowledgeContainer.getClassifyCode(), tenantId).ifPresent(knowledgeCategoryResp -\u003e {\n                knowledgeContainerResp.setClassifyName(knowledgeCategoryResp.getName());\n            });\n        }\n        // 查询标签\n        knowledgeContainerResp.setTag(knowledgeTagRelationService.listByContainerId(saasKnowledgeContainer.getCode(), tenantId));\n        // 查询配置\n        Optional\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeConfigContainer \u003d saasKnowledgeConfigContainerService.queryInfoByContainerId(saasKnowledgeContainer.getCode());\n        saasKnowledgeConfigContainer.ifPresent(knowledgeConfigContainer -\u003e {\n            BeanUtil.copyProperties(knowledgeConfigContainer, knowledgeContainerResp);\n            knowledgeContainerResp.setSplitDelimiters(JSONArray.parseArray(saasKnowledgeConfigContainer.get().getSplitDelimiters(), String.class));\n        });\n\n        return Result.data(knowledgeContainerResp);\n    }\n\n    @Override\n    public Pagination\u003cKnowledgeContainerTagResp\u003e listTag(String name, Integer pageNo, Integer pageSize) {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        log.info(\"统计标签信息,tenant:{}\", tenantId);\n        return knowledgeTagRelationService.listByTenantId(tenantId, name, pageNo, pageSize);\n    }\n\n    @Override\n    public Result\u003cString\u003e queryPermissionByCode(String code) {\n        boolean manageKnowledge\u003dsecureConfig.isManageKnowledge() \u0026\u0026 StpUtil.hasRole(Cns.CLI_ADMIN_ROLE);\n        if (manageKnowledge){\n            return Result.data(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode());\n        }\n        return queryPermissionByCode(code,null);\n    }\n\n    @Override\n    public Result\u003cString\u003e queryPermissionByCode(String code, String elementCode) {\n        // 当前用户权限粒度返回 KbKnowledgeBaseContainerPermissionTypes\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        String permissionType \u003d saasKnowledgeContainerPermissionService.getHighestPermission(code,sysUserInfo);\n        KbKnowledgeBaseContainerPermissionTypes permissionTypes\u003dKbKnowledgeBaseContainerPermissionTypes.parse(permissionType);\n        // 如果\n        boolean manageKnowledge\u003dsecureConfig.isManageKnowledge() \u0026\u0026 StpUtil.hasRole(Cns.CLI_ADMIN_ROLE);\n        log.info(\"当前用户对知识库code:{}的最高权限是:{},是否超级管理员:{}\", code, permissionType,permissionType);\n        // 启用超管账号，能够看到所有的知识\n        if (manageKnowledge){\n           permissionType \u003d KbKnowledgeBaseContainerPermissionTypes.MANAGE.name();\n        }else {\n            // 如果是没权限的角色，那么需要判断当前的知识库是否设置为公开，如果是公开的情况下，那么给予只读角色\n            Optional\u003cSaasKnowledgeContainer\u003e containerOptional \u003d this.queryInfoByCode(code);\n            if (containerOptional.isEmpty()) {\n                return Result.data(KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode());\n            }\n            SaasKnowledgeContainer saasKnowledgeContainer \u003d containerOptional.get();\n            if (KbKnowledgeBaseContainerVisibilityRange.publicRead(saasKnowledgeContainer.getVisibilityRange())) {\n                log.info(\"知识库是公开的，给予只读权限，知识库code:{}\", code);\n                // 如果是公开的，那么给予只读权限\n                // 如果这个人本身在知识库是没有权限的，但是知识库是公开的，那么给予只读权限\n                // 不降权\n                if (permissionTypes\u003d\u003dKbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION) {\n                    permissionType \u003d KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY.getCode();\n                }\n                // 判断文档\n                if (StrUtil.isNotBlank(elementCode)){\n                    // 获取文档的权限列表\n                    List\u003cSaasKnowledgeElementPermissionResp\u003e elementPermissions \u003d pagePermissionService.listPagePermission(elementCode);\n                    if (CollUtil.isNotEmpty(elementPermissions)) {\n                        // 获取当前用户对文档的最低权限（最严格的限制）\n                        String elePermissionType \u003d getHighElementPermission(elementPermissions, sysUserInfo);\n                        if (!StrUtil.equalsIgnoreCase(elePermissionType, KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode())) {\n                            // 如果文档不是没有权限的，那么就赋予他这个人在这个文档的权限，否则保持知识库的只读权限\n                            permissionType \u003d elePermissionType;\n                        }\n\n                    }\n                }\n            }else{\n                // 如果不是公开的，并且传递了文档code，看这个人在文档code下是否有权限\n                if (StrUtil.isNotBlank(elementCode)){\n                    // 获取文档的权限列表\n                    List\u003cSaasKnowledgeElementPermissionResp\u003e elementPermissions \u003d pagePermissionService.listPagePermission(elementCode);\n                    if (CollUtil.isNotEmpty(elementPermissions)) {\n                        // 获取当前用户对文档的最低权限（最严格的限制）\n                        permissionType \u003d getHighElementPermission(elementPermissions, sysUserInfo);\n                    }\n                }\n            }\n        }\n        return Result.data(permissionType);\n    }\n\n    @Override\n    public Result\u003cKnowledgeContainerResp\u003e queryByCode(String code) {\n        log.info(\"根据code查询知识库容器详情,code:{}\", code);\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        String tenantId \u003d sysUserInfo.getTenantId();\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class)\n                .eq(SaasKnowledgeContainer::getCode, code)\n                .eq(SaasKnowledgeContainer::getTenantId, tenantId);\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectOne(lambdaQueryWrapper);\n        // 获取容器下的标签\n        Map\u003cString, List\u003cString\u003e\u003e tagMap \u003d knowledgeTagRelationService.listByContainerIds(List.of(saasKnowledgeContainer.getCode()), tenantId);\n        KnowledgeContainerResp knowledgeContainerResp\u003d new SaasKnowledgeContainerApplyFunction(tagMap).apply(saasKnowledgeContainer);\n        // 查询分类名称\n        if (!StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getClassifyCode(), \"0\")) {\n            // 查询分类\n            knowledgeCategoryService.queryByCode(saasKnowledgeContainer.getClassifyCode(), tenantId).ifPresent(knowledgeCategoryResp -\u003e {\n                knowledgeContainerResp.setClassifyName(knowledgeCategoryResp.getName());\n            });\n        }\n        // 查询权限信息\n        LambdaQueryWrapper\u003cSaasKnowledgeContainerPermission\u003e lambdaQueryWrapperInfo \u003d new LambdaQueryWrapper\u003c\u003e();\n        lambdaQueryWrapperInfo.eq(SaasKnowledgeContainerPermission::getContainerId, saasKnowledgeContainer.getCode());\n        List\u003cSaasKnowledgeContainerPermission\u003e permissionList \u003d saasKnowledgeContainerPermissionService.list(lambdaQueryWrapperInfo);\n        // 分离用户和其他类型的成员编码，并过滤空值\n        List\u003cString\u003e userCodeList \u003d new ArrayList\u003c\u003e();\n        List\u003cString\u003e departmentCodeList \u003d new ArrayList\u003c\u003e();\n        for (SaasKnowledgeContainerPermission permission : permissionList) {\n            if (permission !\u003d null \u0026\u0026 StrUtil.isNotBlank(permission.getMembershipCode())) {\n                if (KbKnowledgeBaseContainerMemberTypes.USER.name().equals(permission.getMembershipType())) {\n                    userCodeList.add(permission.getMembershipCode());\n                } else if (KbKnowledgeBaseContainerMemberTypes.ORGANIZATION.name().equals(permission.getMembershipType())\n                        || KbKnowledgeBaseContainerMemberTypes.TEAM.name().equals(permission.getMembershipType())) {\n                    departmentCodeList.add(permission.getMembershipCode());\n                }\n            }\n        }\n        // 查询部门信息并构建名称映射\n        Map\u003cString, String\u003e departmentNameMap \u003d new HashMap\u003c\u003e();\n        if (CollectionUtil.isNotEmpty(departmentCodeList)) {\n            LambdaQueryWrapper\u003cKbDepartment\u003e departmentWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            departmentWrapper.eq(KbDepartment::getTenantId, tenantId)\n                    .in(KbDepartment::getCode, departmentCodeList);\n\n            List\u003cKbDepartment\u003e departments \u003d kbDepartmentMapper.selectList(departmentWrapper);\n            if (CollectionUtil.isNotEmpty(departments)) {\n                departmentNameMap \u003d departments.stream()\n                        .filter(dept -\u003e StrUtil.isNotBlank(dept.getCode()) \u0026\u0026 StrUtil.isNotBlank(dept.getName()))\n                        .collect(Collectors.toMap(\n                                KbDepartment::getCode,\n                                KbDepartment::getName,\n                                (existing, replacement) -\u003e existing // 处理重复key的情况\n                        ));\n            }\n        }\n        // 查询用户信息并构建名称映射\n        Map\u003cString, String\u003e userNameMap \u003d new HashMap\u003c\u003e();\n        if (CollectionUtil.isNotEmpty(userCodeList)) {\n            LambdaQueryWrapper\u003cSysUser\u003e userWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            userWrapper.eq(SysUser::getTenantId, tenantId)\n                    .in(SysUser::getCode, userCodeList);\n\n            List\u003cSysUser\u003e users \u003d sysUserMapper.selectList(userWrapper);\n            if (CollectionUtil.isNotEmpty(users)) {\n                userNameMap \u003d users.stream()\n                        .filter(user -\u003e StrUtil.isNotBlank(user.getCode()) \u0026\u0026 StrUtil.isNotBlank(user.getLoginUsername()))\n                        .collect(Collectors.toMap(\n                                SysUser::getCode,\n                                user -\u003e StrUtil.isNotBlank(user.getRealName()) ? user.getRealName() : user.getLoginUsername(),\n                                (existing, replacement) -\u003e existing // 处理重复key的情况\n                        ));\n            }\n        }\n        // 使用final变量供lambda表达式使用\n        final Map\u003cString, String\u003e finalUserNameMap \u003d userNameMap;\n        final Map\u003cString, String\u003e finalDepartmentNameMap \u003d departmentNameMap;\n        // 将权限信息转换为请求对象列表\n        List\u003cKbKnowledgeBasePermissionReq\u003e permissionReqList \u003d CollUtil.isEmpty(permissionList) ? new ArrayList\u003c\u003e()\n                : permissionList.stream()\n                        .map(permission -\u003e {\n                            String membershipTypeName \u003d null;\n                            if (KbKnowledgeBaseContainerMemberTypes.USER.name().equals(permission.getMembershipType())) {\n                                membershipTypeName \u003d finalUserNameMap.get(permission.getMembershipCode());\n                            } else {\n                                membershipTypeName \u003d finalDepartmentNameMap.get(permission.getMembershipCode());\n                            }\n                            return KbKnowledgeBasePermissionReq.builder()\n                                    .id(permission.getId())\n                                    .permissionType(permission.getPermissionType())\n                                    .membershipType(permission.getMembershipType())\n                                    .membershipCode(permission.getMembershipCode())\n                                    .membershipName(membershipTypeName) // 添加这一行\n                                    .owner(permission.getOwner())\n                                    .build();\n                        })\n                        .sorted((p1, p2) -\u003e {\n                            // 1. 首先按照isOwner排序，true的排在前面\n                            if (Boolean.TRUE.equals(p1.getOwner()) \u0026\u0026 !Boolean.TRUE.equals(p2.getOwner())) {\n                                return -1;\n                            }\n                            if (!Boolean.TRUE.equals(p1.getOwner()) \u0026\u0026 Boolean.TRUE.equals(p2.getOwner())) {\n                                return 1;\n                            }\n                            // 2. 如果isOwner相同，则按照权限类型排序\n                            // 定义权限类型的优先级顺序：MANAGE \u003e EDIT \u003e VIEW_DOWNLOAD \u003e VIEW_ONLY\n                            Map\u003cString, Integer\u003e permissionPriority \u003d Map.of(\n                                    KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode(), 1, // 可管理\n                                    KbKnowledgeBaseContainerPermissionTypes.EDIT.getCode(), 2, // 可编辑\n                                    KbKnowledgeBaseContainerPermissionTypes.VIEW_DOWNLOAD.getCode(), 3, // 可查看/下载\n                                    KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY.getCode(), 4 // 仅可查看\n                            );\n\n                            // 获取权限类型的优先级，如果不存在则放到最后\n                            int priority1 \u003d permissionPriority.getOrDefault(p1.getPermissionType(), Integer.MAX_VALUE);\n                            int priority2 \u003d permissionPriority.getOrDefault(p2.getPermissionType(), Integer.MAX_VALUE);\n\n                            // 按照优先级排序\n                            return Integer.compare(priority1, priority2);\n                        })\n                        .collect(Collectors.toList());\n        // 当前用户权限粒度返回\n        boolean manageKnowledge\u003dsecureConfig.isManageKnowledge() \u0026\u0026 StpUtil.hasRole(Cns.CLI_ADMIN_ROLE);\n        if (manageKnowledge){\n            knowledgeContainerResp.setPermissionType(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode());\n        }else{\n            knowledgeContainerResp.setPermissionType(saasKnowledgeContainerPermissionService.getHighestPermission(permissionList,sysUserInfo));\n        }\n        knowledgeContainerResp.setVisibilityRange(saasKnowledgeContainer.getVisibilityRange());\n        knowledgeContainerResp.setKbKnowledgeBasePermissionReqList(permissionReqList);\n        // 查询知识库配置信息\n        LambdaQueryWrapper\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeBaseConfigLambdaQueryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n        saasKnowledgeBaseConfigLambdaQueryWrapper.eq(SaasKnowledgeConfigContainer::getTenantId, tenantId);\n        saasKnowledgeBaseConfigLambdaQueryWrapper.eq(SaasKnowledgeConfigContainer::getContainerId, saasKnowledgeContainer.getCode());\n        SaasKnowledgeConfigContainer saasKnowledgeBaseConfig \u003d saasKnowledgeConfigContainerService.getOne(saasKnowledgeBaseConfigLambdaQueryWrapper);\n        if (ObjectUtil.isNotEmpty(saasKnowledgeBaseConfig)) {\n            BeanUtils.copyProperties(saasKnowledgeBaseConfig, knowledgeContainerResp);\n            knowledgeContainerResp.setSplitDelimiters(JSONArray.parseArray(saasKnowledgeBaseConfig.getSplitDelimiters(), String.class));\n            // 防止id被篡改，重新设置知识库id\n            knowledgeContainerResp.setId(saasKnowledgeContainer.getId());\n        }\n\n        return Result.data(knowledgeContainerResp);\n    }\n\n    @Override\n    public Result\u003cKnowledgeContainerFollowResp\u003e queryFollowStatus(String code) {\n        List\u003cString\u003e spaceCodes \u003d List.of(code);\n        SysUserInfo currentUser \u003d UserContextHolder.getCurrentUser();\n        Map\u003cString, KbSpaceFollowing\u003e followingMap \u003d kbSpaceFollowService.listFollow(currentUser.getTenantId(), currentUser.getCode(), spaceCodes);\n        KnowledgeContainerFollowResp resp \u003d new KnowledgeContainerFollowResp();\n        resp.setFollowingState(followingMap.containsKey(code));\n        return Result.data(resp);\n    }\n\n\n    public String getHighestPermission(List\u003cSaasKnowledgeContainerPermission\u003e permissionList,List\u003cString\u003e organizationCodes, List\u003cString\u003e teamCodes,String currentUserCode){\n        if (permissionList \u003d\u003d null || permissionList.isEmpty()) {\n            return KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode();\n        }\n\n        // 定义权限优先级，数值越小优先级越高\n        Map\u003cString, Integer\u003e permissionPriority \u003d Map.of(\n                KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode(), 1,\n                KbKnowledgeBaseContainerPermissionTypes.EDIT.getCode(), 2,\n                KbKnowledgeBaseContainerPermissionTypes.VIEW_DOWNLOAD.getCode(), 3,\n                KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY.getCode(), 4);\n\n        String highestPermission \u003d KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode();\n        int highestPriority \u003d Integer.MAX_VALUE;\n\n        for (SaasKnowledgeContainerPermission permission : permissionList) {\n            String permissionType \u003d permission.getPermissionType();\n            String membershipType \u003d permission.getMembershipType();\n            String membershipCode \u003d permission.getMembershipCode();\n\n            boolean hasPermission \u003d false;\n\n            // 判断权限是否适用于当前用户\n            switch (membershipType) {\n                case \"USER\":\n                    // 如果是USER类型且membershipCode匹配当前用户\n                    hasPermission \u003d membershipCode.equalsIgnoreCase(currentUserCode);\n                    break;\n\n                case \"ORGANIZATION\":\n                    hasPermission\u003d organizationCodes.stream().anyMatch(s -\u003e StrUtil.contains(s, membershipCode));\n                    break;\n                case \"TEAM\":\n                    // 如果是ORGANIZATION或TEAM类型，检查当前用户是否属于该组织/团队\n                    hasPermission \u003d teamCodes.contains(membershipCode);\n                    break;\n\n                default:\n                    // 未知类型，跳过\n                    continue;\n            }\n\n            // 如果当前权限适用于用户，且优先级更高\n            if (hasPermission) {\n                Integer priority \u003d permissionPriority.get(permissionType);\n                if (priority !\u003d null \u0026\u0026 priority \u003c highestPriority) {\n                    highestPriority \u003d priority;\n                    highestPermission \u003d permissionType;\n\n                    // 如果已经是最高权限MANAGE，直接返回\n                    if (KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode().equals(permissionType)) {\n                        return permissionType;\n                    }\n                }\n            }\n        }\n        return highestPermission;\n    }\n    /**\n     * 从文档权限列表中获取当前用户的最高权限（最严格的限制）\n     * @param elementPermissions 文档权限列表\n     * @param sysUserInfo 当前用户信息\n     * @return 当前用户的最低权限\n     */\n    private String getHighElementPermission(List\u003cSaasKnowledgeElementPermissionResp\u003e elementPermissions, SysUserInfo sysUserInfo) {\n        if (elementPermissions \u003d\u003d null || elementPermissions.isEmpty()) {\n            return KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode();\n        }\n\n        String currentUserCode \u003d sysUserInfo.getCode();\n        String tenantId \u003d sysUserInfo.getTenantId();\n\n        // 查询用户所在的部门和团队列表\n        List\u003cKbDepartmentUserTypeInfo\u003e departmentUserTypeInfos \u003d kbDepartmentUserMapper.listDepartmentUsers(tenantId, currentUserCode);\n        List\u003cString\u003e teamCodes \u003d new ArrayList\u003c\u003e();\n        List\u003cString\u003e organizationCodes \u003d new ArrayList\u003c\u003e();\n\n        if (CollUtil.isNotEmpty(departmentUserTypeInfos)) {\n            for (KbDepartmentUserTypeInfo typeInfo : departmentUserTypeInfos) {\n                if (StrUtil.equalsIgnoreCase(typeInfo.getType(), KbDepartmentTypes.TEAM.name())) {\n                    teamCodes.add(typeInfo.getDepartmentCode());\n                } else {\n                    organizationCodes.add(typeInfo.getFullPath());\n                }\n            }\n        }\n        KbKnowledgeBaseContainerPermissionTypes lowestPermission \u003d KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION;\n\n        for (SaasKnowledgeElementPermissionResp permission : elementPermissions) {\n            String permissionType \u003d permission.getPermissionType();\n            KbKnowledgeBaseContainerPermissionTypes permissionTypes \u003d KbKnowledgeBaseContainerPermissionTypes.parse(permissionType);\n            String membershipType \u003d permission.getMembershipType();\n            KbKnowledgeBaseContainerMemberTypes memberTypes\u003dKbKnowledgeBaseContainerMemberTypes.parse(membershipType);\n            String membershipCode \u003d permission.getMembershipCode();\n\n            boolean hasPermission \u003d false;\n\n            // 判断权限是否适用于当前用户\n            switch (memberTypes) {\n                case USER:\n                    hasPermission \u003d membershipCode.equalsIgnoreCase(currentUserCode);\n                    break;\n                case ORGANIZATION:\n                    hasPermission \u003d organizationCodes.stream().anyMatch(s -\u003e StrUtil.contains(s, membershipCode));\n                    break;\n                case TEAM:\n                    hasPermission \u003d teamCodes.contains(membershipCode);\n                    break;\n                default:\n                    continue;\n            }\n\n            // 如果当前权限适用于用户，取级别更大的（权限更低的）\n            if (hasPermission) {\n                if (permissionTypes.getLevel() \u003c lowestPermission.getLevel()){\n                    lowestPermission \u003d permissionTypes;\n                }\n            }\n        }\n        return lowestPermission.getCode();\n    }\n\n\n    /**\n     * 从文档权限列表中获取当前用户的最低权限（最严格的限制）\n     * @param elementPermissions 文档权限列表\n     * @param sysUserInfo 当前用户信息\n     * @return 当前用户的最低权限\n     */\n    private String getLowestElementPermission(List\u003cSaasKnowledgeElementPermissionResp\u003e elementPermissions, SysUserInfo sysUserInfo) {\n        if (elementPermissions \u003d\u003d null || elementPermissions.isEmpty()) {\n            return KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode();\n        }\n\n        String currentUserCode \u003d sysUserInfo.getCode();\n        String tenantId \u003d sysUserInfo.getTenantId();\n\n        // 查询用户所在的部门和团队列表\n        List\u003cKbDepartmentUserTypeInfo\u003e departmentUserTypeInfos \u003d kbDepartmentUserMapper.listDepartmentUsers(tenantId, currentUserCode);\n        List\u003cString\u003e teamCodes \u003d new ArrayList\u003c\u003e();\n        List\u003cString\u003e organizationCodes \u003d new ArrayList\u003c\u003e();\n\n        if (CollUtil.isNotEmpty(departmentUserTypeInfos)) {\n            for (KbDepartmentUserTypeInfo typeInfo : departmentUserTypeInfos) {\n                if (StrUtil.equalsIgnoreCase(typeInfo.getType(), KbDepartmentTypes.TEAM.name())) {\n                    teamCodes.add(typeInfo.getDepartmentCode());\n                } else {\n                    organizationCodes.add(typeInfo.getFullPath());\n                }\n            }\n        }\n\n        // 定义权限级别，数值越大权限越低（限制越严格）\n        Map\u003cString, Integer\u003e permissionLevel \u003d Map.of(\n                KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode(), 1,\n                KbKnowledgeBaseContainerPermissionTypes.EDIT.getCode(), 2,\n                KbKnowledgeBaseContainerPermissionTypes.VIEW_DOWNLOAD.getCode(), 3,\n                KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY.getCode(), 4\n        );\n\n        String lowestPermission \u003d KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode();\n        int lowestLevel \u003d Integer.MIN_VALUE; // 初始化为最小值，表示还没有找到任何权限\n\n        for (SaasKnowledgeElementPermissionResp permission : elementPermissions) {\n            String permissionType \u003d permission.getPermissionType();\n            String membershipType \u003d permission.getMembershipType();\n            String membershipCode \u003d permission.getMembershipCode();\n\n            boolean hasPermission \u003d false;\n\n            // 判断权限是否适用于当前用户\n            switch (membershipType) {\n                case \"USER\":\n                    hasPermission \u003d membershipCode.equalsIgnoreCase(currentUserCode);\n                    break;\n                case \"ORGANIZATION\":\n                    hasPermission \u003d organizationCodes.stream().anyMatch(s -\u003e StrUtil.contains(s, membershipCode));\n                    break;\n                case \"TEAM\":\n                    hasPermission \u003d teamCodes.contains(membershipCode);\n                    break;\n                default:\n                    continue;\n            }\n\n            // 如果当前权限适用于用户，取级别更大的（权限更低的）\n            if (hasPermission) {\n                Integer level \u003d permissionLevel.get(permissionType);\n                if (level !\u003d null \u0026\u0026 level \u003e lowestLevel) {\n                    lowestLevel \u003d level;\n                    lowestPermission \u003d permissionType;\n\n                    // 如果已经是最低权限VIEW_ONLY，直接返回\n                    if (KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY.getCode().equals(permissionType)) {\n                        return permissionType;\n                    }\n                }\n            }\n        }\n\n        return lowestPermission;\n    }\n\n\n\n    @Override\n    public List\u003cSaasKnowledgeContainer\u003e listByCodes(List\u003cString\u003e codes, String tenantId) {\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class)\n                .eq(SaasKnowledgeContainer::getTenantId, tenantId)\n                .in(SaasKnowledgeContainer::getCode, codes);\n        return saasKnowledgeContainerMapper.selectList(lambdaQueryWrapper);\n    }\n\n    /**\n     * 根据主键id删除知识库容器\n     * @param id 主键id\n     * @return 是否删除成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e delete(Integer id) {\n        log.info(\"根据主键id删除知识库容器,id:{}\", id);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectById(id);\n        Assert.notNull(saasKnowledgeContainer, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getTenantId(), tenantId), \"system.common.request.invalid\");\n        LogContext.putVariable(\"name\", saasKnowledgeContainer.getName());\n        // 删除索引\n        knowledgeElementDataService.deleteByContainerId(saasKnowledgeContainer.getCode(), tenantId);\n        // 删除开放平台关联的key\n        platformKeyContainerService.deleteByContainerId(tenantId, saasKnowledgeContainer.getCode());\n        // 删除文件配置信息\n        LambdaQueryWrapper\u003cSaasKnowledgeConfigElement\u003e saasKnowledgeConfigElementLambdaQueryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n        saasKnowledgeConfigElementLambdaQueryWrapper.eq(SaasKnowledgeConfigElement::getContainerId, saasKnowledgeContainer.getCode());\n        saasKnowledgeConfigElementLambdaQueryWrapper.eq(SaasKnowledgeConfigElement::getTenantId, tenantId);\n        saasKnowledgeConfigElementService.remove(saasKnowledgeConfigElementLambdaQueryWrapper);\n        // 删除文件信息\n        knowledgeElementService.deleteByContainerCode(saasKnowledgeContainer.getCode(), tenantId);\n        // 删除标签关系\n        knowledgeTagRelationService.deleteByContainerId(saasKnowledgeContainer.getCode(), tenantId);\n        // 删除权限信息\n        LambdaQueryWrapper\u003cSaasKnowledgeContainerPermission\u003e saasKnowledgeContainerPermissionLambdaQueryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n        saasKnowledgeContainerPermissionLambdaQueryWrapper.eq(SaasKnowledgeContainerPermission::getContainerId, saasKnowledgeContainer.getCode());\n        saasKnowledgeContainerPermissionLambdaQueryWrapper.eq(SaasKnowledgeContainerPermission::getTenantId, tenantId);\n        saasKnowledgeContainerPermissionService.remove(saasKnowledgeContainerPermissionLambdaQueryWrapper);\n        log.info(\"删除删除权限信息成功，知识库id为{}\", saasKnowledgeContainer.getCode());\n        // 删除知识库配置信息\n        LambdaQueryWrapper\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeConfigContainerLambdaQueryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n        saasKnowledgeConfigContainerLambdaQueryWrapper.eq(SaasKnowledgeConfigContainer::getContainerId, saasKnowledgeContainer.getCode());\n        saasKnowledgeConfigContainerLambdaQueryWrapper.eq(SaasKnowledgeConfigContainer::getTenantId, tenantId);\n        saasKnowledgeConfigContainerService.remove(saasKnowledgeConfigContainerLambdaQueryWrapper);\n        log.info(\"删除知识库配置信息成功，知识库id为{}\", saasKnowledgeContainer.getCode());\n        // 删除布局组件表部署配置信息\n        LambdaQueryWrapper\u003cKbDashboardComponent\u003e kbDashboardComponentLambdaQueryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n        kbDashboardComponentLambdaQueryWrapper.eq(KbDashboardComponent::getRegionCode,saasKnowledgeContainer.getCode());\n        kbDashboardComponentService.remove(kbDashboardComponentLambdaQueryWrapper);\n        log.info(\"删除布局组件表部署配置信息成功，知识库id为{}\", saasKnowledgeContainer.getCode());\n        int ret \u003d saasKnowledgeContainerMapper.deleteById(id);\n\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.delete.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.delete.fail\"));\n    }\n\n    /**\n     * 根据id查询知识库容器实体详情\n     * @param id 主键id\n     * @return 知识库容器的Optional\n     */\n    @Override\n    public Optional\u003cSaasKnowledgeContainer\u003e queryInfoById(Integer id) {\n        log.info(\"根据请求id查询知识库容器实体详情,id:{}\", id);\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectById(id);\n        if (saasKnowledgeContainer !\u003d null) {\n            return Optional.of(saasKnowledgeContainer);\n        }\n        return Optional.empty();\n    }\n\n    /**\n     * 校验请求id是否非法\n     * @param id 主键id\n     * @return 是否存在\n     */\n    @Override\n    public boolean checkIdExists(Integer id) {\n        log.info(\"校验请求Id是否存在,id:{}\", id);\n        return saasKnowledgeContainerMapper.selectById(id) !\u003d null;\n    }\n\n    @Override\n    public Result\u003cKnowledgeContainerResp\u003e queryBasicInfoById(Integer id)\n    {\n\n        log.info(\"根据主键id查询知识库容器详情,Id:{}\", id);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectById(id);\n        Assert.notNull(saasKnowledgeContainer, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getTenantId(), tenantId), \"system.common.request.invalid\");\n        KnowledgeContainerResp knowledgeContainerResp \u003d new KnowledgeContainerResp();\n        BeanUtils.copyProperties(saasKnowledgeContainer, knowledgeContainerResp);\n        // 查询分类名称\n        if (!StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getClassifyCode(), \"0\")) {\n            // 查询分类\n            knowledgeCategoryService.queryByCode(saasKnowledgeContainer.getClassifyCode(), tenantId).ifPresent(knowledgeCategoryResp -\u003e {\n                knowledgeContainerResp.setClassifyName(knowledgeCategoryResp.getName());\n            });\n        }\n        // 查询标签\n        knowledgeContainerResp.setTag(knowledgeTagRelationService.listByContainerId(saasKnowledgeContainer.getCode(), tenantId));\n        return Result.data(knowledgeContainerResp);\n    }\n\n    @Override\n    public Optional\u003cSaasKnowledgeContainer\u003e queryInfoByCode(String code) {\n        log.info(\"根据code查询知识库容器详情1,code:{}\", code);\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getCode, code);\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectOne(lambdaQueryWrapper,false);\n        return Optional.ofNullable(saasKnowledgeContainer);\n    }\n\n    @Override\n    public Result\u003cKnowledgeContainerResp\u003e queryBasicInfoByCode(String code) {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        log.info(\"根据code查询知识库容器详情1,code:{}\", code);\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getCode, code).eq(SaasKnowledgeContainer::getTenantId, tenantId);\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectOne(lambdaQueryWrapper,false);\n        Assert.notNull(saasKnowledgeContainer, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getTenantId(), tenantId), \"system.common.request.invalid\");\n        KnowledgeContainerResp knowledgeContainerResp \u003d new KnowledgeContainerResp();\n        BeanUtils.copyProperties(saasKnowledgeContainer, knowledgeContainerResp);\n        // 查询分类名称\n        if (!StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getClassifyCode(), \"0\")) {\n            // 查询分类\n            knowledgeCategoryService.queryByCode(saasKnowledgeContainer.getClassifyCode(), tenantId).ifPresent(knowledgeCategoryResp -\u003e {\n                knowledgeContainerResp.setClassifyName(knowledgeCategoryResp.getName());\n            });\n        }\n        // 查询标签\n        knowledgeContainerResp.setTag(knowledgeTagRelationService.listByContainerId(saasKnowledgeContainer.getCode(), tenantId));\n        return Result.data(knowledgeContainerResp);\n    }\n\n    @Override\n    public Result\u003cString\u003e updateBasicInfo(KnowledgeContainerUpdateReq knowledgeContainerUpdateReq)\n    {\n\n        log.info(\"根据主键id修改知识库容器数据,Vo:{}\", knowledgeContainerUpdateReq.toString());\n        // 校验tags的长度\n        knowledgeContainerUpdateReq.validateTagLength();\n        SaasKnowledgeContainer record \u003d saasKnowledgeContainerMapper.selectById(knowledgeContainerUpdateReq.getId());\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getId, knowledgeContainerUpdateReq.getId())\n                .eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getTenantId());\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d new SaasKnowledgeContainer();\n        BeanUtils.copyProperties(knowledgeContainerUpdateReq, saasKnowledgeContainer);\n        saasKnowledgeContainer.setModifierTime(LocalDateTime.now());\n        int ret \u003d saasKnowledgeContainerMapper.update(saasKnowledgeContainer, lambdaQueryWrapper);\n        if (ret \u003e 0) {\n            // 先删除\n            knowledgeTagRelationService.deleteByContainerId(record.getCode(), sysUserInfo.getTenantId());\n            // 更新标签关联\n            knowledgeTagRelationService.addTags(record.getCode(), sysUserInfo, knowledgeContainerUpdateReq.getTag());\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n\n    /**\n     * 创建知识库配置\n     * @param containerId 容器ID\n     * @param sysUserInfo 用户信息\n     * @param addReq 添加请求\n     * @return 知识库配置\n     */\n    private SaasKnowledgeConfigContainer buildKnowledgeConfigContainer(\n                                                                       String containerId,\n                                                                       SysUserInfo sysUserInfo,\n                                                                       KnowledgeContainerAddReq addReq) {\n        SaasKnowledgeConfigContainer config \u003d SaasKnowledgeConfigContainer.builder()\n                .containerId(containerId)\n                .creator(sysUserInfo.getCode())\n                .createTime(LocalDateTime.now())\n                .modifier(sysUserInfo.getCode())\n                .modifierTime(LocalDateTime.now())\n                .tenantId(sysUserInfo.getTenantId())\n                .embeddingModel(addReq.getEmbeddingModel())\n                .splitMode(addReq.getSplitMode())\n                .maxChunkSize(addReq.getMaxChunkSize())\n                .maxChunkLength(addReq.getMaxChunkLength())\n                .imageOcr(addReq.getImageOcr())\n                .splitDelimiters(addReq.delimitersToJson())\n                .analysisEngine(addReq.getAnalysisEngine())\n                .analysisMode(addReq.getAnalysisMode())\n                .ocrEngine(addReq.getOcrEngine())\n                .multiModalityEngine(addReq.getMultiModalityEngine())\n                .engineType(addReq.getEngineType())\n                .overlapSize(addReq.getOverlapSize())\n                .build();\n\n        return checkBeforeInsert(config, addReq);\n    }\n\n    /**\n     * 根据分割模式设置配置\n     * @param addReq 添加请求\n     * @return 配置对象\n     */\n    private SaasKnowledgeConfigContainer checkBeforeInsert(\n                                                           SaasKnowledgeConfigContainer config,\n                                                           KnowledgeContainerAddReq addReq) {\n        String splitMode \u003d addReq.getSplitMode();\n\n        if (KbDocumentShardingMode.FIXED_SIZE.name().equals(splitMode)) {\n            Assert.isTrue(addReq.getMaxChunkSize() \u003e 0, \"固定片段最大长度不能为空\");\n        } else if (KbDocumentShardingMode.SEMANTIC.name().equals(splitMode)) {\n            Assert.isTrue(addReq.getMaxChunkLength() \u003e 0, \"语义最大长度不能为空\");\n        } else if (KbDocumentShardingMode.DELIMITER.name().equals(splitMode)) {\n            Assert.isTrue(CollectionUtil.isNotEmpty(addReq.getSplitDelimiters()), \"分隔符不能为空\");\n        }\n\n        return config;\n    }\n\n    /**\n     * 创建者信息内部类\n     */\n    private static class CreatorInfo {\n        private final String name;\n        private final String avatar;\n\n        public CreatorInfo(String name, String avatar) {\n            this.name \u003d name;\n            this.avatar \u003d avatar;\n        }\n\n        public String getName() {\n            return name;\n        }\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1166
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerDataServiceImpl.java",
      "timestamp": 1761533697246,
      "startOffset": 994,
      "endOffset": 9111,
      "codeContent": "Result;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.kb.space.service.SaasKnowledgeConfigContainerService;\nimport com.torchv.kb.space.service.SaasKnowledgeContainerPermissionService;\nimport com.torchv.kb.system.model.dto.KnowledgeCapacityDirectory;\nimport com.torchv.kb.system.service.KnowledgeCapacityService;\nimport com.torchv.repository.chat.entity.SaasKnowledgeContainer;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeContainerMapper;\nimport com.torchv.repository.kb.entity.SaasKnowledgeConfigContainer;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.redisson.api.RLock;\nimport org.redisson.api.RedissonClient;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2025/8/12 16:00\n * @since ais-server v1.3\n */\n@AllArgsConstructor\n@Slf4j\n@Service\npublic class KnowledgeContainerDataServiceImpl implements KnowledgeContainerDataService {\n\n    final SaasKnowledgeContainerMapper saasKnowledgeContainerMapper;\n    final SaasKnowledgeContainerPermissionService saasKnowledgeContainerPermissionService;\n    final SaasKnowledgeConfigContainerService saasKnowledgeConfigContainerService;\n    final RedissonClient redissonClient;\n    final TenantCacheService tenantCacheService;\n    final KnowledgeCapacityService knowledgeCapacityService;\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public String createPersonKnowledge(SysUserInfo sysUserInfo) {\n        // 查询个人知识库是否存在\n        return createPersonalKnowledge(sysUserInfo,AdminKnowledgePersonalContainerReq.of(sysUserInfo),false);\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public String createPersonalKnowledge(SysUserInfo sysUserInfo, AdminKnowledgePersonalContainerReq containerReq,boolean checkExist) {\n        // 查询个人知识库是否存在\n        Optional\u003cTenantCacheInfo\u003e  cacheInfoOptional \u003d tenantCacheService.getByTenantId(sysUserInfo.getTenantId());\n        if (cacheInfoOptional.isEmpty()) {\n            log.error(\"租户信息不存在，tenantId: {}\", sysUserInfo.getTenantId());\n            throw new IllegalArgumentException(\"请求数据非法\");\n        }\n        TenantCacheInfo tenantCacheInfo \u003d cacheInfoOptional.get();\n        // 查询个人知识库是否存在\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d findPersonalKnowledge(sysUserInfo);\n        if (saasKnowledgeContainer !\u003d null) {\n            if (checkExist){\n                throw new RuntimeException(\"个人知识库已存在，请勿重复创建\");\n            }\n            return saasKnowledgeContainer.getCode();\n        }\n        // 先insert\n        String redisKey \u003d KbCacheConst.KB_LOCK_USER_KNOWLEDGE_PERSON + sysUserInfo.getCode();\n        RLock rLock \u003d redissonClient.getLock(redisKey);\n        boolean lockAcquired \u003d false;\n        try {\n            lockAcquired \u003d rLock.tryLock(10L, 10L, TimeUnit.SECONDS);\n            if (!lockAcquired) {\n                log.warn(\"获取分布式锁失败，key: {}\", redisKey);\n                throw new IllegalArgumentException(\"系统繁忙，请稍后再试\");\n            }\n            // 再次查询个人知识库是否存在\n            // 双重检查\n            saasKnowledgeContainer \u003d findPersonalKnowledge(sysUserInfo);\n            if (saasKnowledgeContainer !\u003d null) {\n                if (checkExist){\n                    throw new RuntimeException(\"个人知识库已存在，请勿重复创建\");\n                }\n                return saasKnowledgeContainer.getCode();\n            }\n            // 创建个人知识库\n            saasKnowledgeContainer \u003d buildKnowledgeContainer(sysUserInfo,containerReq);\n            // 创建知识库，查询个人知识库的容量配置\n            KnowledgeCapacityDirectory knowledgeCapacityDirectory\u003dknowledgeCapacityService.getKnowledgeCapacityDirectory(sysUserInfo.getTenantId());\n            Assert.notNull(knowledgeCapacityDirectory, \"系统繁忙，请稍后再试(请配置知识库容量配置)\");\n            // 设置个人知识库的默认配置\n            saasKnowledgeContainer.setCapacitySize(knowledgeCapacityDirectory.getUserCapacitySize());\n            // 设置个人知识库的默认配置\n            int ret \u003d saasKnowledgeContainerMapper.insert(saasKnowledgeContainer);\n            if (ret\u003c\u003d0){\n                log.error(\"创建个人知识库失败，code: {}, name: {}\", saasKnowledgeContainer.getCode(), saasKnowledgeContainer.getName());\n                throw new RuntimeException(\"系统繁忙，请稍后再试\");\n            }\n            // 设置知识库配置\n            SaasKnowledgeConfigContainer saasKnowledgeConfigContainer \u003d buildKnowledgeConfigContainer(saasKnowledgeContainer.getCode(),sysUserInfo, tenantCacheInfo);\n            saasKnowledgeConfigContainerService.save(saasKnowledgeConfigContainer);\n            log.info(\"知识库配置信息保存成功\");\n            // 添加权限\n            saasKnowledgeContainerPermissionService.addPersonalKnowledgePermission(saasKnowledgeContainer, sysUserInfo);\n            return saasKnowledgeContainer.getCode();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"tenant.package.add.result.exception\");\n        }finally {\n            // 安全释放锁\n            if (lockAcquired) {\n                try {\n                    if (rLock.isLocked() \u0026\u0026 rLock.isHeldByCurrentThread()) {\n                        rLock.unlock();\n                        log.debug(\"成功释放分布式锁，key: {}\", redisKey);\n                    }\n                } catch (Exception e) {\n                    log.error(\"释放分布式锁失败，key: {}\", redisKey, e);\n                    // 不重新抛出异常，避免覆盖业务异常\n                }\n            }\n        }\n    }\n\n    /**\n     * 创建知识库配置\n     * @param containerId 容器ID\n     * @param sysUserInfo 用户信息\n     * @return 知识库配置\n     */\n    private SaasKnowledgeConfigContainer buildKnowledgeConfigContainer(\n            String containerId,\n            SysUserInfo sysUserInfo,\n            TenantCacheInfo tenantCacheInfo ) {\n        // 默认最大片段大小\n        // 默认语义最大长度\n        // 默认分析模式\n        // 默认重叠大小\n        return SaasKnowledgeConfigContainer.builder()\n                .containerId(containerId)\n                .creator(sysUserInfo.getCode())\n                .createTime(LocalDateTime.now())\n                .modifier(sysUserInfo.getCode())\n                .modifierTime(LocalDateTime.now())\n                .tenantId(sysUserInfo.getTenantId())\n                .embeddingModel(tenantCacheInfo.getEmbeddingModels())\n                .splitMode(KbDocumentShardingMode.SEMANTIC.name())\n                .maxChunkSize(1024) // 默认最大片段大小\n                .maxChunkLength(1024) // 默认语义最大长度\n                .analysisEngine(\"DEFAULT\")\n                .analysisMode(\"FAST_MODE\") // 默认分析模式\n                .overlapSize(128) // 默认重叠大小\n                .build();\n    }\n\n    /**\n     * 查找个人知识库\n     * @param sysUserInfo 用户信息\n     * @return SaasKnowledgeContainer\n     */\n    private SaasKnowledgeContainer findPersonalKnowledge(SysUserInfo sysUserInfo) {\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class)\n                .eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getTenantId())\n                .eq(SaasKnowledgeContainer::getType, KnowledgeContainerType.PERSONAL_KNOWLEDGE.name())\n                .eq(SaasKnowledgeContainer::getCreator, sysUserInfo.getCode());\n        return saasKnowledgeContainerMapper.selectOne(lambdaQueryWrapper, false);\n    }\n\n    @Override\n    public void checkExists(SysUserInfo sysUserInfo, boolean checkExist) {\n        // 查询个人知识库是否存在\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d findPersonalKnowledge(sysUserInfo);\n        if (saasKnowledgeContainer !\u003d null) {\n            if (checkExist) {\n                throw new RuntimeException(\"个人知识库已存在，请勿重复创建\");\n            }\n        } else {\n            log.info(\"个人知识库不存在，用户: {}\", sysUserInfo.getCode());\n        }\n    }\n\n    @Override\n    public Result\u003cString\u003e checkPersonal(SysUserInfo sysUserInfo, boolean b) {\n        // 查询个人知识库是否存在\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d findPersonalKnowledge(sysUserInfo);\n        if (saasKnowledgeContainer !\u003d null){\n            return Result.data(saasKnowledgeContainer.getCode());\n        }\n        return Result.data(null);",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 184
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeElementServiceImpl.java",
      "timestamp": 1761533697297,
      "startOffset": 1317,
      "endOffset": 177842,
      "codeContent": "constant.kb.*;\nimport com.torchv.common.exception.supplier.BizExceptionSupplier;\nimport com.torchv.common.extra.filter.ThreadLocalHolder;\nimport com.torchv.common.utils.unit.DataSizeUtil;\nimport cn.hutool.core.lang.Assert;\nimport cn.hutool.core.util.IdUtil;\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.crypto.digest.MD5;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.ObjectUtils;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.github.pagehelper.Page;\nimport com.github.pagehelper.PageHelper;\nimport com.torchv.application.billing.service.BillingSubscribeAccountService;\nimport com.torchv.application.knowledge.domain.embedding.pojo.DataSetChunkCallbackReq;\nimport com.torchv.application.knowledge.domain.embedding.pojo.DataSetChunkSubmitModel;\nimport com.torchv.application.knowledge.domain.embedding.pojo.UniversalEmbeddingConfig;\nimport com.torchv.application.knowledge.domain.knowledge.*;\nimport com.torchv.application.knowledge.domain.knowledge.pojo.*;\nimport com.torchv.application.knowledge.model.dto.queue.MessageFileConvertReq;\nimport com.torchv.application.knowledge.model.request.KnowledgeElementTreeResp;\nimport com.torchv.application.knowledge.model.request.PageVersionRestoreReq;\nimport com.torchv.application.knowledge.model.request.knowledge.*;\nimport com.torchv.application.knowledge.model.response.SaasKnowledgeElementCacheInfo;\nimport com.torchv.application.knowledge.model.response.knowledge.KnowledgeElementResp;\nimport com.torchv.application.knowledge.model.response.knowledge.BatchOperationResult;\nimport com.torchv.application.knowledge.service.KnowledgeElementTrendService;\nimport com.torchv.application.knowledge.vo.SaasKnowledgeElementTrendAddReq;\nimport com.torchv.application.operation.model.resp.MaterialInfoResp;\nimport com.torchv.application.operation.service.MaterialService;\nimport com.torchv.application.store.model.req.ChatKnowledgeUploadReq;\nimport com.torchv.application.user.service.UserService;\nimport com.torchv.common.constant.Cns;\nimport com.torchv.common.constant.dataset.DocTimeStatus;\nimport com.torchv.common.constant.enums.ErrorCodeEnum;\nimport com.torchv.common.constant.enums.file.ProcessStatusEnum;\nimport com.torchv.common.constant.knowledge.*;\nimport com.torchv.infra.common.constant.knowledge.DataSetFileCategory;\nimport com.torchv.common.context.UserContextHolder;\nimport com.torchv.common.exception.BizException;\nimport com.torchv.infra.common.extra.log.LogContext;\nimport com.torchv.common.model.Pagination;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.common.utils.GsonUtils;\nimport com.torchv.infra.common.utils.MarkdownUtils;\nimport com.torchv.common.utils.WebUtil;\nimport com.torchv.infra.common.utils.SQLUtils;\nimport com.torchv.kb.admin.model.dto.DepartmentUserOrgPermissions;\nimport com.torchv.kb.admin.service.KbDepartmentUserService;\nimport com.torchv.kb.common.constant.KbEventMessageTypes;\nimport com.torchv.kb.page.model.request.KnowledgeElementContentUpdateReq;\nimport com.torchv.kb.page.model.request.KnowledgeElementAddReq;\nimport com.torchv.kb.page.model.request.SaasKnowledgeElementIssueContext;\nimport com.torchv.kb.page.model.response.KbPageCreateInfoResp;\nimport com.torchv.kb.page.service.KbPageEventService;\nimport com.torchv.kb.page.service.KbPageTemplateService;\nimport com.torchv.kb.space.model.vo.SaasKnowledgeConfigElementAddReq;\nimport com.torchv.kb.space.service.KbSpaceUserService;\nimport com.torchv.kb.space.service.SaasKnowledgeConfigContainerService;\nimport com.torchv.kb.space.service.SaasKnowledgeConfigElementService;\nimport com.torchv.infra.vector.VectorIndexDelegate;\nimport com.torchv.infra.vector.model.UpdateReference;\nimport com.torchv.infra.vector.model.dataset.DataSetChunkInfo;\nimport com.torchv.kb.space.service.SaasKnowledgeContainerPermissionService;\nimport com.torchv.repository.chat.dto.ElementFilterSearchCondition;\nimport com.torchv.repository.chat.dto.ElementSearchCondition;\nimport com.torchv.repository.chat.entity.SaasKnowledgeContainer;\nimport com.torchv.repository.chat.entity.SaasKnowledgeElement;\nimport com.torchv.repository.chat.entity.SaasKnowledgeElementVersion;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeContainerMapper;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeElementMapper;\nimport com.torchv.repository.database.entity.BusinessColumn;\nimport com.torchv.repository.database.entity.BusinessTable;\nimport com.torchv.repository.kb.entity.SaasKnowledgeConfigContainer;\nimport com.torchv.repository.kb.entity.SaasKnowledgeConfigElement;\nimport com.torchv.repository.kb.page.dto.KbPageCreateInfo;\nimport com.torchv.repository.kb.page.dto.PageSnapshotSearchReq;\nimport com.torchv.repository.kb.page.entity.KbPageEvent;\nimport com.torchv.repository.kb.page.mapper.SaasKnowledgeElementVersionMapper;\nimport com.torchv.infra.web.i18n.I18nMessage;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.redisson.api.RLock;\nimport org.redisson.api.RedissonClient;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\nimport java.time.temporal.ChronoUnit;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n/**\n * 知识库元素模块-业务Service实现\n * @since torchv_server v0.1-beta.1\n * @author \u003ca href\u003d\"mailto:xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/01/03 11:44\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class KnowledgeElementServiceImpl extends ServiceImpl\u003cSaasKnowledgeElementMapper, SaasKnowledgeElement\u003e implements KnowledgeElementService {\n\n    final SaasKnowledgeElementMapper saasKnowledgeElementMapper;\n    final SaasKnowledgeContainerMapper saasKnowledgeContainerMapper;\n    final SaasKnowledgeElementVersionMapper saasKnowledgeElementVersionMapper;\n    final StringRedisTemplate stringRedisTemplate;\n    final MaterialService materialService;\n    final KnowledgeSimilarService knowledgeSimilarService;\n    final KnowledgeReferenceService knowledgeReferenceService;\n    final KnowledgeStorageService knowledgeStorageService;\n    final BillingSubscribeAccountService billingSubscribeAccountService;\n    final RedissonClient redissonClient;\n    final VectorIndexDelegate vectorIndexDelegate;\n    final I18nMessage i18nMessage;\n    final KnowledgeValidationService knowledgeValidationService;\n    final KnowledgeElementProcessService knowledgeElementProcessService;\n    final SaasKnowledgeConfigElementService saasKnowledgeConfigElementService;\n    final SaasKnowledgeConfigContainerService saasKnowledgeConfigContainerService;\n    final UserService userService;\n    final SaasKnowledgeContainerPermissionService saasKnowledgeContainerPermissionService;\n    final KnowledgeElementVersionService knowledgeElementVersionService;\n    final KbPageTemplateService kbPageTemplateService;\n    final KnowledgeElementTrendService saasKnowledgeElementTrendService;\n    final KbSpaceUserService kbSpaceUserService;\n    final KnowledgeContainerCapacityDataService knowledgeContainerCapacityDataService;\n    final KnowledgeElementDataService knowledgeElementDataService;\n    final KnowledgeElementEmbeddingQueryService knowledgeElementEmbeddingQueryService;\n    final KbPageEventService kbPageEventService;\n    final KbDepartmentUserService kbDepartmentUserService;\n    final KnowledgeContainerQueryService knowledgeContainerQueryService;\n\n    final MD5 md5 \u003d MD5.create();\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e importWebs(KnowledgeElementBatchWebReq webReq) {\n        log.info(\"批量导入web集合\");\n        webReq.validateWebUrl();\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 校验知识库文件\n        knowledgeValidationService.validateFileBase(webReq, sysUserInfo.getTenantId());\n        // 每个网页按1KB计算\n        long totalSpace \u003d webReq.getUrls().size() * 1024L;\n        // 校验上传流量空间\n        Assert.isTrue(billingSubscribeAccountService.validateAvailableStorage(sysUserInfo.getTenantId(), totalSpace), \"knowledge.preview.upload.limit\");\n        List\u003cSaasKnowledgeElement\u003e saasKnowledgeElements \u003d webReq.of(sysUserInfo);\n        return this.lockBatchFile(saasKnowledgeElements, sysUserInfo.getTenantId(), totalSpace, new ArrayList\u003c\u003e(), webReq.getContainerId());\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e importFiles(KnowledgeElementBatchFileReq batchFileReq, MultipartFile[] multipartFiles) {\n        Assert.notEmpty(multipartFiles, \"system.common.request.invalid\");\n        log.info(\"批量导入paas层接口文件，数量:{}\", multipartFiles.length);\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 校验知识库文件\n        knowledgeValidationService.validateFileBase(batchFileReq, sysUserInfo.getTenantId());\n        FileValidationResult fileValidationResult \u003d knowledgeValidationService.files(multipartFiles);\n        // 总流量\n        long totalSpace \u003d fileValidationResult.getTotalSpace().get();\n        // 校验上传流量空间\n        Assert.isTrue(billingSubscribeAccountService.validateAvailableStorage(sysUserInfo.getTenantId(), totalSpace), \"knowledge.preview.upload.limit\");\n        List\u003cSaasKnowledgeElement\u003e saasKnowledgeElements \u003d new ArrayList\u003c\u003e();\n        for (MultipartFile file : multipartFiles) {\n            FileMetadata fileMetadata \u003d fileValidationResult.fileMeta(file);\n            // 上传\n            MaterialInfoResp material \u003d materialService.save(file, fileMetadata.getMd5(), sysUserInfo.getTenantId());\n            saasKnowledgeElements.add(batchFileReq.of(file, sysUserInfo, fileValidationResult, material.getFileUrl()));\n        }\n        return this.lockBatchFile(saasKnowledgeElements, sysUserInfo.getTenantId(), totalSpace, new ArrayList\u003c\u003e(), batchFileReq.getContainerId());\n    }\n\n    @Override\n    public Result\u003cString\u003e getElementContent(Integer id) {\n        Assert.notNull(id, \"system.common.request.invalid\");\n        SaasKnowledgeElement element \u003d saasKnowledgeElementMapper.selectById(id);\n        Assert.notNull(element, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equals(element.getTenantId(), UserContextHolder.getTenantId()), \"system.common.request.invalid\");\n        return Result.data(vectorIndexDelegate.getContent(element.getTenantId(), element.getCode(), element.getContainerId()));\n    }\n\n    @Override\n    public Long countContainerSize(String tenantId, String containerId) {\n        log.info(\"统计知识库容量大小，tenant:{},containerId:{}\", tenantId, containerId);\n        return saasKnowledgeElementMapper.sumContainerSize(tenantId, containerId);\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public void addKnowledge(BusinessTable table, List\u003cBusinessColumn\u003e columns, SysUserInfo sysUserInfo, String containerId) {\n        // 将当前的表格信息+字段列表信息，全部保存成txt文本，方便后续向量化处理\n        String tableContent \u003d SQLUtils.toTxt(table, columns);\n        // 插入一条知识文件信息，类型是Table\n        SaasKnowledgeElement element \u003d new SaasKnowledgeElement();\n        File tableFile \u003d null;\n        try {\n            tableFile \u003d File.createTempFile(\"table_source\", \".txt\");\n            FileUtil.writeString(tableContent, tableFile, StandardCharsets.UTF_8);\n            // 上传文件\n            String md5_str \u003d MD5.create().digestHex16(tableContent);\n            MaterialInfoResp materialInfoResp \u003d materialService.save(tableFile, md5_str, sysUserInfo.getTenantId());\n            // 上传成功\n            String ossUrl \u003d materialInfoResp.getFileUrl();\n            element.setNeverExpire(DocTimeStatus.NEVER_EXPIRE.getCode());\n            element.setContainerId(table.getContainerId());\n            element.setElePreviewUrl(ossUrl);\n            element.setEleUrl(ossUrl);\n            element.setTenantId(sysUserInfo.getTenantId());\n            element.setEleSuffix(\"txt\");\n            element.setEleName(table.getName());\n            element.setEleMd5(md5_str);\n            element.setEleSize(FileUtil.size(tableFile));\n            // 没有预览功能，该值为空\n            element.setEleTokenSize(0L);\n            element.setCreateTime(LocalDateTime.now());\n            element.setCreator(Objects.toString(sysUserInfo.getId()));\n            element.setModifierTime(LocalDateTime.now());\n            element.setModifier(Objects.toString(sysUserInfo.getId()));\n            element.setProcessStatus(ProcessStatusEnum.INIT.getCode());\n            element.setParentCode(\"0\");\n            // 关联表信息的code\n            element.setCode(table.getCode());\n            element.setPageCount(1);\n            element.setProcessCount(0);\n            element.setYear(0);\n            element.setCategory(KnowledgeElementCategory.TABLE.name());\n            element.setTopic(\"DEFAULT\");\n            element.setChunkCount(0);\n            // 批量导入文本信息\n            this.lockBatchFile(CollUtil.newArrayList(element), sysUserInfo.getTenantId(), element.getEleSize(), new ArrayList\u003c\u003e(), containerId);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            FileUtil.del(tableFile);\n        }\n    }\n\n    @Override\n    public Pagination\u003cSaasKnowledgeElement\u003e listChunkFiles(Integer page, Integer size) {\n        // 日期是1年内的文件\n        //LocalDateTime minTime \u003d LocalDateTime.now().minusDays(360L);\n        // 查询待初始化、转换成功的文件列表\n        LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class)\n                .in(SaasKnowledgeElement::getProcessStatus, CollUtil.newArrayList(ProcessStatusEnum.INIT.getCode(), ProcessStatusEnum.CONVERT_SUCCESS.getCode()))\n                .ne(SaasKnowledgeElement::getCategory, KnowledgeElementCategory.DIRECTORY.getName());\n                //.gt(SaasKnowledgeElement::getCreateTime, minTime);\n        try (Page\u003cSaasKnowledgeElement\u003e saasKnowledgeElementPageNo \u003d PageHelper.startPage(page, size)) {\n            List\u003cSaasKnowledgeElement\u003e knowledgeElements \u003d saasKnowledgeElementMapper.selectList(lambdaQueryWrapper);\n            return Pagination.pagination(knowledgeElements, saasKnowledgeElementPageNo.getTotal(), page, size);\n        }\n    }\n\n    @Override\n    public Pagination\u003cSaasKnowledgeElement\u003e listChunkFiles(Integer page, Integer size, ProcessStatusEnum statusEnum) {\n        // 查询待初始化的文件列表\n        LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getProcessStatus, statusEnum.getCode())\n                .ne(SaasKnowledgeElement::getCategory, KnowledgeElementCategory.DIRECTORY.getName());\n        try (Page\u003cSaasKnowledgeElement\u003e saasKnowledgeElementPageNo \u003d PageHelper.startPage(page, size)) {\n            List\u003cSaasKnowledgeElement\u003e knowledgeElements \u003d saasKnowledgeElementMapper.selectList(lambdaQueryWrapper);\n            return Pagination.pagination(knowledgeElements, saasKnowledgeElementPageNo.getTotal(), page, size);\n        }\n    }\n\n    @Override\n    public void callback(DataSetChunkCallbackReq callbackReq) {\n        // 判断process类型\n        if (callbackReq.getBasic() \u003d\u003d null) {\n            return;\n        }\n        try {\n            LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, callbackReq.getBasic().getTenantId())\n                    .eq(SaasKnowledgeElement::getContainerId, callbackReq.getBasic().getContainerId())\n                    .eq(SaasKnowledgeElement::getCode, callbackReq.getBasic().getDataId());\n            SaasKnowledgeElement knowledgeElement \u003d new SaasKnowledgeElement();\n            knowledgeElement.setModifierTime(LocalDateTime.now());\n            knowledgeElement.setProcessCount(callbackReq.getProcessPage());\n            knowledgeElement.setPageCount(callbackReq.getTotalPage());\n            knowledgeElement.setChunkCount(callbackReq.getChunkCounter());\n            if (StrUtil.isNotBlank(callbackReq.getMessage())) {\n                knowledgeElement.setErrorMessage(callbackReq.getMessage());\n            }\n            ProcessStatusEnum processStatusEnum \u003d ProcessStatusEnum.parseByName(callbackReq.getProcessStatus());\n            if (processStatusEnum !\u003d null) {\n                knowledgeElement.setProcessStatus(processStatusEnum.getCode());\n            }\n            saasKnowledgeElementMapper.update(knowledgeElement, lambdaQueryWrapper);\n        } catch (Exception e) {\n            log.error(e.getMessage());\n        }\n    }\n\n    @Override\n    public DataSetChunkSubmitModel buildChunkParams(SaasKnowledgeElement knowledgeElement, String callbackUrl) {\n        // 定时任务只处理文件类型和网页类型\n        Assert.isTrue(StrUtil.equalsIgnoreCase(knowledgeElement.getCategory(), KnowledgeElementCategory.FILE.getName())\n                || StrUtil.equalsIgnoreCase(knowledgeElement.getCategory(), KnowledgeElementCategory.WEB.getName())\n                || StrUtil.equalsIgnoreCase(knowledgeElement.getCategory(), KnowledgeElementCategory.VIRTUAL_FILE.getName()), \"system.common.request.invalid\");\n        DataSetChunkSubmitModel submitModel \u003d new DataSetChunkSubmitModel();\n        submitModel.setCallbackUrl(callbackUrl);\n        submitModel.setOssUrl(knowledgeElement.getEleUrl());\n        submitModel.setDataId(knowledgeElement.getCode());\n        submitModel.setTenantId(knowledgeElement.getTenantId());\n        submitModel.setTimeStatus(knowledgeElement.getNeverExpire());\n        if (knowledgeElement.getStartTime() !\u003d null \u0026\u0026 knowledgeElement.getEndTime() !\u003d null) {\n            submitModel.setStartTime(knowledgeElement.getStartTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\n            submitModel.setEndTime(knowledgeElement.getEndTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\n        }\n        submitModel.setYear(knowledgeElement.getYear());\n        submitModel.setFileName(knowledgeElement.getEleName());\n        submitModel.setFileType(knowledgeElement.getEleSuffix());\n        submitModel.setContainerId(knowledgeElement.getContainerId());\n        // 判断是否为网页\n        if (StrUtil.equalsIgnoreCase(knowledgeElement.getCategory(), KnowledgeElementCategory.WEB.getName())) {\n            Optional\u003cDataSetWebConfig\u003e webConfig \u003d GsonUtils.fromJson(knowledgeElement.getConfig(), DataSetWebConfig.class);\n            webConfig.ifPresent(submitModel::apply);\n            // webConfig.ifPresent(w -\u003e submitModel.setSelector(w.getSelector()));\n        }\n        // 租户配置,embedding模型\n        // SaasTenantInfoCacheResp cacheResp \u003d tenantInfoService.getByCode(knowledgeElement.getTenantId());\n\n        Optional\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeConfigContainer \u003d saasKnowledgeConfigContainerService.queryInfoByContainerId(knowledgeElement.getContainerId());\n        if (saasKnowledgeConfigContainer.isPresent()) {\n            submitModel.setEmbedding(saasKnowledgeConfigContainer.get().getEmbeddingModel());\n        } else {\n            log.error(\"containerId:{} not found\", knowledgeElement.getContainerId());\n            throw new BizException(ErrorCodeEnum.SYSTEM_ERROR);\n        }\n\n        return submitModel;\n    }\n\n    @Override\n    public void updateElementStatus(SaasKnowledgeElement knowledgeElement, ProcessStatusEnum processStatusEnum) {\n        SaasKnowledgeElement element \u003d new SaasKnowledgeElement();\n        element.setId(knowledgeElement.getId());\n        element.setModifierTime(LocalDateTime.now());\n        element.setProcessStatus(processStatusEnum.getCode());\n        saasKnowledgeElementMapper.updateById(element);\n    }\n\n    @Override\n    public void updateConvert(MessageFileConvertReq convertReq, KnowledgeFileConvertResult convertResult) {\n        SaasKnowledgeElement element \u003d new SaasKnowledgeElement();\n        element.setId(convertReq.getDataId());\n        element.setModifierTime(LocalDateTime.now());\n        if (convertResult.getStatusEnum() \u003d\u003d ProcessStatusEnum.CONVERT_SUCCESS) {\n            // 转换成功，才更新相关信息\n            element.setEleUrl(convertResult.getOssUrl());\n            element.setEleSuffix(convertResult.getTargetFormat());\n            // preview地址设置为老的地址\n            element.setElePreviewUrl(convertReq.getOssUrl());\n            element.setProcessStatus(convertResult.getStatusEnum().getCode());\n        } else if (convertResult.getStatusEnum() \u003d\u003d ProcessStatusEnum.PROCESSING) {\n            // Process的状态，代表提交处理成功，此时，不更新processStatus的状态\n            // 转换成功，才更新相关信息\n            element.setEleUrl(convertResult.getOssUrl());\n            element.setEleSuffix(convertResult.getTargetFormat());\n            // preview地址设置为老的地址\n            element.setElePreviewUrl(convertReq.getOssUrl());\n        } else {\n            // 其它状态，可能是失败等状态信息\n            element.setProcessStatus(convertResult.getStatusEnum().getCode());\n        }\n        LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d\n                Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getId, convertReq.getDataId()).eq(SaasKnowledgeElement::getTenantId, convertReq.getTenantId());\n        saasKnowledgeElementMapper.update(element, lambdaQueryWrapper);\n    }\n\n    /**\n     * 分页查询-知识库元素列表数据\n     * @param knowledgeElementQueryReq 查询条件Vo\n     * @param pageNo 当前页码\n     * @param pageSize 每页页码大小\n     * @return 知识库元素列表\n     */\n    @Override\n    public Pagination\u003cKnowledgeElementResp\u003e list(KnowledgeElementQueryReq knowledgeElementQueryReq, Integer pageNo, Integer pageSize) {\n        if (StrUtil.isNotBlank(knowledgeElementQueryReq.getPageCode())){\n            return listWithPath(knowledgeElementQueryReq, pageNo, pageSize);\n        }\n        log.info(\"分页查询知识库元素列表,pageNo:{},pageSize:{}\", pageNo, pageSize);\n        log.info(\"分页QueryReq:{}\", knowledgeElementQueryReq.toString());\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 查询全部列表的\n        DepartmentUserOrgPermissions orgPermissions\u003dkbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n\n        LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, sysUserInfo.getTenantId());\n        // 查询条件\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeElementQueryReq.getContainerId()), SaasKnowledgeElement::getContainerId, knowledgeElementQueryReq.getContainerId());\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeElementQueryReq.getParentCode()), SaasKnowledgeElement::getParentCode, knowledgeElementQueryReq.getParentCode());\n        if (StrUtil.isNotBlank(knowledgeElementQueryReq.getCategory())) {\n            List\u003cString\u003e category \u003d StrUtil.split(knowledgeElementQueryReq.getCategory(), StrUtil.COMMA);\n            lambdaQueryWrapper.in(SaasKnowledgeElement::getCategory, category);\n        }\n        lambdaQueryWrapper.like(StrUtil.isNotBlank(knowledgeElementQueryReq.getEleName()), SaasKnowledgeElement::getEleName, knowledgeElementQueryReq.getEleName());\n        // 草稿状态只能自己可见\n        lambdaQueryWrapper.and(l-\u003e{\n            l.ne(SaasKnowledgeElement::getProcessStatus,ProcessStatusEnum.DRAFT.getCode()).or(lf-\u003e{\n                lf.eq(SaasKnowledgeElement::getProcessStatus,ProcessStatusEnum.DRAFT.getCode());\n                lf.eq(SaasKnowledgeElement::getCreator, Objects.toString(sysUserInfo.getCode()));\n            });\n        });\n        // 过滤权限，因为parentCode不为空，那么查询出当前用户不可见的文档编码，然后在进行过滤\n        ElementSearchCondition searchCondition\u003dElementSearchCondition.from(sysUserInfo.getTenantId(),knowledgeElementQueryReq.getContainerId(),knowledgeElementQueryReq.getParentCode(),orgPermissions.permissionCodesToList());\n        List\u003cString\u003e visibleCodes \u003d saasKnowledgeElementMapper.listVisibleCodes(searchCondition);\n        if (CollUtil.isNotEmpty(visibleCodes)){\n            // 继承的权限文档全部可见，然后可见的文档也可见\n            log.info(\"过滤掉不可见的权限code列表，size:{}\",visibleCodes.size());\n            lambdaQueryWrapper.and(lf-\u003e lf.eq(SaasKnowledgeElement::getPermissionStatus,ToggleStatusEnum.YES.getCode()).or(l1-\u003e{\n                l1.eq(SaasKnowledgeElement::getPermissionStatus,ToggleStatusEnum.NO.getCode());\n                l1.in(SaasKnowledgeElement::getCode,visibleCodes);\n            }));\n\n            ///lambdaQueryWrapper.notIn(SaasKnowledgeElement::getCode,notVisibleCodes);\n        }else{\n            // 没有任何可见的文档\n            log.info(\"没有权限，查询继承下来的文档\");\n            lambdaQueryWrapper.eq(SaasKnowledgeElement::getPermissionStatus,ToggleStatusEnum.YES.getCode());\n        }\n        // 设定排序规则\n        SortRules sortRule\u003d SortRules.parse(knowledgeElementQueryReq.getSortRule());\n        if (sortRule\u003d\u003dSortRules.SORT_NUMBER){\n            lambdaQueryWrapper.orderByAsc(SaasKnowledgeElement::getSort);\n        }else if (sortRule\u003d\u003dSortRules.SORT_CREATE_TIME){\n            // 判断倒序还是顺序\n            if (knowledgeElementQueryReq.getSortType()\u003d\u003d0){\n                lambdaQueryWrapper.orderByAsc(SaasKnowledgeElement::getCreateTime);\n            }else{\n                lambdaQueryWrapper.orderByDesc(SaasKnowledgeElement::getCreateTime);\n            }\n        }else if (sortRule\u003d\u003dSortRules.SORT_MODIFY_TIME) {\n            // 判断倒序还是顺序\n            if (knowledgeElementQueryReq.getSortType() \u003d\u003d 0) {\n                lambdaQueryWrapper.orderByAsc(SaasKnowledgeElement::getModifierTime);\n            } else {\n                lambdaQueryWrapper.orderByDesc(SaasKnowledgeElement::getModifierTime);\n            }\n        }else if (sortRule\u003d\u003dSortRules.SORT_TITLE) {\n            // 对于文件名排序，不在数据库层排序，而在内存中进行自定义排序\n            // 这样可以支持按数字前缀排序的需求\n        }\n\n        List\u003cSaasKnowledgeElement\u003e saasKnowledgeElementInfos;\n        List\u003cKnowledgeElementResp\u003e knowledgeElementRespInfos;\n        long count;\n\n        if (sortRule \u003d\u003d SortRules.SORT_TITLE) {\n            // 文件名排序需要在内存中进行，所以先查询所有数据\n            saasKnowledgeElementInfos \u003d saasKnowledgeElementMapper.selectList(lambdaQueryWrapper);\n            count \u003d saasKnowledgeElementInfos.size();\n\n            // 按照文件名进行自定义排序（支持数字前缀排序）\n            saasKnowledgeElementInfos.sort((a, b) -\u003e compareFileName(a.getEleName(), b.getEleName(), knowledgeElementQueryReq.getSortType()));\n\n            // 手动分页\n            int startIndex \u003d (pageNo - 1) * pageSize;\n            int endIndex \u003d Math.min(startIndex + pageSize, saasKnowledgeElementInfos.size());\n            if (startIndex \u003c saasKnowledgeElementInfos.size()) {\n                saasKnowledgeElementInfos \u003d saasKnowledgeElementInfos.subList(startIndex, endIndex);\n            } else {\n                saasKnowledgeElementInfos \u003d new ArrayList\u003c\u003e();\n            }\n\n            knowledgeElementRespInfos \u003d new ArrayList\u003c\u003e();\n        } else {\n            // 其他排序规则使用数据库分页\n            try (Page\u003cSaasKnowledgeElement\u003e saasKnowledgeElementPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                saasKnowledgeElementInfos \u003d saasKnowledgeElementMapper.selectList(lambdaQueryWrapper);\n                knowledgeElementRespInfos \u003d new ArrayList\u003c\u003e();\n                count \u003d saasKnowledgeElementPageNo.getTotal();\n            }\n        }\n        if (CollectionUtil.isNotEmpty(saasKnowledgeElementInfos)) {\n            knowledgeElementRespInfos.addAll(saasKnowledgeElementInfos.stream().map(new SaasKnowledgeElementApplyFunction()).toList());\n            // 批量填充creatorName和modifierName\n            Set\u003cString\u003e userCodes \u003d new HashSet\u003c\u003e();\n            for (KnowledgeElementResp resp : knowledgeElementRespInfos) {\n                userCodes.addAll(resp.userCodes());\n            }\n            if (!userCodes.isEmpty()) {\n                Map\u003cString, String\u003e userMap \u003d userService.selectByCode(new ArrayList\u003c\u003e(userCodes));\n                for (KnowledgeElementResp resp : knowledgeElementRespInfos) {\n                    resp.applyUserName(userMap);\n                }\n            }\n        }\n        return Pagination.pagination(knowledgeElementRespInfos, count, pageNo, pageSize);\n    }\n\n    private Pagination\u003cKnowledgeElementResp\u003e listWithPath(KnowledgeElementQueryReq knowledgeElementQueryReq, Integer pageNo, Integer pageSize) {\n        log.info(\"分页查询知识库元素列表,pageNo:{},pageSize:{}\", pageNo, pageSize);\n        log.info(\"分页QueryReq:{}\", knowledgeElementQueryReq.toString());\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        SaasKnowledgeElement saasKnowledgeElementNode \u003d saasKnowledgeElementMapper.selectOne(Wrappers.lambdaQuery(SaasKnowledgeElement.class).select(SaasKnowledgeElement::getParentCode, SaasKnowledgeElement::getCode).eq(SaasKnowledgeElement::getTenantId, sysUserInfo.getTenantId()).eq(SaasKnowledgeElement::getCode, knowledgeElementQueryReq.getPageCode()));\n        if(saasKnowledgeElementNode \u003d\u003d null){\n            log.info(\"没有找到对应的知识库元素\");\n            return Pagination.empty(pageNo, pageSize);\n        }\n        String permissionType \u003d saasKnowledgeContainerPermissionService.getHighestPermission(knowledgeElementQueryReq.getContainerId(),sysUserInfo);\n        log.info(\"当前用户在容器中的最高权限:{}\",permissionType);\n        // 如果是没权限的角色，那么需要判断当前的知识库是否设置为公开，如果是公开的情况下，那么给予只读角色\n        Optional\u003cSaasKnowledgeContainer\u003e containerOptional \u003d knowledgeContainerQueryService.queryInfoByCode(knowledgeElementQueryReq.getContainerId());\n        if (containerOptional.isEmpty()) {\n            return Pagination.empty(pageNo, pageSize);\n        }\n        boolean canFilter\u003dtrue;\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d containerOptional.get();\n        if ( KbKnowledgeBaseContainerVisibilityRange.publicRead(saasKnowledgeContainer.getVisibilityRange())){\n            // 公开可读\n            canFilter\u003dfalse;\n        }else{\n            // 非公开可读，那么必须有权限才可以查看\n            if (!StrUtil.equalsIgnoreCase(KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode(),permissionType)){\n                // 公开可读\n                canFilter\u003dfalse;\n            }\n        }\n        String parentCode \u003d saasKnowledgeElementNode.getParentCode();\n        // 查询全部列表的\n        DepartmentUserOrgPermissions orgPermissions\u003dkbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n        List\u003cKnowledgeElementResp\u003e respInfos \u003d new ArrayList\u003c\u003e();\n        while(StrUtil.isNotBlank(parentCode)) {\n            LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, sysUserInfo.getTenantId());\n            // 查询条件\n            lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeElementQueryReq.getContainerId()), SaasKnowledgeElement::getContainerId, knowledgeElementQueryReq.getContainerId());\n            lambdaQueryWrapper.eq(StrUtil.isNotBlank(parentCode), SaasKnowledgeElement::getParentCode, parentCode);\n            if (StrUtil.isNotBlank(knowledgeElementQueryReq.getCategory())) {\n                List\u003cString\u003e category \u003d StrUtil.split(knowledgeElementQueryReq.getCategory(), StrUtil.COMMA);\n                lambdaQueryWrapper.in(SaasKnowledgeElement::getCategory, category);\n            }\n            lambdaQueryWrapper.like(StrUtil.isNotBlank(knowledgeElementQueryReq.getEleName()), SaasKnowledgeElement::getEleName, knowledgeElementQueryReq.getEleName());\n            // 草稿状态只能自己可见\n            lambdaQueryWrapper.and(l-\u003e{\n                l.ne(SaasKnowledgeElement::getProcessStatus,ProcessStatusEnum.DRAFT.getCode()).or(lf-\u003e{\n                    lf.eq(SaasKnowledgeElement::getProcessStatus,ProcessStatusEnum.DRAFT.getCode());\n                    lf.eq(SaasKnowledgeElement::getCreator, Objects.toString(sysUserInfo.getCode()));\n                });\n            });\n            // 过滤权限，因为parentCode不为空，那么查询出当前用户不可见的文档编码，然后在进行过滤\n            ElementSearchCondition searchCondition\u003dElementSearchCondition.from(sysUserInfo.getTenantId(),knowledgeElementQueryReq.getContainerId(),parentCode,orgPermissions.permissionCodesToList());\n            List\u003cString\u003e visibleCodes \u003d saasKnowledgeElementMapper.listVisibleCodes(searchCondition);\n            if (CollUtil.isNotEmpty(visibleCodes)){\n                // 继承的权限文档全部可见，然后可见的文档也可见\n                log.info(\"过滤掉不可见的权限code列表，size:{}\",visibleCodes.size());\n                lambdaQueryWrapper.and(lf-\u003e lf.eq(SaasKnowledgeElement::getPermissionStatus,ToggleStatusEnum.YES.getCode()).or(l1-\u003e{\n                    l1.eq(SaasKnowledgeElement::getPermissionStatus,ToggleStatusEnum.NO.getCode());\n                    l1.in(SaasKnowledgeElement::getCode,visibleCodes);\n                }));\n\n                ///lambdaQueryWrapper.notIn(SaasKnowledgeElement::getCode,notVisibleCodes);\n            }else{\n                // 没有任何可见的文档\n                log.info(\"没有权限，查询继承下来的文档\");\n                lambdaQueryWrapper.eq(SaasKnowledgeElement::getPermissionStatus,ToggleStatusEnum.YES.getCode());\n            }\n            // 设定排序规则\n            SortRules sortRule\u003d SortRules.parse(knowledgeElementQueryReq.getSortRule());\n            if (sortRule\u003d\u003dSortRules.SORT_NUMBER){\n                lambdaQueryWrapper.orderByAsc(SaasKnowledgeElement::getSort);\n            }else if (sortRule\u003d\u003dSortRules.SORT_CREATE_TIME){\n                // 判断倒序还是顺序\n                if (knowledgeElementQueryReq.getSortType()\u003d\u003d0){\n                    lambdaQueryWrapper.orderByAsc(SaasKnowledgeElement::getCreateTime);\n                }else{\n                    lambdaQueryWrapper.orderByDesc(SaasKnowledgeElement::getCreateTime);\n                }\n            }else if (sortRule\u003d\u003dSortRules.SORT_MODIFY_TIME) {\n                // 判断倒序还是顺序\n                if (knowledgeElementQueryReq.getSortType() \u003d\u003d 0) {\n                    lambdaQueryWrapper.orderByAsc(SaasKnowledgeElement::getModifierTime);\n                } else {\n                    lambdaQueryWrapper.orderByDesc(SaasKnowledgeElement::getModifierTime);\n                }\n            }else if (sortRule\u003d\u003dSortRules.SORT_TITLE) {\n                // 对于文件名排序，不在数据库层排序，而在内存中进行自定义排序\n                // 这样可以支持按数字前缀排序的需求\n            }\n\n            List\u003cSaasKnowledgeElement\u003e saasKnowledgeElementInfos;\n            List\u003cKnowledgeElementResp\u003e knowledgeElementRespInfos;\n\n            if (sortRule \u003d\u003d SortRules.SORT_TITLE) {\n                // 文件名排序需要在内存中进行，所以先查询所有数据\n                saasKnowledgeElementInfos \u003d saasKnowledgeElementMapper.selectList(lambdaQueryWrapper);\n\n                // 按照文件名进行自定义排序（支持数字前缀排序）\n                saasKnowledgeElementInfos.sort((a, b) -\u003e compareFileName(a.getEleName(), b.getEleName(), knowledgeElementQueryReq.getSortType()));\n\n                // 手动分页\n                int startIndex \u003d (pageNo - 1) * pageSize;\n                int endIndex \u003d Math.min(startIndex + pageSize, saasKnowledgeElementInfos.size());\n                if (startIndex \u003c saasKnowledgeElementInfos.size()) {\n                    saasKnowledgeElementInfos \u003d saasKnowledgeElementInfos.subList(startIndex, endIndex);\n                } else {\n                    saasKnowledgeElementInfos \u003d new ArrayList\u003c\u003e();\n                }\n\n                knowledgeElementRespInfos \u003d new ArrayList\u003c\u003e();\n            } else {\n                // 其他排序规则使用数据库分页\n                try (Page\u003cSaasKnowledgeElement\u003e saasKnowledgeElementPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                    saasKnowledgeElementInfos \u003d saasKnowledgeElementMapper.selectList(lambdaQueryWrapper);\n                    knowledgeElementRespInfos \u003d new ArrayList\u003c\u003e();\n                }\n            }\n            if (CollectionUtil.isNotEmpty(saasKnowledgeElementInfos)) {\n                if (canFilter){\n                    // 说明要做过滤，这判断你这个人是否可以看\n                    // 过滤权限，因为parentCode不为空，那么查询出当前用户不可见的文档编码，然后在进行过滤\n                    List\u003cString\u003e elementCodes\u003dsaasKnowledgeElementInfos.stream().map(SaasKnowledgeElement::getCode).toList();\n                    ElementFilterSearchCondition searchFilterCondition\u003d ElementFilterSearchCondition.from(sysUserInfo.getTenantId(),knowledgeElementQueryReq.getContainerId(),elementCodes,orgPermissions.permissionCodesToList());\n                    List\u003cString\u003e visibleFilterCodes \u003d saasKnowledgeElementMapper.listVisibleFilterCodes(searchFilterCondition);\n                    if (CollUtil.isNotEmpty(visibleFilterCodes)){\n                        knowledgeElementRespInfos.addAll(saasKnowledgeElementInfos.stream().filter(s-\u003evisibleFilterCodes.contains(s.getCode())).map(new SaasKnowledgeElementApplyFunction()).toList());\n                    }\n                }else{\n                    knowledgeElementRespInfos.addAll(saasKnowledgeElementInfos.stream().map(new SaasKnowledgeElementApplyFunction()).toList());\n                }\n                // 批量填充creatorName和modifierName\n                Set\u003cString\u003e userCodes \u003d new HashSet\u003c\u003e();\n                for (KnowledgeElementResp resp : knowledgeElementRespInfos) {\n                    userCodes.addAll(resp.userCodes());\n                }\n                if (!userCodes.isEmpty()) {\n                    Map\u003cString, String\u003e userMap \u003d userService.selectByCode(new ArrayList\u003c\u003e(userCodes));\n                    for (KnowledgeElementResp resp : knowledgeElementRespInfos) {\n                        resp.applyUserName(userMap);\n                    }\n                }\n            }\n            if (CollUtil.isNotEmpty(respInfos)){\n                String parentCode1 \u003d respInfos.get(0).getParentCode();\n                for (KnowledgeElementResp info : knowledgeElementRespInfos){\n                    if (StrUtil.equals(info.getCode(), parentCode1)){\n                        info.setChildrens(respInfos);\n                        break;\n                    }\n                }\n            }\n            if (CollUtil.isNotEmpty(knowledgeElementRespInfos)){\n                respInfos\u003dknowledgeElementRespInfos;\n            }\n            if (StrUtil.equalsIgnoreCase(parentCode, \"0\")){\n                break;\n            }\n            SaasKnowledgeElement saasKnowledgeElement \u003d saasKnowledgeElementMapper.selectOne(Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getCode, parentCode));\n            parentCode \u003d saasKnowledgeElement.getParentCode();\n        }\n        long totalCount \u003d respInfos.size();\n\n        return Pagination.pagination(respInfos, totalCount, pageNo, pageSize);\n    }\n\n    /**\n     * 递归获取父级名称链\n     * @param code 当前节点编码\n     * @param tenantId 租户ID\n     * @return 父级名称链\n     */\n    private String buildParentNamesRecursively(String code, String tenantId) {\n        if (StrUtil.isBlank(code) || \"0\".equals(code)) {\n            return \"\";\n        }\n\n        SaasKnowledgeElement element \u003d saasKnowledgeElementMapper.getByCodeAndTenantId(code, tenantId);\n        if (element \u003d\u003d null) {\n            return \"\";\n        }\n\n        String currentName \u003d element.getCode() + \"#\" + element.getEleName();\n        String parentCode \u003d element.getParentCode();\n\n        if (StrUtil.isBlank(parentCode) || \"0\".equals(parentCode)) {\n            return currentName;\n        }\n\n        String parentNames \u003d buildParentNamesRecursively(parentCode, tenantId);\n        if (StrUtil.isBlank(parentNames)) {\n            return currentName;\n        }\n\n        return parentNames + \",\" + currentName;\n    }\n\n    @Override\n    public Result\u003cList\u003cKnowledgeElementResp\u003e\u003e queryParentName(String code) {\n        List\u003cKnowledgeElementResp\u003e results \u003d new ArrayList\u003c\u003e();\n\n        if (StrUtil.isBlank(code) || StrUtil.equalsIgnoreCase(code, \"0\")) {\n            return Result.data(results);\n        }\n\n        // 使用新的递归方法\n        String parentNames \u003d buildParentNamesRecursively(code, UserContextHolder.getTenantId());\n\n        if (StrUtil.isNotBlank(parentNames)) {\n            List\u003cString\u003e arr \u003d StrUtil.split(parentNames, \",\");\n            for (String names : arr) {\n                if (StrUtil.isNotBlank(names)) {\n                    List\u003cString\u003e nameInfo \u003d StrUtil.split(names, \"#\");\n                    if (nameInfo.size() \u003e\u003d 2) {\n                        KnowledgeElementResp resp \u003d new KnowledgeElementResp();\n                        resp.setCode(nameInfo.get(0));\n                        resp.setEleName(nameInfo.get(1));\n                        results.add(resp);\n                    }\n                }\n            }\n        }\n\n        return Result.data(results);\n    }\n\n    /**\n    * 查询所有知识库元素数据\n    */\n    @Override\n    public List\u003cKnowledgeElementResp\u003e listAll() {\n        log.info(\"查询所有知识库元素数据\");\n        List\u003cSaasKnowledgeElement\u003e saasKnowledgeElementInfos \u003d saasKnowledgeElementMapper.selectList(Wrappers.query());\n        List\u003cKnowledgeElementResp\u003e knowledgeElementRespInfos \u003d new ArrayList\u003c\u003e();\n        if (CollectionUtil.isNotEmpty(saasKnowledgeElementInfos)) {\n            knowledgeElementRespInfos.addAll(saasKnowledgeElementInfos.stream().map(new SaasKnowledgeElementApplyFunction()).toList());\n        }\n        return knowledgeElementRespInfos;\n    }\n\n    /**\n     * 查询所有知识库元素列表\n     * @param knowledgeElementQueryReq 查询条件Vo\n     * @return 所有知识库元素列表\n     */\n    @Override\n    public Result\u003cList\u003cKnowledgeElementResp\u003e\u003e listAll(KnowledgeElementQueryReq knowledgeElementQueryReq) {\n        log.info(\"根据条件查询所有知识库元素列表\");\n        log.info(\"QueryReq:{}\", knowledgeElementQueryReq.toString());\n        SaasKnowledgeElement queryModel \u003d new SaasKnowledgeElement();\n        BeanUtils.copyProperties(knowledgeElementQueryReq, queryModel);\n        QueryWrapper\u003cSaasKnowledgeElement\u003e queryWrapper \u003d Wrappers.query(queryModel);\n        List\u003cSaasKnowledgeElement\u003e saasKnowledgeElementInfos \u003d saasKnowledgeElementMapper.selectList(queryWrapper);\n        List\u003cKnowledgeElementResp\u003e knowledgeElementRespInfos \u003d new ArrayList\u003c\u003e();\n        if (CollectionUtil.isNotEmpty(saasKnowledgeElementInfos)) {\n            knowledgeElementRespInfos.addAll(saasKnowledgeElementInfos.stream().map(new SaasKnowledgeElementApplyFunction()).toList());\n        }\n        return Result.data(knowledgeElementRespInfos);\n    }\n\n    /**\n     * 批量新增文件\n     * @param saasKnowledgeElements 知识库元素列表\n     * @param tenantId 租户\n     * @param fileSpace 文件占用空间\n     * @param cacheKeys 缓存keys\n     * @return 是否新增成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    protected Result\u003cString\u003e lockBatchFile(List\u003cSaasKnowledgeElement\u003e saasKnowledgeElements, String tenantId, Long fileSpace, List\u003cString\u003e cacheKeys, String containerId) {\n        String key \u003d Cns.LOCK_KNOWLEDGE_KEY + tenantId;\n        RLock rLock \u003d redissonClient.getLock(key);\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        try {\n            // 校验知识库空间大小\n            // /kl/api/saas/element/addFiles\n            knowledgeContainerCapacityDataService.validateContainerCapacity(saasKnowledgeElements.get(0).getContainerId(),fileSpace);\n            if (rLock.tryLock(10, 10, TimeUnit.SECONDS)) {\n                boolean ret \u003d this.saveBatch(saasKnowledgeElements);\n                if (ret) {\n                    boolean result \u003d knowledgeStorageService.addStorages(saasKnowledgeElements.stream().map(KnowledgeStorageRecord::uploadFile).collect(Collectors.toList()));\n                    Assert.isTrue(result, \"knowledge.dataset.file.validation.expireFile\");\n                    // 扣费\n                    // 上传流量账户扣费\n                    result \u003d billingSubscribeAccountService.costStorage(tenantId, fileSpace);\n                    Assert.isTrue(result, \"knowledge.dataset.file.validation.expireFile\");\n                    // 清除缓存\n                    if (CollUtil.isNotEmpty(cacheKeys)) {\n                        stringRedisTemplate.delete(cacheKeys);\n                    }\n                    // 新增文件解析配置\n                    Optional\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeConfigContainer \u003d saasKnowledgeConfigContainerService.queryInfoByContainerId(containerId);\n                    if (saasKnowledgeConfigContainer.isEmpty()) {\n                        log.error(\"未找到知识库配置信息\");\n                        return Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n                    }\n                    List\u003cSaasKnowledgeConfigElement\u003e saasKnowledgeConfigElements \u003d new ArrayList\u003c\u003e();\n                    // 构建批量动态记录请求列表\n                    List\u003cSaasKnowledgeElementTrendAddReq\u003e trendAddReqs \u003d new ArrayList\u003c\u003e();\n                    for (SaasKnowledgeElement saasKnowledgeElement : saasKnowledgeElements) {\n                        SaasKnowledgeConfigElement request \u003d SaasKnowledgeConfigElement.builder()\n                                .elementId(saasKnowledgeElement.getCode())\n                                .analysisEngine(saasKnowledgeConfigContainer.get().getAnalysisEngine())\n                                .analysisMode(saasKnowledgeConfigContainer.get().getAnalysisMode())\n                                .ocrEngine(saasKnowledgeConfigContainer.get().getOcrEngine())\n                                .multiModalityEngine(saasKnowledgeConfigContainer.get().getMultiModalityEngine())\n                                .splitMode(saasKnowledgeConfigContainer.get().getSplitMode())\n                                .maxChunkSize(saasKnowledgeConfigContainer.get().getMaxChunkSize())\n                                .overlapSize(saasKnowledgeConfigContainer.get().getOverlapSize())\n                                .maxChunkLength(saasKnowledgeConfigContainer.get().getMaxChunkLength())\n                                .splitDelimiters(saasKnowledgeConfigContainer.get().getSplitDelimiters())\n                                .imageOcr(saasKnowledgeConfigContainer.get().getImageOcr())\n                                .tenantId(saasKnowledgeConfigContainer.get().getTenantId())\n                                .sort(saasKnowledgeConfigContainer.get().getSort())\n                                .modifier(UserContextHolder.getCurrentUser().getCode())\n                                .creator(UserContextHolder.getCurrentUser().getCode())\n                                .modifierTime(LocalDateTime.now())\n                                .containerId(saasKnowledgeConfigContainer.get().getContainerId())\n                                .engineType(saasKnowledgeConfigContainer.get().getEngineType())\n                                .useOriginalContent(Cns.YES)\n                                .createTime(LocalDateTime.now())\n                                .build();\n                        FileConfig fileConfig \u003d saasKnowledgeElement.getFileConfig();\n                        if (fileConfig!\u003dnull \u0026\u0026 request!\u003dnull){\n                            // 设置分析引擎\n                            if (StrUtil.isNotBlank(fileConfig.getAnalysisEngine())) {\n                                request.setAnalysisEngine(fileConfig.getAnalysisEngine());\n                            }\n                            // 设置分析模式\n                            if (StrUtil.isNotBlank(fileConfig.getAnalysisMode())) {\n                                request.setAnalysisMode(fileConfig.getAnalysisMode());\n                            }\n                            // 设置引擎类型\n                            if (StrUtil.isNotBlank(fileConfig.getEngineType())) {\n                                request.setEngineType(fileConfig.getEngineType());\n                            }\n                            if (StrUtil.equalsIgnoreCase(EngineTypesEnum.OCR.name(),fileConfig.getEngineType())){\n                                // 设置OCR引擎\n                                if (StrUtil.isNotBlank(fileConfig.getOcrEngine())) {\n                                    request.setOcrEngine(fileConfig.getOcrEngine());\n                                }\n                            }else if (StrUtil.equalsIgnoreCase(EngineTypesEnum.VLM.name(),fileConfig.getEngineType())){\n                                // 设置多模态引擎\n                                if (StrUtil.isNotBlank(fileConfig.getMultiModalityEngine())) {\n                                    request.setMultiModalityEngine(fileConfig.getMultiModalityEngine());\n                                }\n                            }\n                        }\n                        saasKnowledgeConfigElements.add(request);\n                        // 批量更新知识库动态配置\n                        // 草稿状态不列入动态信息\n                        if (!ProcessStatusEnum.DRAFT.equals(ProcessStatusEnum.parse(saasKnowledgeElement.getProcessStatus()))) {\n                            // 获取空间动态信息\n                            SaasKnowledgeElementCacheInfo saasKnowledgeElementCacheInfo \u003d this.get(\n                                    saasKnowledgeElement.getContainerId(),\n                                    saasKnowledgeElement.getTenantId()\n                            );\n                            // 使用 UPLOAD 事件创建动态记录请求\n                            SaasKnowledgeElementTrendAddReq trendAddReq \u003d SaasKnowledgeElementTrendAddReq.of(\n                                    sysUserInfo,\n                                    saasKnowledgeElement,\n                                    SaasKnowledgeElementEvent.UPLOAD,\n                                    saasKnowledgeElementCacheInfo\n                            );\n\n                            trendAddReqs.add(trendAddReq);\n                        }\n                    }\n\n                    // 批量插入动态记录\n                    if (CollectionUtil.isNotEmpty(trendAddReqs)) {\n                        saasKnowledgeElementTrendService.messageTrendBatch(trendAddReqs);\n                        log.info(\"批量更新知识库动态配置完成，实际处理数量:{}\", trendAddReqs.size());\n                    } else {\n                        log.info(\"批量更新知识库动态配置完成，无需处理的记录\");\n                    }\n\n                    saasKnowledgeConfigElementService.saveBatch(saasKnowledgeConfigElements);\n\n                }\n                return ret ? Result.success(i18nMessage.resolveMessage(\"system.common.insert.success\")) : Result.error(i18nMessage.resolveMessage(\"knowledge.dataset.file.save.fail\"));\n            }\n        } catch (InterruptedException e) {\n            log.error(e.getMessage());\n            throw new RuntimeException(\"system.error.inner.exception\");\n        } finally {\n            // 释放分布式锁\n            if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                rLock.unlock();\n                log.info(\"free addFiles lock successful...\");\n            }\n        }\n        return Result.error(\"knowledge.dataset.file.validation.expireFile\");\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e addFiles(KnowledgeElementAddFileReq addFileReq) {\n        log.info(\"批量新增文件\");\n        SysUserInfo sysUserInfo\u003dUserContextHolder.getCurrentUser();\n        String tenantId \u003d sysUserInfo.getTenantId();\n        knowledgeValidationService.validateFileBase(addFileReq, tenantId);\n        List\u003cString\u003e cacheKeys \u003d new LinkedList\u003c\u003e();\n        List\u003cSaasKnowledgeElement\u003e saasKnowledgeElements \u003d new ArrayList\u003c\u003e();\n        // 保存成功，提交异步处理流程\n        AtomicLong storageAmount \u003d new AtomicLong(0);\n        // redis的值，避免并发问题\n        // 查询最大maxOrder\n        Integer maxOrder\u003dsaasKnowledgeElementMapper.maxOrder(tenantId, addFileReq.getContainerId(), addFileReq.getParentCode());\n\n        AtomicInteger maxOrderAtomic\u003dnew AtomicInteger(Objects.requireNonNullElse(maxOrder,0));\n        for (KnowledgeElementAddFileOneReq fileOneReq : addFileReq.getDataSets()) {\n            String cacheKey \u003d Cns.PIPELINE_CACHE_PREFIX + tenantId + \":\" + fileOneReq.getDataId();\n            cacheKeys.add(cacheKey);\n            String value \u003d stringRedisTemplate.opsForValue().get(cacheKey);\n            Assert.notBlank(value, \"knowledge.dataset.file.validation.expireFile\");\n\n            saasKnowledgeElements.addAll(fileOneReq.getElementList(addFileReq,maxOrderAtomic, tenantId, value, storageAmount,sysUserInfo));\n        }\n        // 校验上传流量空间\n        Assert.isTrue(billingSubscribeAccountService.validateAvailableStorage(tenantId, storageAmount.get()), \"knowledge.preview.upload.limit\");\n        return this.lockBatchFile(saasKnowledgeElements, tenantId, storageAmount.get(), cacheKeys, addFileReq.getContainerId());\n    }\n\n    @Override\n    public Result\u003cKnowledgeElementTreeResp\u003e addPersonalKnowledge(ChatKnowledgeUploadReq uploadReq, SysUserInfo sysUserInfo,String containerId, String knowledgeContent) {\n        // 这里页码取当前的conversationId作为唯一标识，如果已经存在的情况下，就作为新版本进行更新\n        String pageCode \u003d uploadReq.getConversationId();\n        // 创建saasKnowledgeElement对象并从请求Vo中复制属性\n        SaasKnowledgeElement saasKnowledgeElement \u003d uploadReq.build(sysUserInfo,containerId,knowledgeContent);\n        // 判断是否已经存在，如果存在，直接更新版本\n        Optional\u003cSaasKnowledgeElement\u003e existingElement \u003d this.queryByCode(pageCode,sysUserInfo.getTenantId());\n        int ret\u003d-1;\n        // 版本号\n        String pageVersionCode \u003d IdUtil.getSnowflakeNextIdStr();\n        if (existingElement.isEmpty()){\n            // 不存在，创建新的知识库元素\n            // 查询最大的Sort值\n            Integer maxOrder \u003d saasKnowledgeElementMapper.maxOrder(saasKnowledgeElement.getTenantId(), saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getParentCode());\n            Integer currentOrder \u003d Objects.requireNonNullElse(maxOrder, 0) + KbConst.MOVE_ORDER_LAST_NEXT;\n            // 设置排序\n            saasKnowledgeElement.setSort(currentOrder);\n            // 插入页面记录到数据库\n            ret \u003d saasKnowledgeElementMapper.insert(saasKnowledgeElement);\n        }else{\n            // 存在，新增版本\n            SaasKnowledgeElement existing \u003d existingElement.get();\n            SaasKnowledgeElement updateElement \u003d new SaasKnowledgeElement();\n            updateElement.setEleSize(saasKnowledgeElement.getEleSize());\n            updateElement.setId(existing.getId());\n            updateElement.setModifierTime(LocalDateTime.now());\n            updateElement.setModifier(sysUserInfo.getCode());\n            updateElement.setEleMd5(saasKnowledgeElement.getEleMd5());\n            // 更新状态，重新向量化\n            updateElement.setProcessStatus(ProcessStatusEnum.INIT.getCode());\n            ret\u003dsaasKnowledgeElementMapper.updateById(updateElement);\n        }\n        if (ret \u003e 0) {\n            // 插入版本信息\n            knowledgeElementVersionService.add(pageVersionCode, saasKnowledgeElement, new ArrayList\u003c\u003e(), sysUserInfo, KnowledgeElementVersionStatus.ISSUED);\n            // 插入文件解析配置\n            Optional\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeConfigContainer \u003d saasKnowledgeConfigContainerService.queryInfoByContainerId(saasKnowledgeElement.getContainerId());\n            if (saasKnowledgeConfigContainer.isEmpty()) {\n                log.error(\"未找到知识库配置信息\");\n                return Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n            }\n            SaasKnowledgeConfigElement request \u003d SaasKnowledgeConfigElement.builder()\n                    .elementId(saasKnowledgeElement.getCode())\n                    .analysisEngine(saasKnowledgeConfigContainer.get().getAnalysisEngine())\n                    .analysisMode(saasKnowledgeConfigContainer.get().getAnalysisMode())\n                    .ocrEngine(saasKnowledgeConfigContainer.get().getOcrEngine())\n                    .multiModalityEngine(saasKnowledgeConfigContainer.get().getMultiModalityEngine())\n                    .splitMode(saasKnowledgeConfigContainer.get().getSplitMode())\n                    .maxChunkSize(saasKnowledgeConfigContainer.get().getMaxChunkSize())\n                    .overlapSize(saasKnowledgeConfigContainer.get().getOverlapSize())\n                    .maxChunkLength(saasKnowledgeConfigContainer.get().getMaxChunkLength())\n                    .splitDelimiters(saasKnowledgeConfigContainer.get().getSplitDelimiters())\n                    .imageOcr(saasKnowledgeConfigContainer.get().getImageOcr())\n                    .tenantId(saasKnowledgeConfigContainer.get().getTenantId())\n                    .sort(saasKnowledgeConfigContainer.get().getSort())\n                    .modifier(UserContextHolder.getCurrentUser().getCode())\n                    .creator(UserContextHolder.getCurrentUser().getCode())\n                    .modifierTime(LocalDateTime.now())\n                    .containerId(saasKnowledgeConfigContainer.get().getContainerId())\n                    .engineType(saasKnowledgeConfigContainer.get().getEngineType())\n                    .useOriginalContent(Cns.YES)\n                    .createTime(LocalDateTime.now())\n                    .build();\n            saasKnowledgeConfigElementService.save(request);\n            // 通用知识库文档列入 草稿状态不列入动态信息\n            String spaceCode \u003d saasKnowledgeElement.getContainerId();\n            LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e queryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            queryWrapper.eq(SaasKnowledgeContainer::getCode, spaceCode);\n            queryWrapper.eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getCode());\n            // 更新动态\n            SaasKnowledgeElementCacheInfo saasKnowledgeElementCacheInfo \u003d this.get(saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getTenantId());\n            saasKnowledgeElementTrendService.messageTrend(SaasKnowledgeElementTrendAddReq.of(sysUserInfo, saasKnowledgeElement, SaasKnowledgeElementEvent.UPDATED, saasKnowledgeElementCacheInfo));\n        }\n        return Result.data(KnowledgeElementTreeResp.of(saasKnowledgeElement));\n    }\n\n    /**\n     * 新增知识库元素记录\n     * @param knowledgeElementAddReq 新增知识库元素条件Vo\n     * @return 是否新增成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e add(com.torchv.application.knowledge.model.request.knowledge.KnowledgeElementAddReq knowledgeElementAddReq) {\n        log.info(\"新增知识库元素数据,Vo:{}\", knowledgeElementAddReq.toString());\n        SaasKnowledgeElement saasKnowledgeElement \u003d new SaasKnowledgeElement();\n        BeanUtils.copyProperties(knowledgeElementAddReq, saasKnowledgeElement);\n        saasKnowledgeElement.setCreateTime(LocalDateTime.now());\n        saasKnowledgeElement.setTenantId(UserContextHolder.getTenantId());\n\n        // 唯一编码\n        saasKnowledgeElement.setCode(IdUtil.getSnowflakeNextIdStr());\n        int ret \u003d saasKnowledgeElementMapper.insert(saasKnowledgeElement);\n        if (ret \u003e 0) {\n            Optional\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeConfigContainer \u003d saasKnowledgeConfigContainerService.queryInfoByContainerId(knowledgeElementAddReq.getContainerId());\n            if (saasKnowledgeConfigContainer.isEmpty()) {\n                log.error(\"未找到知识库配置信息\");\n                return Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n            }\n\n            SaasKnowledgeConfigElementAddReq request \u003d SaasKnowledgeConfigElementAddReq.builder()\n                    .elementId(saasKnowledgeElement.getCode())\n                    .analysisEngine(saasKnowledgeConfigContainer.get().getAnalysisEngine())\n                    .analysisMode(saasKnowledgeConfigContainer.get().getAnalysisMode())\n                    .ocrEngine(saasKnowledgeConfigContainer.get().getOcrEngine())\n                    .multiModalityEngine(saasKnowledgeConfigContainer.get().getMultiModalityEngine())\n                    .splitMode(saasKnowledgeConfigContainer.get().getSplitMode())\n                    .maxChunkSize(saasKnowledgeConfigContainer.get().getMaxChunkSize())\n                    .overlapSize(saasKnowledgeConfigContainer.get().getOverlapSize())\n                    .maxChunkLength(saasKnowledgeConfigContainer.get().getMaxChunkLength())\n                    .splitDelimiters(saasKnowledgeConfigContainer.get().getSplitDelimiters())\n                    .imageOcr(saasKnowledgeConfigContainer.get().getImageOcr())\n                    .tenantId(saasKnowledgeConfigContainer.get().getTenantId())\n                    .sort(saasKnowledgeConfigContainer.get().getSort())\n                    .modifier(UserContextHolder.getCurrentUser().getCode())\n                    .creator(UserContextHolder.getCurrentUser().getCode())\n                    .modifierTime(LocalDateTime.now())\n                    .containerId(saasKnowledgeConfigContainer.get().getContainerId())\n                    .engineType(saasKnowledgeConfigContainer.get().getEngineType())\n                    .createTime(LocalDateTime.now())\n                    .build();\n\n            return saasKnowledgeConfigElementService.add(request);\n\n        } else {\n            return Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n        }\n    }\n\n\n    @Override\n    @Transactional(rollbackFor \u003d Exception.class)\n    public Result\u003cKnowledgeElementTreeResp\u003e add(KnowledgeElementAddReq knowledgeElementAddReq, KnowledgeElementTypes types) {\n        log.info(\"新增空间页面数据,Vo:{}\", knowledgeElementAddReq.toString());\n        String pageCode \u003d IdUtil.getSnowflakeNextIdStr();\n        // 获取当前用户信息\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 生成唯一的MD5值，避免空内容导致的MD5冲突\n        String uniqueContent \u003d generateUniqueContent(knowledgeElementAddReq, pageCode, sysUserInfo);\n        String eleMd5 \u003d MD5.create().digestHex16(uniqueContent);\n        // 创建saasKnowledgeElement对象并从请求Vo中复制属性\n        SaasKnowledgeElement saasKnowledgeElement \u003d new SaasKnowledgeElement();\n        BeanUtils.copyProperties(knowledgeElementAddReq, saasKnowledgeElement);\n        // 模板信息获取\n        if (ObjectUtils.isNotEmpty(knowledgeElementAddReq.getTemplateCode())) {\n            String templateCode \u003d knowledgeElementAddReq.getTemplateCode();\n            String tenantId \u003d UserContextHolder.getTenantId();\n            kbPageTemplateService.queryTemplateByCode(tenantId, templateCode).ifPresent(template -\u003e {\n                saasKnowledgeElement.setContentMarked(template.getContentMarked());\n            });\n        }\n        saasKnowledgeElement.setCode(pageCode);\n        saasKnowledgeElement.setEleMd5(eleMd5);\n        // 设置页面类型\n        saasKnowledgeElement.setCategory(types.name());\n        // 设置描述字段\n        String description \u003d MarkdownUtils.cleanAndSub(knowledgeElementAddReq.getContentMarked());\n        // 临时复用存储\n        saasKnowledgeElement.setConfig(description);\n        // 设置修改者和修改时间\n        saasKnowledgeElement.setModifier(sysUserInfo.getCode());\n        saasKnowledgeElement.setModifierTime(LocalDateTime.now());\n        // 设置创建者和创建时间\n        saasKnowledgeElement.setCreator(sysUserInfo.getCode());\n        saasKnowledgeElement.setCreateTime(LocalDateTime.now());\n        saasKnowledgeElement.setTenantId(sysUserInfo.getTenantId());\n        saasKnowledgeElement.setContainerId(knowledgeElementAddReq.getSpaceCode());\n        // 设置页面状态为待处理\n        saasKnowledgeElement.setProcessStatus(ProcessStatusEnum.DRAFT.getCode());\n        // 查询最大的Sort值\n        Integer maxOrder \u003d saasKnowledgeElementMapper.maxOrder(saasKnowledgeElement.getTenantId(), saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getParentCode());\n        Integer currentOrder \u003d Objects.requireNonNullElse(maxOrder, 0) + KbConst.MOVE_ORDER_LAST_NEXT;\n        // 设置排序\n        saasKnowledgeElement.setSort(currentOrder);\n        // 版本号\n        String pageVersionCode \u003d IdUtil.getSnowflakeNextIdStr();\n        // 设置标题名称\n        saasKnowledgeElement.setEleName(knowledgeElementAddReq.getTitle());\n        // 插入页面记录到数据库\n        int ret \u003d saasKnowledgeElementMapper.insert(saasKnowledgeElement);\n        if (ret \u003e 0) {\n            // 插入版本信息\n            knowledgeElementVersionService.add(pageVersionCode, saasKnowledgeElement, knowledgeElementAddReq.getAttachments(), sysUserInfo, KnowledgeElementVersionStatus.DEFAULT);\n            // 插入文件解析配置\n            Optional\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeConfigContainer \u003d saasKnowledgeConfigContainerService.queryInfoByContainerId(knowledgeElementAddReq.getSpaceCode());\n            if (saasKnowledgeConfigContainer.isEmpty()) {\n                log.error(\"未找到知识库配置信息\");\n                return Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n            }\n            SaasKnowledgeConfigElement request \u003d SaasKnowledgeConfigElement.builder()\n                    .elementId(saasKnowledgeElement.getCode())\n                    .analysisEngine(saasKnowledgeConfigContainer.get().getAnalysisEngine())\n                    .analysisMode(saasKnowledgeConfigContainer.get().getAnalysisMode())\n                    .ocrEngine(saasKnowledgeConfigContainer.get().getOcrEngine())\n                    .multiModalityEngine(saasKnowledgeConfigContainer.get().getMultiModalityEngine())\n                    .splitMode(saasKnowledgeConfigContainer.get().getSplitMode())\n                    .maxChunkSize(saasKnowledgeConfigContainer.get().getMaxChunkSize())\n                    .overlapSize(saasKnowledgeConfigContainer.get().getOverlapSize())\n                    .maxChunkLength(saasKnowledgeConfigContainer.get().getMaxChunkLength())\n                    .splitDelimiters(saasKnowledgeConfigContainer.get().getSplitDelimiters())\n                    .imageOcr(saasKnowledgeConfigContainer.get().getImageOcr())\n                    .tenantId(saasKnowledgeConfigContainer.get().getTenantId())\n                    .sort(saasKnowledgeConfigContainer.get().getSort())\n                    .modifier(UserContextHolder.getCurrentUser().getCode())\n                    .creator(UserContextHolder.getCurrentUser().getCode())\n                    .modifierTime(LocalDateTime.now())\n                    .containerId(saasKnowledgeConfigContainer.get().getContainerId())\n                    .engineType(saasKnowledgeConfigContainer.get().getEngineType())\n                    .useOriginalContent(Cns.YES)\n                    .createTime(LocalDateTime.now())\n                    .build();\n            saasKnowledgeConfigElementService.save(request);\n            // 通用知识库文档列入 草稿状态不列入动态信息\n            String spaceCode \u003d knowledgeElementAddReq.getSpaceCode();\n            LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e queryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            queryWrapper.eq(SaasKnowledgeContainer::getCode, spaceCode);\n            queryWrapper.eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getCode());\n            SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectOne(queryWrapper);\n            if (!ProcessStatusEnum.DRAFT.equals(ProcessStatusEnum.parse(saasKnowledgeElement.getProcessStatus()))\n            \u0026\u0026 saasKnowledgeContainer.getCategory().equals(KnowledgeCategory.COMMON.name())){\n                // 空间动态信息新增\n                SaasKnowledgeElementCacheInfo saasKnowledgeElementCacheInfo \u003d this.get(saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getTenantId());\n                saasKnowledgeElementTrendService.messageTrend(SaasKnowledgeElementTrendAddReq.of(sysUserInfo, saasKnowledgeElement, SaasKnowledgeElementEvent.UPDATED, saasKnowledgeElementCacheInfo));\n            }\n        }\n        // 模板信息获取\n        if (ObjectUtils.isNotEmpty(knowledgeElementAddReq.getTemplateCode())) {\n            String templateCode \u003d knowledgeElementAddReq.getTemplateCode();\n            String tenantId \u003d UserContextHolder.getTenantId();\n            kbPageTemplateService.queryTemplateByCode(tenantId, templateCode).ifPresent(template -\u003e {\n                saasKnowledgeElement.setContentMarked(template.getContentMarked());\n            });\n        }\n        return Result.data(KnowledgeElementTreeResp.of(saasKnowledgeElement));\n    }\n\n    /**\n     * 生成唯一的内容字符串，避免空内容导致的MD5冲突\n     */\n    private String generateUniqueContent(KnowledgeElementAddReq req, String pageCode, SysUserInfo sysUserInfo) {\n        StringBuilder contentBuilder \u003d new StringBuilder();\n\n        // 添加页面标题\n        if (StrUtil.isNotBlank(req.getTitle())) {\n            contentBuilder.append(req.getTitle());\n        }\n\n        // 添加页面内容\n        if (StrUtil.isNotBlank(req.getContent())) {\n            contentBuilder.append(req.getContent());\n        }\n\n        // 添加markdown内容\n        if (StrUtil.isNotBlank(req.getContentMarked())) {\n            contentBuilder.append(req.getContentMarked());\n        }\n\n        // 如果内容为空，使用唯一标识符确保MD5不同\n        if (contentBuilder.length() \u003d\u003d 0) {\n            contentBuilder.append(\"EMPTY_CONTENT_\")\n                    .append(pageCode)\n                    .append(\"_\")\n                    .append(sysUserInfo.getTenantId())\n                    .append(\"_\")\n                    .append(System.currentTimeMillis());\n        }\n\n        return contentBuilder.toString();\n    }\n\n    @Override\n    public Result\u003cString\u003e addSingle(KnowledgeSingleElementAddFileReq singleFileReq) {\n        log.info(\"新增知识库元素数据Single,Vo:{}\", singleFileReq.toString());\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 校验知识库 请求参数\n        knowledgeValidationService.validateFileBase(singleFileReq, sysUserInfo.getTenantId());\n        SaasKnowledgeElement saasKnowledgeElement \u003d new SaasKnowledgeElement();\n        BeanUtils.copyProperties(singleFileReq, saasKnowledgeElement);\n        saasKnowledgeElement.setStartTime(singleFileReq.startTimeInstance());\n        saasKnowledgeElement.setEndTime(singleFileReq.endTimeInstance());\n        KnowledgeElementCategory elementCategory \u003d KnowledgeElementCategory.getKnowledgeCategory(singleFileReq.getCategory());\n        saasKnowledgeElement.setCategory(Objects.requireNonNull(elementCategory, \"system.common.request.invalid\").getName());\n        saasKnowledgeElement.setCreateTime(LocalDateTime.now());\n        saasKnowledgeElement.setCreator(sysUserInfo.getCode());\n        saasKnowledgeElement.setModifier(sysUserInfo.getCode());\n        saasKnowledgeElement.setModifierTime(LocalDateTime.now());\n        saasKnowledgeElement.setTenantId(UserContextHolder.getTenantId());\n        // 唯一编码\n        saasKnowledgeElement.setCode(IdUtil.getSnowflakeNextIdStr());\n        // 文件md5\n        saasKnowledgeElement.setEleMd5(MD5.create().digestHex16(singleFileReq.getName()));\n        saasKnowledgeElement.setEleName(singleFileReq.getName());\n        // 设置状态,默认为成功状态\n        saasKnowledgeElement.setProcessStatus(ProcessStatusEnum.SUCCESS.getCode());\n        saasKnowledgeElement.setProcessCount(0);\n        saasKnowledgeElement.setPageCount(1);\n\n        int ret \u003d saasKnowledgeElementMapper.insert(saasKnowledgeElement);\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.add.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cKnowledgeElementResp\u003e addText(KnowledgeElementTxtAddFileReq addFileReq) {\n        log.info(\"新增文本，name:{}\", addFileReq.getName());\n        LogContext.putVariable(\"name\", addFileReq.getName());\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        knowledgeValidationService.validateFileBase(addFileReq, sysUserInfo.getTenantId());\n        File tmpFile \u003d null;\n        File tmpPreviewFile \u003d null;\n        String md5_str \u003d MD5.create().digestHex16(addFileReq.getContent());\n        String md5_preview_str \u003d MD5.create().digestHex16(addFileReq.getOriginContent());\n        LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class)\n                .eq(SaasKnowledgeElement::getTenantId, UserContextHolder.getTenantId())\n                .eq(SaasKnowledgeElement::getEleMd5, md5_str);\n        Assert.isFalse(saasKnowledgeElementMapper.selectCount(lambdaQueryWrapper) \u003e 0, \"knowledge.dataset.txt.validation.exists.content\");\n        String key \u003d Cns.LOCK_KNOWLEDGE_KEY + sysUserInfo.getTenantId();\n        RLock rLock \u003d redissonClient.getLock(key);\n        try {\n            if (rLock.tryLock(10, 10, TimeUnit.SECONDS)) {\n                // 上传\n                tmpFile \u003d File.createTempFile(\"custom_\" + addFileReq.getName(), \".txt\");\n                tmpPreviewFile \u003d File.createTempFile(\"custom_preview_\" + addFileReq.getName(), \".txt\");\n                // 文本类型的情况，把标题也添加进去？\n                FileUtil.writeUtf8String(addFileReq.markdownText(), tmpFile);\n                FileUtil.writeUtf8String(addFileReq.getOriginContent(), tmpPreviewFile);\n                // 记录上传流量日志\n                long fileSize \u003d FileUtil.size(tmpFile);\n                boolean storageValidate \u003d billingSubscribeAccountService.validateAvailableStorage(sysUserInfo.getTenantId(), fileSize);\n                Assert.isTrue(storageValidate, \"knowledge.preview.upload.limit\");\n                // 上传\n                MaterialInfoResp materialInfoResp \u003d materialService.save(tmpFile, md5_str, sysUserInfo.getTenantId());\n                MaterialInfoResp materialInfoPreviewResp \u003d materialService.save(tmpPreviewFile, md5_preview_str, sysUserInfo.getTenantId());\n                SaasKnowledgeElement saasKnowledgeElement \u003d new SaasKnowledgeElement();\n                BeanUtils.copyProperties(addFileReq, saasKnowledgeElement);\n                saasKnowledgeElement.setStartTime(addFileReq.startTimeInstance());\n                saasKnowledgeElement.setEndTime(addFileReq.endTimeInstance());\n                // 文件md5\n                saasKnowledgeElement.setEleMd5(MD5.create().digestHex16(addFileReq.getContent()));\n                saasKnowledgeElement.setEleName(addFileReq.getName());\n                saasKnowledgeElement.setEleUrl(materialInfoResp.getFileUrl());\n                // 预览地址存储富文本\n                saasKnowledgeElement.setElePreviewUrl(materialInfoPreviewResp.getFileUrl());\n                saasKnowledgeElement.setEleTokenSize(Long.parseLong(Objects.toString(StrUtil.length(addFileReq.getContent()), \"0\")));\n                saasKnowledgeElement.setEleSuffix(\"txt\");\n                saasKnowledgeElement.setEleSize(fileSize);\n                saasKnowledgeElement.setCategory(KnowledgeElementCategory.FILE.getName());\n                saasKnowledgeElement.setCreateTime(LocalDateTime.now());\n                saasKnowledgeElement.setCreator(sysUserInfo.getCode());\n                saasKnowledgeElement.setModifier(sysUserInfo.getCode());\n                saasKnowledgeElement.setModifierTime(LocalDateTime.now());\n                saasKnowledgeElement.setTenantId(sysUserInfo.getTenantId());\n                // 唯一编码\n                saasKnowledgeElement.setCode(IdUtil.getSnowflakeNextIdStr());\n                // 设置状态,默认为待处理状态\n                saasKnowledgeElement.setProcessStatus(ProcessStatusEnum.INIT.getCode());\n                saasKnowledgeElement.setProcessCount(0);\n                saasKnowledgeElement.setPageCount(1);\n                int ret \u003d saasKnowledgeElementMapper.insert(saasKnowledgeElement);\n                if (ret \u003e 0) {\n                    Optional\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeConfigContainer \u003d saasKnowledgeConfigContainerService.queryInfoByContainerId(addFileReq.getContainerId());\n                    if (saasKnowledgeConfigContainer.isEmpty()) {\n                        log.error(\"未找到知识库配置信息\");\n                        return Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n                    }\n\n                    SaasKnowledgeConfigElementAddReq request \u003d SaasKnowledgeConfigElementAddReq.builder()\n                            .elementId(saasKnowledgeElement.getCode())\n                            .analysisEngine(saasKnowledgeConfigContainer.get().getAnalysisEngine())\n                            .analysisMode(saasKnowledgeConfigContainer.get().getAnalysisMode())\n                            .ocrEngine(saasKnowledgeConfigContainer.get().getOcrEngine())\n                            .multiModalityEngine(saasKnowledgeConfigContainer.get().getMultiModalityEngine())\n                            .splitMode(saasKnowledgeConfigContainer.get().getSplitMode())\n                            .maxChunkSize(saasKnowledgeConfigContainer.get().getMaxChunkSize())\n                            .overlapSize(saasKnowledgeConfigContainer.get().getOverlapSize())\n                            .maxChunkLength(saasKnowledgeConfigContainer.get().getMaxChunkLength())\n                            .splitDelimiters(saasKnowledgeConfigContainer.get().getSplitDelimiters())\n                            .imageOcr(saasKnowledgeConfigContainer.get().getImageOcr())\n                            .tenantId(saasKnowledgeConfigContainer.get().getTenantId())\n                            .sort(saasKnowledgeConfigContainer.get().getSort())\n                            .modifier(UserContextHolder.getCurrentUser().getCode())\n                            .creator(UserContextHolder.getCurrentUser().getCode())\n                            .modifierTime(LocalDateTime.now())\n                            .containerId(saasKnowledgeConfigContainer.get().getContainerId())\n                            .engineType(saasKnowledgeConfigContainer.get().getEngineType())\n                            .createTime(LocalDateTime.now())\n                            .build();\n\n                    boolean f \u003d saasKnowledgeConfigElementService.add(request).getCode().equals(ErrorCodeEnum.SUCCESS.getCode());\n                    Assert.isTrue(f, \"knowledge.dataset.txt.add.fail\");\n                    // 增加存储流量日志\n                    boolean storageResult \u003d knowledgeStorageService.addStorage(KnowledgeStorageRecord.uploadText(sysUserInfo.getTenantId(), saasKnowledgeElement, materialInfoResp));\n                    Assert.isTrue(storageResult, \"knowledge.dataset.txt.add.fail\");\n                    // 上传流量账户扣费\n                    boolean result \u003d billingSubscribeAccountService.costStorage(sysUserInfo.getTenantId(), fileSize);\n                    Assert.isTrue(result, \"knowledge.dataset.txt.add.fail\");\n                }\n                return ret \u003e 0 ? Result.data(new SaasKnowledgeElementApplyFunction().apply(saasKnowledgeElement)) : Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n            }\n        } catch (InterruptedException | IOException i) {\n            log.error(i.getMessage(), i);\n            throw new RuntimeException(\"system.error.inner.exception\");\n        } finally {\n            FileUtil.del(tmpFile);\n            // 释放分布式锁\n            if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                rLock.unlock();\n                log.info(\"free lock successful...\");\n            }\n        }\n        return Result.error(i18nMessage.resolveMessage(\"knowledge.dataset.txt.add.fail\"));\n    }\n\n    /**\n     * 更新知识库元素记录\n     * @param knowledgeElementUpdateReq 更新知识库元素条件Vo\n     * @return 是否更新成功\n     */\n    @Override\n    public Result\u003cString\u003e update(KnowledgeElementUpdateReq knowledgeElementUpdateReq) {\n        log.info(\"根据主键id修改知识库元素数据,Vo:{}\", knowledgeElementUpdateReq.toString());\n        LogContext.putVariable(\"name\", knowledgeElementUpdateReq.getEleName());\n        SaasKnowledgeElement record \u003d saasKnowledgeElementMapper.selectById(knowledgeElementUpdateReq.getId());\n        Assert.notNull(record, \"system.common.request.invalid\");\n        String tenantId \u003d UserContextHolder.getTenantId();\n        Assert.isTrue(StrUtil.equalsIgnoreCase(tenantId, record.getTenantId()), \"system.common.request.invalid\");\n        SaasKnowledgeElement saasKnowledgeElement \u003d new SaasKnowledgeElement();\n        BeanUtils.copyProperties(knowledgeElementUpdateReq, saasKnowledgeElement);\n        saasKnowledgeElement.setModifierTime(LocalDateTime.now());\n        int ret \u003d saasKnowledgeElementMapper.updateById(saasKnowledgeElement);\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n\n\n    @Override\n    public Result\u003cString\u003e enable(KnowledgeElementEnableReq req) {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        String lockKey \u003d Cns.LOCK_KNOWLEDGE_KEY + tenantId + \":enable:\" + req.getId();\n        RLock rLock \u003d redissonClient.getLock(lockKey);\n        try {\n            if (rLock.tryLock(10, 10, TimeUnit.SECONDS)) {\n                SaasKnowledgeElement record \u003d saasKnowledgeElementMapper.selectById(req.getId());\n                Assert.isTrue(ObjectUtil.isNotEmpty(record) \u0026\u0026 StrUtil.equalsIgnoreCase(tenantId, record.getTenantId()), \"system.common.request.invalid\");\n                record.setModifierTime(LocalDateTime.now());\n                if (StrUtil.isAllNotEmpty(req.getStartTime(),req.getEndTime())){\n                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n                    String startTimeStr \u003d req.getStartTime();\n                    String endTimeStr \u003d req.getEndTime();\n                    LocalDateTime start \u003d null;\n                    LocalDateTime end \u003d null;\n                    try {\n                        if (startTimeStr !\u003d null \u0026\u0026 !startTimeStr.isEmpty()) {\n                            start \u003d LocalDateTime.parse(startTimeStr, formatter);\n                        }\n                        if (endTimeStr !\u003d null \u0026\u0026 !endTimeStr.isEmpty()) {\n                            end \u003d LocalDateTime.parse(endTimeStr, formatter);\n                        }\n                    } catch (DateTimeParseException e) {\n                        log.error(\"时间格式错误，startTime:{}, endTime:{}\", startTimeStr, endTimeStr, e);\n                    }\n                    record.setStartTime(start);\n                    record.setEndTime(end);\n                }else{\n                    if (Objects.equals(record.getEnable(), ToggleStatusEnum.NO.getCode())){\n                        record.setEnable(ToggleStatusEnum.YES.getCode());\n                    }else{\n                        record.setEnable(ToggleStatusEnum.NO.getCode());\n                    }\n                }\n                if (ObjectUtil.isNotEmpty(req.getNeverExpire())){\n                    record.setNeverExpire(req.getNeverExpire());\n                }\n\n                int ret \u003d saasKnowledgeElementMapper.updateById(record);\n                if (ret \u003e 0){\n                    try {\n                        log.info(\"开始同步-启用/禁用-状态到ES.enable:{},startTime:{},endTime:{},neverExpire:{}\",record.getEnable(),record.getStartTime(),record.getEndTime(),record.getNeverExpire());\n                        Map\u003cString, Object\u003e updateFields \u003d new HashMap\u003c\u003e();\n                        if (ObjectUtil.isNotEmpty(record.getEnable())) {\n                            updateFields.put(DataSetChunkInfo.FIELD_ENABLE, String.valueOf(record.getEnable()));\n                        }\n                        if (record.getStartTime() !\u003d null) {\n                            updateFields.put(DataSetChunkInfo.FIELD_START_TIME, record.getStartTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\n                        }\n                        if (record.getEndTime() !\u003d null) {\n                            updateFields.put(DataSetChunkInfo.FIELD_END_TIME, record.getEndTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\n                        }\n                        if (record.getNeverExpire() !\u003d null) {\n                            updateFields.put(DataSetChunkInfo.FIELD_TIME_STATUS, String.valueOf(record.getNeverExpire()));\n                        }\n\n                        if (!updateFields.isEmpty()) {\n                            try {\n                                List\u003cUpdateReference\u003e updateChunks \u003d Arrays.asList(\n                                        UpdateReference.builder()\n                                                .dataId(record.getCode())\n                                                .value(updateFields)\n                                                .build()\n                                );\n\n                                UniversalEmbeddingConfig embeddingConfig \u003d knowledgeElementEmbeddingQueryService.getEmbeddingConfigByContainerId(record.getContainerId());\n                                vectorIndexDelegate.updateChuck(tenantId, updateChunks,embeddingConfig.getVectorDimension());\n\n                                log.info(\"updateChunk成功更新同步启用/禁用状态到ES，elementCode:{}, 更新字段:{}\", record.getCode(), updateFields);\n\n                            } catch (Exception chunkUpdateEx) {\n                                log.error(\"updateChunk更新同步ES失败，elementCode:{}, error:{}\", record.getCode(), chunkUpdateEx.getMessage(), chunkUpdateEx);\n                            }\n                        }\n                    } catch (Exception e) {\n                        log.error(\"同步启用/禁用状态到ES失败，数据库已更新ES同步失败，elementId:{}, error:{}\", record.getId(), e.getMessage(), e);\n                    }\n                }\n                return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n            } else {\n                return Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n            }\n        } catch (InterruptedException e) {\n            log.error(\"获取锁失败\", e);\n            Thread.currentThread().interrupt();\n            return Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n        } finally {\n            if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                rLock.unlock();\n            }\n        }\n    }\n\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cBatchOperationResult\u003e batchEnable(KnowledgeElementEnableReq req) {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        BatchOperationResult result \u003d new BatchOperationResult();\n        result.setSuccessCount(0);\n        result.setFailureCount(0);\n        result.setSuccessIds(new ArrayList\u003c\u003e());\n        result.setFailureDetails(new ArrayList\u003c\u003e());\n\n        if (CollUtil.isEmpty(req.getIds())) {\n            return Result.error(\"ID列表不能为空\");\n        }\n\n        for (Integer id : req.getIds()) {\n            String lockKey \u003d Cns.LOCK_KNOWLEDGE_KEY + tenantId + \":enable:\" + id;\n            RLock rLock \u003d redissonClient.getLock(lockKey);\n            try {\n                if (rLock.tryLock(10, 10, TimeUnit.SECONDS)) {\n                    SaasKnowledgeElement record \u003d saasKnowledgeElementMapper.selectById(id);\n                    if (ObjectUtil.isEmpty(record) || !StrUtil.equalsIgnoreCase(tenantId, record.getTenantId())) {\n                        result.getFailureDetails().add(new BatchOperationResult.FailureDetail(id, \"记录不存在或无权限\"));\n                        result.setFailureCount(result.getFailureCount() + 1);\n                        continue;\n                    }\n                    record.setModifierTime(LocalDateTime.now());\n                    if (Objects.equals(record.getEnable(), ToggleStatusEnum.NO.getCode())){\n                        record.setEnable(ToggleStatusEnum.YES.getCode());\n                    }else{\n                        record.setEnable(ToggleStatusEnum.NO.getCode());\n                    }\n                    int ret \u003d saasKnowledgeElementMapper.updateById(record);\n                    if (ret \u003e 0) {\n                        try {\n                            Map\u003cString, Object\u003e updateFields \u003d new HashMap\u003c\u003e();\n                            if (ObjectUtil.isNotEmpty(record.getEnable())) {\n                                updateFields.put(DataSetChunkInfo.FIELD_ENABLE, String.valueOf(record.getEnable()));\n                            }\n                            if (record.getStartTime() !\u003d null) {\n                                updateFields.put(DataSetChunkInfo.FIELD_START_TIME, record.getStartTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\n                            }\n                            if (record.getEndTime() !\u003d null) {\n                                updateFields.put(DataSetChunkInfo.FIELD_END_TIME, record.getEndTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\n                            }\n                            if (record.getNeverExpire() !\u003d null) {\n                                updateFields.put(DataSetChunkInfo.FIELD_TIME_STATUS, String.valueOf(record.getNeverExpire()));\n                            }\n\n                            if (!updateFields.isEmpty()) {\n                                List\u003cUpdateReference\u003e updateChunks \u003d Arrays.asList(\n                                        UpdateReference.builder()\n                                                .dataId(record.getCode())\n                                                .value(updateFields)\n                                                .build()\n                                );\n                                UniversalEmbeddingConfig embeddingConfig \u003d knowledgeElementEmbeddingQueryService.getEmbeddingConfigByContainerId(record.getContainerId());\n                                vectorIndexDelegate.updateChuck(tenantId, updateChunks, embeddingConfig.getVectorDimension());\n                            }\n                            result.getSuccessIds().add(id);\n                            result.setSuccessCount(result.getSuccessCount() + 1);\n                        } catch (Exception e) {\n                            log.error(\"同步ES失败，ID:{}\", id, e);\n                            result.getFailureDetails().add(new BatchOperationResult.FailureDetail(id, \"ES同步失败\"));\n                            result.setFailureCount(result.getFailureCount() + 1);\n                        }\n                    } else {\n                        result.getFailureDetails().add(new BatchOperationResult.FailureDetail(id, \"数据库更新失败\"));\n                        result.setFailureCount(result.getFailureCount() + 1);\n                    }\n                } else {\n                    result.getFailureDetails().add(new BatchOperationResult.FailureDetail(id, \"获取锁超时\"));\n                    result.setFailureCount(result.getFailureCount() + 1);\n                }\n            } catch (Exception e) {\n                log.error(\"批量启用/禁用处理失败，ID:{}\", id, e);\n                result.getFailureDetails().add(new BatchOperationResult.FailureDetail(id, \"处理异常: \" + e.getMessage()));\n                result.setFailureCount(result.getFailureCount() + 1);\n            } finally {\n                if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                    rLock.unlock();\n                }\n            }\n        }\n\n        String message \u003d String.format(\"批量操作完成，成功:%d个，失败:%d个\", result.getSuccessCount(), result.getFailureCount());\n        return Result.data(result, message);\n    }\n\n    @Override\n    public Result\u003cBatchOperationResult\u003e batchReset(KnowledgeElementResetReq req) {\n        if (CollUtil.isEmpty(req.getIds())) {\n            return Result.error(\"ID列表不能为空\");\n        }\n        String tenantId \u003d UserContextHolder.getTenantId();\n        BatchOperationResult result \u003d new BatchOperationResult();\n        result.setSuccessCount(0);\n        result.setFailureCount(0);\n        result.setSuccessIds(new ArrayList\u003c\u003e());\n        result.setFailureDetails(new ArrayList\u003c\u003e());\n        for (Integer id : req.getIds()) {\n            try {\n                SaasKnowledgeElement saasKnowledgeElement \u003d saasKnowledgeElementMapper.selectById(id);\n                if (ObjectUtil.isEmpty(saasKnowledgeElement) || !StrUtil.equalsIgnoreCase(saasKnowledgeElement.getTenantId(), tenantId)) {\n                    result.getFailureDetails().add(new BatchOperationResult.FailureDetail(id, \"记录不存在或无权限\"));\n                    result.setFailureCount(result.getFailureCount() + 1);\n                    continue;\n                }\n\n                // 判断状态,正在处理中的文件不允许删除\n                ProcessStatusEnum processStatusEnum \u003d ProcessStatusEnum.parse(saasKnowledgeElement.getProcessStatus());\n                // 如果已经是待处理或者成功的状态，那么不用二次重置处理\n                if (processStatusEnum \u003d\u003d ProcessStatusEnum.SUCCESS || processStatusEnum \u003d\u003d ProcessStatusEnum.INIT) {\n                    result.getSuccessIds().add(id);\n                    result.setSuccessCount(result.getSuccessCount() + 1);\n                    continue;\n                }\n                // 非处理失败的情况下，给一个间隔\n                if (processStatusEnum !\u003d ProcessStatusEnum.FAILURE) {\n                    // 计算一下时间，避免误操作\n                    if (ChronoUnit.MINUTES.between(saasKnowledgeElement.getModifierTime(), LocalDateTime.now()) \u003c 0.5) {\n                        // 在5分钟内，不允许重置\n                        result.getFailureDetails().add(new BatchOperationResult.FailureDetail(id, \"操作间隔时间不足5分钟\"));\n                        result.setFailureCount(result.getFailureCount() + 1);\n                        continue;\n                    }\n                }\n                // 更新状态\n                SaasKnowledgeElement element \u003d new SaasKnowledgeElement();\n                element.setId(id);\n                element.setModifierTime(LocalDateTime.now());\n                element.setProcessStatus(ProcessStatusEnum.INIT.getCode());\n\n                // 判断文本的元素类型，如果是wiki类型，那么不需要重置地址\n                if (!StrUtil.equalsIgnoreCase(saasKnowledgeElement.getCategory(), KnowledgeElementCategory.VIRTUAL_FILE.getName())) {\n                    if (StrUtil.isNotBlank(saasKnowledgeElement.getElePreviewUrl())) {\n                        // 把原始的地址重置回去\n                        element.setEleUrl(saasKnowledgeElement.getElePreviewUrl());\n                    }\n                }\n                int ret \u003d saasKnowledgeElementMapper.updateById(element);\n                if (ret \u003e 0) {\n                    // 根据数据集code删除索引的数据\n                    knowledgeElementDataService.deleteByDataId(tenantId, saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getCode());\n                    result.getSuccessIds().add(id);\n                    result.setSuccessCount(result.getSuccessCount() + 1);\n                } else {\n                    result.getFailureDetails().add(new BatchOperationResult.FailureDetail(id, \"数据库更新失败\"));\n                    result.setFailureCount(result.getFailureCount() + 1);\n                }\n\n            } catch (Exception e) {\n                log.error(\"批量重置处理失败，ID:{}\", id, e);\n                result.getFailureDetails().add(new BatchOperationResult.FailureDetail(id, \"处理异常: \" + e.getMessage()));\n                result.setFailureCount(result.getFailureCount() + 1);\n            }\n        }\n        String message \u003d String.format(\"批量重置完成，成功:%d个，失败:%d个\", result.getSuccessCount(), result.getFailureCount());\n        return Result.data(result, message);\n    }\n\n    public Result\u003cKnowledgeElementResp\u003e buildElementInfo(SaasKnowledgeElement saasKnowledgeElement,Boolean edit){\n        Assert.notNull(saasKnowledgeElement, BizExceptionSupplier.notFoundInstance());\n        String tenantId \u003d UserContextHolder.getTenantId();\n        Assert.isTrue(StrUtil.equalsIgnoreCase(tenantId, saasKnowledgeElement.getTenantId()), BizExceptionSupplier.authenticationFailedInstance());\n        KnowledgeElementResp knowledgeElementResp \u003d new KnowledgeElementResp();\n        BeanUtils.copyProperties(saasKnowledgeElement, knowledgeElementResp);\n        // 查询用户名称\n        Map\u003cString, String\u003e userMap \u003d userService.selectByCode(knowledgeElementResp.userCodes());\n        knowledgeElementResp.applyUserName(userMap);\n        // 判断是否为QA对\n        if (StrUtil.equalsIgnoreCase(knowledgeElementResp.getCategory(), KnowledgeElementCategory.QA.getName())) {\n            // 查询答案,相似问列表\n            knowledgeElementResp.setAnswer(knowledgeReferenceService.getAnswer(knowledgeElementResp.getCode(), tenantId));\n            knowledgeElementResp.setSimilar(knowledgeSimilarService.listSimilar(tenantId, knowledgeElementResp.getCode()));\n            // 获取原始文本\n            if (StrUtil.isNotBlank(saasKnowledgeElement.getElePreviewUrl())) {\n                knowledgeElementResp.setOriginContent(WebUtil.getString(saasKnowledgeElement.getElePreviewUrl()));\n            } else {\n                knowledgeElementResp.setOriginContent(knowledgeElementResp.getAnswer());\n            }\n        } else {\n            if (KnowledgeElementTypes.PAGE.name().equals(saasKnowledgeElement.getCategory())){\n                // 如果是页面类型的知识库元素，那么查询最新版本\n                knowledgeElementVersionService.queryLatestVersionByPageCode(saasKnowledgeElement.getCode(), saasKnowledgeElement.getTenantId(), edit)\n                        .ifPresent(version -\u003e {\n                            knowledgeElementResp.setContentMarked(version.getContentMarked());\n                            knowledgeElementResp.setOriginContent(version.getContent());\n                            knowledgeElementResp.setContent(version.getContent());\n                        });\n            }else {\n                try {\n                    DataSetFileCategory dataSetFileCategory \u003d DataSetFileCategory.getDataSetFileCategoryBySuffix(knowledgeElementResp.getEleSuffix());\n                    if (dataSetFileCategory \u003d\u003d DataSetFileCategory.TXT || dataSetFileCategory \u003d\u003d DataSetFileCategory.MARKDOWN) {\n                        // 如果是md或者txt文件，那么下载oss的内容，给到前端\n                        URL presignedUrl\u003dmaterialService.refreshPresignedUrl(saasKnowledgeElement.getEleUrl());\n                        log.info(\"download-url-string:{},presignedUrl:{}\", saasKnowledgeElement.getEleUrl(),presignedUrl);\n                        // knowledgeElementResp.setAnswer(HttpUtil.downloadString(saasKnowledgeElement.getEleUrl(), StandardCharsets.UTF_8));\n                        //knowledgeElementResp.setAnswer(WebUtil.getString(saasKnowledgeElement.getEleUrl()));\n                        knowledgeElementResp.setAnswer(WebUtil.getString(presignedUrl.toString()));\n                        // 获取原始文本\n                        if (StrUtil.isNotBlank(saasKnowledgeElement.getElePreviewUrl())) {\n                            URL presignedPreviewUrl\u003dmaterialService.refreshPresignedUrl(saasKnowledgeElement.getElePreviewUrl());\n                            log.info(\"preview-download-url-string:{},presignedPreviewUrl:{}\", saasKnowledgeElement.getElePreviewUrl(),presignedPreviewUrl);\n                            //knowledgeElementResp.setOriginContent(WebUtil.getString(saasKnowledgeElement.getElePreviewUrl()));\n                            knowledgeElementResp.setOriginContent(WebUtil.getString(presignedPreviewUrl.toString()));\n                        } else {\n                            knowledgeElementResp.setOriginContent(knowledgeElementResp.getAnswer());\n                        }\n                    }\n                } catch (Exception e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        // 设置显示\n        if (saasKnowledgeElement.getEleSize() !\u003d null \u0026\u0026 saasKnowledgeElement.getEleSize() \u003e 0) {\n            knowledgeElementResp.setEleSizeDisplay(DataSizeUtil.format(saasKnowledgeElement.getEleSize()));\n        } else {\n            knowledgeElementResp.setEleSizeDisplay(\"-\");\n        }\n        // 设置online,非edit请求才返回online地址\n        if (!edit){\n            // 文件类型，但是不包含PDF，PDF前端单独处理\n            log.info(\"code:{} ,category:{},suffix:{}\",saasKnowledgeElement.getCode(), saasKnowledgeElement.getCategory(),saasKnowledgeElement.getEleSuffix());\n            if (KnowledgeElementCategory.FILE.name().equalsIgnoreCase(saasKnowledgeElement.getCategory())||KnowledgeElementCategory.VIRTUAL_FILE.name().equalsIgnoreCase(saasKnowledgeElement.getCategory())){\n                String url\u003dsaasKnowledgeElement.onlineUrl();\n                if (StrUtil.isNotBlank(url)){\n                    log.info(\"online-url-string:{}\", url);\n                    knowledgeElementResp.setOnline(materialService.online(ThreadLocalHolder.getHttpServletRequest(),url));\n                }\n            }\n        }\n\n        return Result.data(knowledgeElementResp);\n    }\n\n    public Result\u003cKnowledgeElementResp\u003e buildElementInfoNoAuth(SaasKnowledgeElement saasKnowledgeElement,Boolean edit,String tenantId){\n        Assert.notNull(saasKnowledgeElement, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(tenantId, saasKnowledgeElement.getTenantId()), \"system.common.request.invalid\");\n        KnowledgeElementResp knowledgeElementResp \u003d new KnowledgeElementResp();\n        BeanUtils.copyProperties(saasKnowledgeElement, knowledgeElementResp);\n        // 查询用户名称\n        Map\u003cString, String\u003e userMap \u003d userService.selectByCode(knowledgeElementResp.userCodes());\n        knowledgeElementResp.applyUserName(userMap);\n        // 判断是否为QA对\n        if (StrUtil.equalsIgnoreCase(knowledgeElementResp.getCategory(), KnowledgeElementCategory.QA.getName())) {\n            // 查询答案,相似问列表\n            knowledgeElementResp.setAnswer(knowledgeReferenceService.getAnswer(knowledgeElementResp.getCode(), tenantId));\n            knowledgeElementResp.setSimilar(knowledgeSimilarService.listSimilar(tenantId, knowledgeElementResp.getCode()));\n            // 获取原始文本\n            if (StrUtil.isNotBlank(saasKnowledgeElement.getElePreviewUrl())) {\n                knowledgeElementResp.setOriginContent(WebUtil.getString(saasKnowledgeElement.getElePreviewUrl()));\n            } else {\n                knowledgeElementResp.setOriginContent(knowledgeElementResp.getAnswer());\n            }\n        } else {\n            if (KnowledgeElementTypes.PAGE.name().equals(saasKnowledgeElement.getCategory())){\n                // 如果是页面类型的知识库元素，那么查询最新版本\n                knowledgeElementVersionService.queryLatestVersionByPageCode(saasKnowledgeElement.getCode(), saasKnowledgeElement.getTenantId(), edit)\n                        .ifPresent(version -\u003e {\n                            knowledgeElementResp.setContentMarked(version.getContentMarked());\n                            knowledgeElementResp.setOriginContent(version.getContent());\n                            knowledgeElementResp.setContent(version.getContent());\n                        });\n            }else {\n                try {\n                    DataSetFileCategory dataSetFileCategory \u003d DataSetFileCategory.getDataSetFileCategoryBySuffix(knowledgeElementResp.getEleSuffix());\n                    if (dataSetFileCategory \u003d\u003d DataSetFileCategory.TXT || dataSetFileCategory \u003d\u003d DataSetFileCategory.MARKDOWN) {\n                        // 如果是md或者txt文件，那么下载oss的内容，给到前端\n                        log.info(\"download-url-string:{}\", saasKnowledgeElement.getEleUrl());\n                        // knowledgeElementResp.setAnswer(HttpUtil.downloadString(saasKnowledgeElement.getEleUrl(), StandardCharsets.UTF_8));\n                        knowledgeElementResp.setAnswer(WebUtil.getString(saasKnowledgeElement.getEleUrl()));\n                        // 获取原始文本\n                        if (StrUtil.isNotBlank(saasKnowledgeElement.getElePreviewUrl())) {\n                            knowledgeElementResp.setOriginContent(WebUtil.getString(saasKnowledgeElement.getElePreviewUrl()));\n                        } else {\n                            knowledgeElementResp.setOriginContent(knowledgeElementResp.getAnswer());\n                        }\n                    }\n                } catch (Exception e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        // 设置显示\n        if (saasKnowledgeElement.getEleSize() !\u003d null \u0026\u0026 saasKnowledgeElement.getEleSize() \u003e 0) {\n            knowledgeElementResp.setEleSizeDisplay(DataSizeUtil.format(saasKnowledgeElement.getEleSize()));\n        } else {\n            knowledgeElementResp.setEleSizeDisplay(\"-\");\n        }\n        return Result.data(knowledgeElementResp);\n    }\n\n    /**\n     * 根据id查询知识库元素详情\n     * @param id 知识库元素主键id\n     * @return 知识库元素详情\n     */\n    @Override\n    public Result\u003cKnowledgeElementResp\u003e queryById(Integer id) {\n        log.info(\"根据主键id查询知识库元素详情,Id:{}\", id);\n        SaasKnowledgeElement saasKnowledgeElement \u003d saasKnowledgeElementMapper.selectById(id);\n        return buildElementInfo(saasKnowledgeElement,false);\n    }\n\n    @Override\n    public Result\u003cKnowledgeElementResp\u003e queryByCode(String code, Boolean edit) {\n        Optional\u003cSaasKnowledgeElement\u003e  elementOptional\u003dqueryInfoByCode(code);\n        if (elementOptional.isEmpty()){\n            return Result.customFail(MessageCodeEnum.NOT_FOUND_RESOURCE.getCode(), MessageCodeEnum.NOT_FOUND_RESOURCE.getMsg());\n        }\n        return buildElementInfo(elementOptional.get(),edit);\n    }\n    @Override\n    public Result\u003cString\u003e queryContentByCode(String pageCode, String tenantId,String code,String userId) {\n        String cachedObject\u003d stringRedisTemplate.opsForValue().get(String.format(\"exportCode:pageCode:%s:tenantId:%s:userId:%s:decryptCode:%s\", pageCode, tenantId, userId, code));\n        if (StrUtil.isBlank(cachedObject) || !StrUtil.equals(cachedObject, code)) {\n            return Result.error(\"访问码无效或已过期\");\n        }\n        Optional\u003cSaasKnowledgeElement\u003e elementOptional\u003dqueryContentByCodeAndTenantId(pageCode,tenantId);\n        Result\u003cKnowledgeElementResp\u003e knowledgeElementRespResult \u003d buildElementInfoNoAuth(elementOptional.get(), false, tenantId);\n        return Result.data(knowledgeElementRespResult.getData().getContent());\n    }\n    @Override\n    public Result\u003cString\u003e getEncryptCode(String pageCode, String tenantId,String userId) {\n        String decryptCode \u003d IdUtil.getSnowflakeNextIdStr();\n        stringRedisTemplate.opsForValue().set(String.format(\"exportCode:pageCode:%s:tenantId:%s:userId:%s:decryptCode:%s\", pageCode, tenantId,userId,decryptCode), decryptCode, 2, TimeUnit.MINUTES);\n        return Result.data(decryptCode);\n    }\n    @Override\n    public Result\u003cBoolean\u003e getDecryptCode(String pageCode, String tenantId,String userId,String decryptCode) {\n        Boolean delete \u003d stringRedisTemplate.delete(String.format(\"exportCode:pageCode:%s:tenantId:%s:userId:%s:decryptCode:%s\", pageCode, tenantId,userId,decryptCode));\n        return delete ? Result.data(delete) : Result.error(i18nMessage.resolveMessage(\"system.common.request.invalid\"));\n    }\n\n    @Override\n    public Optional\u003cSaasKnowledgeElement\u003e queryContentByCodeAndTenantId(String code, String tenantId) {\n        SaasKnowledgeElement knowledgeElement \u003d saasKnowledgeElementMapper\n                .selectOne(Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, tenantId).eq(SaasKnowledgeElement::getCode, code), false);\n        // Assert.notNull(knowledgeElement, \"system.common.request.invalid\");\n        return Optional.ofNullable(knowledgeElement);\n    }\n\n    @Override\n    public Result\u003cKnowledgeElementResp\u003e queryByCodeNoAuth(String code, Boolean edit, String tenantId) {\n        Optional\u003cSaasKnowledgeElement\u003e  elementOptional\u003dqueryInfoByCodeNoAuth(code,tenantId);\n        if (elementOptional.isEmpty()){\n            return Result.error(i18nMessage.resolveMessage(\"system.common.request.invalid\"));\n        }\n        return buildElementInfoNoAuth(elementOptional.get(),edit,tenantId);\n    }\n\n    @Override\n    public Optional\u003cSaasKnowledgeElement\u003e queryByCode(String code, String tenantId) {\n        // 记录查询日志，包括页面代码和租户ID\n        log.info(\"根据code查询空间页面详情,code:{},tenantId:{}\", code, tenantId);\n        // 使用MyBatis Plus的Lambda查询构造器构建查询条件，包括租户ID和页面代码，\n        // 并执行查询操作，结果是一个KbPage对象或null\n        SaasKnowledgeElement kbPage \u003d saasKnowledgeElementMapper.selectOne(Wrappers.lambdaQuery(SaasKnowledgeElement.class)\n                .eq(StrUtil.isNotEmpty(tenantId), SaasKnowledgeElement::getTenantId, tenantId)\n                .eq(SaasKnowledgeElement::getCode, code), false);\n\n        // 使用Optional.ofNullable包装查询结果，确保即使结果为null也能安全处理\n        return Optional.ofNullable(kbPage);\n    }\n\n    /**\n     * 根据主键id批量删除知识库元素\n     * @param ids 批量删除主键id集合\n     * @return 是否删除成功\n     */\n    @Override\n    public Result\u003cString\u003e delete(List\u003cInteger\u003e ids) {\n        log.info(\"批量删除知识库元素,pageSize:{}\", CollectionUtil.size(ids));\n        int ret \u003d saasKnowledgeElementMapper.deleteBatchIds(ids);\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.delete.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.delete.fail\"));\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e batchDelete(List\u003cInteger\u003e ids) {\n        log.info(\"批量删除知识库元素,数量:{},ID列表:{}\", ids.size(), ids);\n        if (CollUtil.isEmpty(ids)) {\n            return Result.error(\"删除ID列表不能为空\");\n        }\n        List\u003cSaasKnowledgeElement\u003e elementsToDelete \u003d saasKnowledgeElementMapper.selectBatchIds(ids);\n        Assert.notNull(elementsToDelete, \"system.common.request.invalid\");\n        String tenantId \u003d UserContextHolder.getTenantId();\n        SysUserInfo currentUser \u003d UserContextHolder.getCurrentUser();\n\n        // 验证所有元素的权限和删除条件\n        StringBuilder validationErrors \u003d new StringBuilder();\n        List\u003cSaasKnowledgeElement\u003e validElements \u003d new ArrayList\u003c\u003e();\n\n        for (SaasKnowledgeElement element : elementsToDelete) {\n            try {\n                // 1. 权限验证\n                if (!StrUtil.equalsIgnoreCase(element.getTenantId(), tenantId)) {\n                    validationErrors.append(\"ID[\").append(element.getId()).append(\"]数据无效; \");\n                    continue;\n                }\n                // 2. 文件夹检查\n                if (StrUtil.equalsIgnoreCase(element.getCategory(), KnowledgeElementCategory.DIRECTORY.getName())) {\n                    LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class)\n                            .eq(SaasKnowledgeElement::getTenantId, tenantId)\n                            .eq(SaasKnowledgeElement::getContainerId, element.getContainerId())\n                            .eq(SaasKnowledgeElement::getParentCode, element.getCode());\n                    if (saasKnowledgeElementMapper.exists(lambdaQueryWrapper)) {\n                        validationErrors.append(\"ID[\").append(element.getId()).append(\"]文件夹[\").append(element.getEleName()).append(\"]下存在文件,不允许删除; \");\n                        continue;\n                    }\n                } else {\n                    // 3. 状态检查\n                    ProcessStatusEnum processStatusEnum \u003d ProcessStatusEnum.parse(element.getProcessStatus());\n                    if (processStatusEnum \u003d\u003d ProcessStatusEnum.PROCESSING || processStatusEnum \u003d\u003d ProcessStatusEnum.EMBEDDED || processStatusEnum \u003d\u003d ProcessStatusEnum.EMBEDDING) {\n                        if (ChronoUnit.MINUTES.between(element.getCreateTime(), LocalDateTime.now()) \u003c 120) {\n                            validationErrors.append(\"ID[\").append(element.getId()).append(\"]正在处理中,不允许删除; \");\n                            continue;\n                        }\n                    }\n                }\n                validElements.add(element);\n            } catch (Exception e) {\n                log.error(\"验证元素失败,ID:{}\", element.getId(), e);\n                validationErrors.append(\"ID[\").append(element.getId()).append(\"]验证失败: \").append(e.getMessage()).append(\"; \");\n            }\n        }\n        if (CollUtil.isEmpty(validElements)) {\n            return Result.error(\"没有符合删除条件的元素: \" + validationErrors.toString());\n        }\n\n        List\u003cInteger\u003e validIds \u003d validElements.stream().map(SaasKnowledgeElement::getId).toList();\n        int deletedCount \u003d saasKnowledgeElementMapper.deleteBatchIds(validIds);\n        if (deletedCount \u003e 0) {\n            long totalSizeReleased \u003d 0L;\n            List\u003cString\u003e deletedNames \u003d new ArrayList\u003c\u003e();\n            Map\u003cString, List\u003cSaasKnowledgeElement\u003e\u003e containerElementsMap \u003d new HashMap\u003c\u003e();\n            for (SaasKnowledgeElement element : validElements) {\n                try {\n                    // 统计释放的空间大小\n                    if (element.getEleSize() !\u003d null) {\n                        totalSizeReleased +\u003d element.getEleSize();\n                    }\n                    deletedNames.add(element.getEleName());\n                    containerElementsMap.computeIfAbsent(element.getContainerId(), k -\u003e new ArrayList\u003c\u003e()).add(element);\n\n                    // 删除向量索引数据\n                    knowledgeElementDataService.deleteByDataId(tenantId, element.getContainerId(), element.getCode());\n\n                    if (KnowledgeElementTypes.PAGE.name().equals(element.getCategory())) {\n                        // 删除快照文件\n                        LambdaQueryWrapper\u003cSaasKnowledgeElementVersion\u003e versionQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElementVersion.class)\n                                .eq(SaasKnowledgeElementVersion::getPageCode, element.getCode())\n                                .eq(SaasKnowledgeElementVersion::getTenantId, tenantId);\n                        knowledgeElementVersionService.remove(versionQueryWrapper);\n                        // 删除配置向量\n                        LambdaQueryWrapper\u003cSaasKnowledgeConfigElement\u003e configQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeConfigElement.class)\n                                .eq(SaasKnowledgeConfigElement::getElementId, element.getCode())\n                                .eq(SaasKnowledgeConfigElement::getContainerId, element.getContainerId())\n                                .eq(SaasKnowledgeConfigElement::getTenantId, element.getTenantId());\n                        saasKnowledgeConfigElementService.remove(configQueryWrapper);\n                    }\n                } catch (Exception e) {\n                    log.error(\"清理元素数据失败,ID:{},名称:{}\", element.getId(), element.getEleName(), e);\n                }\n            }\n\n            // 批量释放知识库空间容量\n            if (totalSizeReleased \u003e 0) {\n                try {\n                    for (Map.Entry\u003cString, List\u003cSaasKnowledgeElement\u003e\u003e entry : containerElementsMap.entrySet()) {\n                        String containerId \u003d entry.getKey();\n                        long containerSizeReleased \u003d entry.getValue().stream()\n                                .mapToLong(e -\u003e e.getEleSize() !\u003d null ? e.getEleSize() : 0L)\n                                .sum();\n                        if (containerSizeReleased \u003e 0) {\n                            knowledgeContainerCapacityDataService.flushKnowledge(containerId, containerSizeReleased);\n                        }\n                    }\n                } catch (Exception e) {\n                    log.error(\"释放知识库容量失败,总大小:{}\", totalSizeReleased, e);\n                }\n            }\n            // 空间动态信息新增\n            try {\n                for (Map.Entry\u003cString, List\u003cSaasKnowledgeElement\u003e\u003e entry : containerElementsMap.entrySet()) {\n                    String containerId \u003d entry.getKey();\n                    List\u003cSaasKnowledgeElement\u003e containerElements \u003d entry.getValue();\n\n                    boolean needUpdateTrend \u003d containerElements.stream().anyMatch(element -\u003e {\n                        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e queryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n                        queryWrapper.eq(SaasKnowledgeContainer::getCode, containerId);\n                        queryWrapper.eq(SaasKnowledgeContainer::getTenantId, tenantId);\n                        SaasKnowledgeContainer container \u003d saasKnowledgeContainerMapper.selectOne(queryWrapper);\n                        return container !\u003d null\n                                \u0026\u0026 !ProcessStatusEnum.DRAFT.equals(ProcessStatusEnum.parse(element.getProcessStatus()))\n                                \u0026\u0026 container.getCategory().equals(KnowledgeCategory.COMMON.name());\n                    });\n                    if (needUpdateTrend) {\n                        SaasKnowledgeElement representativeElement \u003d containerElements.get(0);\n                        SaasKnowledgeElementCacheInfo cacheInfo \u003d this.get(containerId, tenantId);\n                        // 批量操作\n                        representativeElement.setEleName(String.format(\"批量删除%d个文件: %s等\",containerElements.size(),\n                                containerElements.stream().limit(3).map(SaasKnowledgeElement::getEleName).collect(Collectors.joining(\", \"))));\n\n                        saasKnowledgeElementTrendService.messageTrend(SaasKnowledgeElementTrendAddReq.of(currentUser, representativeElement,SaasKnowledgeElementEvent.DELETED, cacheInfo));\n                    }\n                }\n            } catch (Exception e) {\n                log.error(\"更新批量删除动态失败\", e);\n            }\n\n            log.info(\"批量删除完成,成功删除{}个元素,释放空间{}bytes,删除列表:{}\",deletedCount, totalSizeReleased, deletedNames);\n        }\n        if (deletedCount \u003d\u003d ids.size()) {\n            return Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.delete.success\"));\n        } else if (deletedCount \u003e 0) {\n            String message \u003d String.format(\"部分删除成功: 成功%d个,失败%d个。失败详情: %s\",deletedCount, ids.size() - deletedCount, validationErrors.toString());\n            return Result.error(message);\n        } else {\n            return Result.error(\"批量删除失败: \" + validationErrors.toString());\n        }\n    }\n\n    /**\n     * 根据主键id删除知识库元素\n     * @param id 主键id\n     * @return 是否删除成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e delete(Integer id) {\n        log.info(\"根据主键id删除知识库元素,id:{}\", id);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        SaasKnowledgeElement saasKnowledgeElement \u003d saasKnowledgeElementMapper.selectById(id);\n        Assert.notNull(saasKnowledgeElement, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(saasKnowledgeElement.getTenantId(), tenantId), \"system.common.request.invalid\");\n        LogContext.putVariable(\"name\", saasKnowledgeElement.getEleName());\n        KnowledgeElementCategory category \u003d KnowledgeElementCategory.getKnowledgeCategory(saasKnowledgeElement.getCategory());\n        LogContext.putVariable(\"type\", category.getDescription());\n        if (StrUtil.equalsIgnoreCase(saasKnowledgeElement.getCategory(), KnowledgeElementCategory.DIRECTORY.getName())) {\n            // 如果是文件夹，需要判断下面是否存在多个文件\n            LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, tenantId)\n                    .eq(SaasKnowledgeElement::getContainerId, saasKnowledgeElement.getContainerId())\n                    .eq(SaasKnowledgeElement::getParentCode, saasKnowledgeElement.getCode());\n            // Assert.isFalse(saasKnowledgeElementMapper.exists(lambdaQueryWrapper), \"文件夹[\" + saasKnowledgeElement.getEleName() + \"]下存在文件,不允许删除\");\n            Assert.isFalse(saasKnowledgeElementMapper.exists(lambdaQueryWrapper), i18nMessage.resolveMessage(\"knowledge.dataset.del.exist\", new String[]{saasKnowledgeElement.getEleName()}));\n        } else {\n            // 判断状态,正在处理中的文件不允许删除\n            ProcessStatusEnum processStatusEnum \u003d ProcessStatusEnum.parse(saasKnowledgeElement.getProcessStatus());\n            if (processStatusEnum \u003d\u003d ProcessStatusEnum.PROCESSING || processStatusEnum \u003d\u003d ProcessStatusEnum.EMBEDDED || processStatusEnum \u003d\u003d ProcessStatusEnum.EMBEDDING) {\n                // 判断创建日期是否超过2小时，如果超过，那么验证通过，直接删除,否则不允许删除\n                if (ChronoUnit.MINUTES.between(saasKnowledgeElement.getCreateTime(), LocalDateTime.now()) \u003c 120) {\n                    // 在2小时内的知识库，不允许删除\n                    throw new IllegalArgumentException(i18nMessage.resolveMessage(\"knowledge.dataset.del.process\"));\n                }\n\n            }\n        }\n        // 查询当前文档类型\n        int ret \u003d saasKnowledgeElementMapper.deleteById(id);\n        // 判断，如果是非文件夹的数据集，那么删除数据集的向量索引内容\n        if (ret \u003e 0) {\n            // 释放知识库的空间容量大小\n            knowledgeContainerCapacityDataService.flushKnowledge(saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getEleSize());\n            // 根据数据集code删除索引的数据\n            knowledgeElementDataService.deleteByDataId(tenantId, saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getCode());\n            if (KnowledgeElementTypes.PAGE.name().equals(saasKnowledgeElement.getCategory())){\n                // 删除快照文件\n                LambdaQueryWrapper\u003cSaasKnowledgeElementVersion\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElementVersion.class)\n                        .eq(SaasKnowledgeElementVersion::getPageCode, saasKnowledgeElement.getCode())\n                        .eq(SaasKnowledgeElementVersion::getTenantId, tenantId);\n                knowledgeElementVersionService.remove(lambdaQueryWrapper);\n                // 删除配置向量\n                LambdaQueryWrapper\u003cSaasKnowledgeConfigElement\u003e saasKnowledgeConfigContainerLambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeConfigElement.class)\n                        .eq(SaasKnowledgeConfigElement::getElementId, saasKnowledgeElement.getCode())\n                        .eq(SaasKnowledgeConfigElement::getContainerId, saasKnowledgeElement.getContainerId())\n                        .eq(SaasKnowledgeConfigElement::getTenantId, saasKnowledgeElement.getTenantId());\n                saasKnowledgeConfigElementService.remove(saasKnowledgeConfigContainerLambdaQueryWrapper);\n            }\n            // 通用知识库文档列入 草稿状态不列入动态信息\n            String containerId \u003d saasKnowledgeElement.getContainerId();\n            LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e queryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            queryWrapper.eq(SaasKnowledgeContainer::getCode, containerId);\n            queryWrapper.eq(SaasKnowledgeContainer::getTenantId, tenantId);\n            SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectOne(queryWrapper);\n            if (!ProcessStatusEnum.DRAFT.equals(ProcessStatusEnum.parse(saasKnowledgeElement.getProcessStatus()))\n                    \u0026\u0026 saasKnowledgeContainer.getCategory().equals(KnowledgeCategory.COMMON.name())){\n                // 空间动态信息新增\n                SaasKnowledgeElementCacheInfo saasKnowledgeElementCacheInfo \u003d this.get(saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getTenantId());\n                saasKnowledgeElementTrendService.messageTrend(SaasKnowledgeElementTrendAddReq.of(UserContextHolder.getCurrentUser(), saasKnowledgeElement, SaasKnowledgeElementEvent.DELETED, saasKnowledgeElementCacheInfo));\n            }\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.delete.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.delete.fail\"));\n    }\n\n    @Override\n    public void deleteByCode(String tenantId, String containerId, List\u003cString\u003e codes) {\n        log.info(\"删除知识库文件，code:{}，tenant:{}\", codes, tenantId);\n        for (String code : codes) {\n            int ret \u003d saasKnowledgeElementMapper.delete(Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, tenantId).eq(SaasKnowledgeElement::getCode, code));\n            if (ret \u003e 0) {\n                // 根据数据集code删除索引的数据\n                knowledgeElementDataService.deleteByDataId(tenantId, containerId, code);\n            }\n        }\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e reset(Integer id) {\n        log.info(\"根据主键id重置知识库元素,id:{}\", id);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        SaasKnowledgeElement saasKnowledgeElement \u003d saasKnowledgeElementMapper.selectById(id);\n        Assert.notNull(saasKnowledgeElement, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(saasKnowledgeElement.getTenantId(), tenantId), \"system.common.request.invalid\");\n        LogContext.putVariable(\"name\", saasKnowledgeElement.getEleName());\n        KnowledgeElementCategory category \u003d KnowledgeElementCategory.getKnowledgeCategory(saasKnowledgeElement.getCategory());\n        LogContext.putVariable(\"type\", category.getDescription());\n        // 判断状态,正在处理中的文件不允许删除\n        ProcessStatusEnum processStatusEnum \u003d ProcessStatusEnum.parse(saasKnowledgeElement.getProcessStatus());\n        // 如果已经是待处理或者成功的状态，那么不用二次重置处理\n        if (processStatusEnum \u003d\u003d ProcessStatusEnum.SUCCESS || processStatusEnum \u003d\u003d ProcessStatusEnum.INIT) {\n            return Result.data(\"SUCCESS\");\n        }\n        // 非处理失败的情况下，给一个间隔\n        if (processStatusEnum !\u003d ProcessStatusEnum.FAILURE) {\n            // 计算一下时间，避免误操作\n            if (ChronoUnit.MINUTES.between(saasKnowledgeElement.getModifierTime(), LocalDateTime.now()) \u003c 0.5) {\n                // 在5分钟内，不允许重置\n                throw new IllegalArgumentException(i18nMessage.resolveMessage(\"knowledge.dataset.file.status.reset.process\"));\n            }\n        }\n        // 更新状态\n        SaasKnowledgeElement element \u003d new SaasKnowledgeElement();\n        element.setId(id);\n        element.setModifierTime(LocalDateTime.now());\n        element.setProcessStatus(ProcessStatusEnum.INIT.getCode());\n        // 判断文本的元素类型，如果是wiki类型，那么不需要重置地址,这样在向量化的过程中使用wiki转换过的markdown数据\n        if (!StrUtil.equalsIgnoreCase(saasKnowledgeElement.getCategory(), KnowledgeElementCategory.VIRTUAL_FILE.getName())) {\n            if (StrUtil.isNotBlank(saasKnowledgeElement.getElePreviewUrl())){\n                // 把原始的地址重置回去\n                element.setEleUrl(saasKnowledgeElement.getElePreviewUrl());\n            }\n        }\n        int ret \u003d saasKnowledgeElementMapper.updateById(element);\n        if (ret \u003e 0) {\n            // 根据数据集code删除索引的数据\n            knowledgeElementDataService.deleteByDataId(tenantId, saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getCode());\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"knowledge.dataset.file.status.reset\"))\n                : Result.error(i18nMessage.resolveMessage(\"knowledge.dataset.file.status.reset.fail\"));\n    }\n\n    /**\n     * 根据id查询知识库元素实体详情\n     * @param id 主键id\n     * @return 知识库元素的Optional\n     */\n    @Override\n    public Optional\u003cSaasKnowledgeElement\u003e queryInfoById(Integer id) {\n        log.info(\"根据请求id查询知识库元素实体详情,id:{}\", id);\n        SaasKnowledgeElement saasKnowledgeElement \u003d saasKnowledgeElementMapper.selectById(id);\n        if (saasKnowledgeElement !\u003d null) {\n            return Optional.of(saasKnowledgeElement);\n        }\n        return Optional.empty();\n    }\n\n    @Override\n    public void updatePreviewUrl(Integer id, String previewUrl) {\n        SaasKnowledgeElement knowledgeElement \u003d new SaasKnowledgeElement();\n        knowledgeElement.setId(id);\n        knowledgeElement.setModifierTime(LocalDateTime.now());\n        knowledgeElement.setElePreviewUrl(previewUrl);\n        saasKnowledgeElementMapper.updateById(knowledgeElement);\n    }\n\n    @Override\n    public Optional\u003cSaasKnowledgeElement\u003e queryInfoByCode(String code) {\n        SaasKnowledgeElement knowledgeElement \u003d saasKnowledgeElementMapper\n                .selectOne(Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, UserContextHolder.getTenantId()).eq(SaasKnowledgeElement::getCode, code), false);\n        // Assert.notNull(knowledgeElement, \"system.common.request.invalid\");\n        return Optional.ofNullable(knowledgeElement);\n    }\n    @Override\n    public Optional\u003cSaasKnowledgeElement\u003e queryInfoByCodeNoAuth(String code, String tenantId) {\n        SaasKnowledgeElement knowledgeElement \u003d saasKnowledgeElementMapper\n                .selectOne(Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, tenantId).eq(SaasKnowledgeElement::getCode, code), false);\n        // Assert.notNull(knowledgeElement, \"system.common.request.invalid\");\n        return Optional.ofNullable(knowledgeElement);\n    }\n\n    @Override\n    public void deleteByContainerCode(String containerId, String tenantId) {\n        log.info(\"删除容器下的所有元素,containerId:{},tenantId:{}\", containerId, tenantId);\n        LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, tenantId)\n                .eq(SaasKnowledgeElement::getContainerId, containerId);\n        saasKnowledgeElementMapper.delete(lambdaQueryWrapper);\n    }\n\n    /**\n     * 校验请求id是否非法\n     * @param id 主键id\n     * @return 是否存在\n     */\n    @Override\n    public boolean checkIdExists(Integer id) {\n        log.info(\"校验请求Id是否存在,id:{}\", id);\n        return saasKnowledgeElementMapper.selectById(id) !\u003d null;\n    }\n\n    @Override\n    public void resetStatus(SaasKnowledgeElement element, ProcessStatusEnum statusEnum) {\n        log.info(\"知识重调\");\n        if (element\u003d\u003dnull || element.getId()\u003d\u003dnull){\n            log.warn(\"知识重调失败，元素信息为空\");\n            return;\n        }\n        SaasKnowledgeElement knowledgeElement \u003d new SaasKnowledgeElement();\n        knowledgeElement.setId(element.getId());\n        knowledgeElement.setProcessStatus(statusEnum.getCode());\n        knowledgeElement.setModifierTime(LocalDateTime.now());\n        // 修改地址preview地址为element,doc/docx格式下会重新解析\n        knowledgeElement.setEleUrl(element.getElePreviewUrl());\n        saasKnowledgeElementMapper.updateById(knowledgeElement);\n    }\n\n    @Override\n    public void updateStatus(Integer id, ProcessStatusEnum statusEnum) {\n        SaasKnowledgeElement knowledgeElement \u003d new SaasKnowledgeElement();\n        knowledgeElement.setId(id);\n        knowledgeElement.setProcessStatus(statusEnum.getCode());\n        knowledgeElement.setModifierTime(LocalDateTime.now());\n        saasKnowledgeElementMapper.updateById(knowledgeElement);\n    }\n\n    @Override\n    public void updateEmbeddingStatus(Integer id, KnowledgeEmbeddingStatusReq embeddingStatusReq) {\n        SaasKnowledgeElement knowledgeElement \u003d new SaasKnowledgeElement();\n        knowledgeElement.setId(id);\n        knowledgeElement.setModifierTime(LocalDateTime.now());\n        knowledgeElement.setProcessStatus(embeddingStatusReq.getStatusEnum().getCode());\n        if (embeddingStatusReq.getPageCount() !\u003d null \u0026\u0026 embeddingStatusReq.getPageCount() \u003e 0) {\n            // 处理完成\n            knowledgeElement.setProcessCount(embeddingStatusReq.getPageCount());\n            knowledgeElement.setPageCount(embeddingStatusReq.getPageCount());\n        }\n        if (StrUtil.isNotBlank(embeddingStatusReq.getConvertMarkdownFileUrl())) {\n            // 转换地址不为空\n            knowledgeElement.setEleUrl(embeddingStatusReq.getConvertMarkdownFileUrl());\n        }\n        if (StrUtil.isNotBlank(embeddingStatusReq.getPreviewUrl())) {\n            knowledgeElement.setElePreviewUrl(embeddingStatusReq.getPreviewUrl());\n        }\n        saasKnowledgeElementMapper.updateById(knowledgeElement);\n    }\n\n    @Override\n    public void updateProcessCount(Integer id, int processPage, int pageCount) {\n        SaasKnowledgeElement knowledgeElement \u003d new SaasKnowledgeElement();\n        knowledgeElement.setId(id);\n        knowledgeElement.setModifierTime(LocalDateTime.now());\n        if (processPage \u003e 0) {\n            knowledgeElement.setPageCount(pageCount);\n        }\n        if (pageCount \u003e 0) {\n            knowledgeElement.setProcessCount(processPage);\n        }\n        log.info(\"更新处理进度,id:{},processPage:{},pageCount:{}\", id, processPage, pageCount);\n        if (processPage \u003e 0 \u0026\u0026 pageCount \u003e 0) {\n            log.info(\"exchange,id:{},processPage:{},pageCount:{}\", id, processPage, pageCount);\n            // 如果页码相等，status\u003d完成\n            knowledgeElementProcessService.exchange(id, processPage, pageCount);\n        }\n        // 如果页码相等，status\u003d完成\n        if (processPage \u003d\u003d pageCount) {\n            knowledgeElement.setProcessStatus(ProcessStatusEnum.SUCCESS.getCode());\n        }\n        saasKnowledgeElementMapper.updateById(knowledgeElement);\n    }\n\n    @Override\n    public Result\u003cString\u003e updateContent(KnowledgeElementContentUpdateReq issueReq) {\n        // 获取当前用户信息\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 根据页面代码和租户ID查询页面信息\n        Optional\u003cSaasKnowledgeElement\u003e saasKnowledgeElementOptional \u003d this.queryByCode(issueReq.getCode(), sysUserInfo.getTenantId());\n        if (saasKnowledgeElementOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        // 获取查询到的页面记录\n        SaasKnowledgeElement record \u003d saasKnowledgeElementOptional.get();\n        // 创建一个新的KbPage对象用于更新\n        SaasKnowledgeElement saasKnowledgeElement \u003d issueReq.update(record);\n        // 草稿状态更新标题\n        // 更新标题和过期时间\n        issueReq.updatePageTitle(saasKnowledgeElement);\n        int ret \u003d saasKnowledgeElementMapper.updateById(saasKnowledgeElement);\n        if (ret \u003e 0) {\n            // 版本存在两种情况，一种是当前的页面本身就是待处理状态，那么就一直更新当前版本的内容，版本号不更新\n            if (Objects.equals(record.getProcessStatus(), ProcessStatusEnum.DRAFT.getCode())){\n                // 草稿状态更新版本信息\n                this.update(record, issueReq, sysUserInfo, KnowledgeElementVersionStatus.DEFAULT);\n            } else if (Objects.equals(record.getProcessStatus(), ProcessStatusEnum.SUCCESS.getCode())) {\n                // 更新一下标题、过期时间、样式 作为版本副本\n                issueReq.updatePageTitle(saasKnowledgeElement);\n                // 如果是已经发布的状态 新增一个版本作为当前页面版本的草稿状态\n                this.merge(saasKnowledgeElement, issueReq.getAttachments(), sysUserInfo, KnowledgeElementVersionStatus.DEFAULT);\n            }\n            // 通用知识库文档列入 草稿状态不列入动态信息\n            String containerId \u003d saasKnowledgeElement.getContainerId();\n            LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e queryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            queryWrapper.eq(SaasKnowledgeContainer::getCode, containerId);\n            queryWrapper.eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getTenantId());\n            SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectOne(queryWrapper);\n            if (!ProcessStatusEnum.DRAFT.equals(ProcessStatusEnum.parse(record.getProcessStatus()))\n            \u0026\u0026 saasKnowledgeContainer.getCategory().equals(KnowledgeCategory.COMMON.name())){\n                // 空间动态信息新增\n                SaasKnowledgeElementCacheInfo saasKnowledgeElementCacheInfo \u003d this.get(saasKnowledgeElement.getContainerId(), saasKnowledgeElement.getTenantId());\n                saasKnowledgeElementTrendService.messageTrend(SaasKnowledgeElementTrendAddReq.of(UserContextHolder.getCurrentUser(), saasKnowledgeElement, SaasKnowledgeElementEvent.UPDATED, saasKnowledgeElementCacheInfo));\n            }\n        }\n        return i18nMessage.update(ret);\n    }\n\n    @Override\n    public Result\u003cString\u003e issue(KnowledgeElementContentUpdateReq issueReq, boolean isIssue) {\n        // 记录发布空间页面的日志\n        String code \u003d issueReq.getCode();\n        log.info(\"当前更新的页面变为为,code:{}\", code);\n        // 获取当前用户信息\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 根据页面代码和租户ID查询页面信息\n        Optional\u003cSaasKnowledgeElement\u003e saasKnowledgeElementOptional \u003d this.queryByCode(issueReq.getCode(), sysUserInfo.getTenantId());\n        if (saasKnowledgeElementOptional.isEmpty()){\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        // 获取查询到的页面记录\n        SaasKnowledgeElement data \u003d saasKnowledgeElementOptional.get();\n        // 确保 DEFAULT 版本存在\n        ensureDefaultVersionExists(data, issueReq, sysUserInfo);\n        Long contentSize \u003d 0L;\n        // 发布逻辑：更新状态为已发布\n        if (isIssue) {\n            data.setProcessStatus(ProcessStatusEnum.INIT.getCode());\n            data.setModifierTime(LocalDateTime.now());\n            data.setModifier(sysUserInfo.getCode());\n            data.setEleName(issueReq.getTitle());\n            if (DocTimeStatus.NEVER_EXPIRE.getCode() \u003d\u003d issueReq.getNeverExpire()){\n                data.setNeverExpire(issueReq.getNeverExpire());\n            }else {\n                data.setNeverExpire(issueReq.getNeverExpire());\n                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n                String startTimeStr \u003d issueReq.getStartTime();\n                String endTimeStr \u003d issueReq.getEndTime();\n                LocalDateTime start \u003d null;\n                LocalDateTime end \u003d null;\n                try {\n                    if (startTimeStr !\u003d null \u0026\u0026 !startTimeStr.isEmpty()) {\n                        start \u003d LocalDateTime.parse(startTimeStr, formatter);\n                    }\n                    if (endTimeStr !\u003d null \u0026\u0026 !endTimeStr.isEmpty()) {\n                        end \u003d LocalDateTime.parse(endTimeStr, formatter);\n                    }\n                } catch (DateTimeParseException e) {\n                    // 这里可以记录日志或抛出自定义异常\n                     log.error(\"时间格式错误\", e);\n                }\n                data.setStartTime(start);\n                data.setEndTime(end);\n            }\n            // 在发布时计算文件大小\n            contentSize \u003d calculateContentSize(issueReq.getContentMarked());\n            data.setEleSize(contentSize);\n        }\n        // 如果是发布状态，那么需要更新版本信息\n        if (isIssue \u0026\u0026 contentSize\u003e0){\n            // 校验容器大小\n            knowledgeContainerCapacityDataService.validateContainerCapacity(data.getContainerId(), contentSize);\n        }\n        // 更新数据库\n        int ret \u003d saasKnowledgeElementMapper.updateById(data);\n        if (ret \u003e 0) {\n            // 更新页面内容数据\n            SaasKnowledgeElementVersion updateEntity \u003d new SaasKnowledgeElementVersion();\n            updateEntity.setContentMarked(issueReq.getContentMarked());\n            updateEntity.setContent(issueReq.getContent());\n            updateEntity.setStatus(KnowledgeElementVersionStatus.ISSUED.getCode());\n            LambdaQueryWrapper\u003cSaasKnowledgeElementVersion\u003e queryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            queryWrapper.eq(SaasKnowledgeElementVersion::getPageCode, data.getCode())\n                    .eq(SaasKnowledgeElementVersion::getStatus, KnowledgeElementVersionStatus.DEFAULT.getCode())\n                    .eq(SaasKnowledgeElementVersion::getTenantId, data.getTenantId());\n            saasKnowledgeElementVersionMapper.update(updateEntity, queryWrapper);\n            // 清理旧es数据\n            boolean re \u003d knowledgeElementDataService.deleteByDataId(sysUserInfo.getTenantId(),data.getContainerId(), code);\n            log.info(\"数据库删除成功,ret:{},向量删除:{}\", ret, re);\n            // 空间动态信息新增\n            // 通用知识库文档列入 草稿状态不列入动态信息\n            String containerId \u003d data.getContainerId();\n            LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerLambdaQueryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            saasKnowledgeContainerLambdaQueryWrapper.eq(SaasKnowledgeContainer::getCode, containerId);\n            saasKnowledgeContainerLambdaQueryWrapper.eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getTenantId());\n            SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectOne(saasKnowledgeContainerLambdaQueryWrapper);\n            if(saasKnowledgeContainer.getCategory().equals(KnowledgeCategory.COMMON.name())){\n                SaasKnowledgeElementCacheInfo saasKnowledgeElementCacheInfo \u003d this.get(data.getContainerId(), data.getTenantId());\n                // 第一次发布是发布后续是修改\n                LambdaQueryWrapper\u003cSaasKnowledgeElementVersion\u003e saasKnowledgeElementVersionLambdaQueryWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n                saasKnowledgeElementVersionLambdaQueryWrapper.eq(SaasKnowledgeElementVersion::getPageCode, data.getCode());\n                saasKnowledgeElementVersionLambdaQueryWrapper.eq(SaasKnowledgeElementVersion::getTenantId, sysUserInfo.getTenantId());\n                int size \u003d saasKnowledgeElementVersionMapper.selectList(saasKnowledgeElementVersionLambdaQueryWrapper).size();\n                if (size \u003e 1 ){\n                    saasKnowledgeElementTrendService.messageTrend(SaasKnowledgeElementTrendAddReq.of(UserContextHolder.getCurrentUser(), data,\n                            SaasKnowledgeElementEvent.UPDATED, saasKnowledgeElementCacheInfo));\n                }else {\n                    saasKnowledgeElementTrendService.messageTrend(SaasKnowledgeElementTrendAddReq.of(UserContextHolder.getCurrentUser(), data,\n                            SaasKnowledgeElementEvent.ISSUED, saasKnowledgeElementCacheInfo));\n                }\n\n            }\n        }\n        return i18nMessage.update(ret);\n    }\n\n    /**\n     * 计算内容大小（带详细调试信息）\n     * @param content 原始内容\n     * @return 内容大小（字节）\n     */\n    private Long calculateContentSize(String content) {\n        if (StrUtil.isBlank(content)) {\n            log.info(\"内容为空，返回大小: 0\");\n            return 0L;\n        }\n\n        // 字符数量\n        int charCount \u003d content.length();\n\n        // UTF-8字节数\n        byte[] utf8Bytes \u003d content.getBytes(StandardCharsets.UTF_8);\n        long utf8Size \u003d utf8Bytes.length;\n\n        // 默认编码字节数（用于对比）\n        byte[] defaultBytes \u003d content.getBytes();\n        long defaultSize \u003d defaultBytes.length;\n\n        // 详细日志\n        log.info(\"\u003d\u003d\u003d 内容大小计算详情 \u003d\u003d\u003d\");\n        log.info(\"字符数量: {}\", charCount);\n        log.info(\"UTF-8字节数: {} ({} KB)\", utf8Size, utf8Size / 1024.0);\n        log.info(\"默认编码字节数: {} ({} KB)\", defaultSize, defaultSize / 1024.0);\n        log.info(\"内容类型分析:\");\n        log.info(\"- 是否包含HTML标签: {}\", content.contains(\"\u003c\") \u0026\u0026 content.contains(\"\u003e\"));\n        log.info(\"- 是否包含中文: {}\", content.matches(\".*[\\u4e00-\\u9fa5].*\"));\n        log.info(\"- 内容开头100字符: {}\",\n                content.length() \u003e 100 ? content.substring(0, 100) : content);\n\n        return utf8Size;\n    }\n\n    /**\n     * 确保存在 DEFAULT 版本（UPSERT 逻辑）\n     * 如果不存在则创建，存在则不处理\n     */\n    private void ensureDefaultVersionExists(SaasKnowledgeElement data,\n                                            KnowledgeElementContentUpdateReq issueReq,\n                                            SysUserInfo sysUserInfo) {\n        // 检查是否存在 DEFAULT 版本\n        LambdaQueryWrapper\u003cSaasKnowledgeElementVersion\u003e checkWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n        checkWrapper.eq(SaasKnowledgeElementVersion::getPageCode, data.getCode())\n                .eq(SaasKnowledgeElementVersion::getStatus, KnowledgeElementVersionStatus.DEFAULT.getCode())\n                .eq(SaasKnowledgeElementVersion::getTenantId, data.getTenantId());\n\n        Long count \u003d saasKnowledgeElementVersionMapper.selectCount(checkWrapper);\n\n        // 如果不存在 DEFAULT 版本，则创建一个\n        if (count \u003d\u003d 0) {\n            // 查询已发布的最大版本号\n            LambdaQueryWrapper\u003cSaasKnowledgeElementVersion\u003e queryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElementVersion.class)\n                    .eq(SaasKnowledgeElementVersion::getTenantId, data.getTenantId())\n                    .eq(SaasKnowledgeElementVersion::getPageCode, issueReq.getCode())\n                    .eq(SaasKnowledgeElementVersion::getStatus, KnowledgeElementVersionStatus.ISSUED.getCode());\n            queryWrapper.select(SaasKnowledgeElementVersion::getVersionNo);\n            List\u003cSaasKnowledgeElementVersion\u003e issuedVersions \u003d saasKnowledgeElementVersionMapper.selectList(queryWrapper);\n            int maxVersionNo \u003d issuedVersions.stream()\n                    .map(SaasKnowledgeElementVersion::getVersionNo)\n                    .max(Integer::compareTo)\n                    .orElse(0); // 没有已发布版本则为0\n            int newVersionNo \u003d maxVersionNo + 1;\n            SaasKnowledgeElementVersion record \u003d new SaasKnowledgeElementVersion();\n            record.setVersionNo(newVersionNo);\n            record.setTitle(issueReq.getTitle());\n            record.setDescription(data.getConfig());\n            record.setUserCode(sysUserInfo.getCode());\n            record.setContent(issueReq.getContent());\n            record.setContentMarked(issueReq.getContentMarked());\n            record.setPageCode(issueReq.getCode());\n            record.setTenantId(sysUserInfo.getTenantId());\n            record.setCreator(sysUserInfo.getCode());\n            record.setCreateTime(LocalDateTime.now());\n            record.setModifier(sysUserInfo.getCode());\n            record.setModifierTime(LocalDateTime.now());\n            record.setStatus(KnowledgeElementVersionStatus.DEFAULT.getCode());\n            record.setCode(IdUtil.getSnowflakeNextIdStr());\n            if (CollUtil.isNotEmpty(issueReq.getAttachments())) {\n                record.setAttachmentCode(CollUtil.join(issueReq.getAttachments(), StrUtil.COMMA));\n            }\n            log.info(\"生成一个新的版本号，versionNo:{},versionCode:{}\", record.getVersionNo());\n            // insert\n            int ret \u003d saasKnowledgeElementVersionMapper.insert(record);\n            log.info(\"频繁发布新增默认版本,结果ret:{}\", ret);\n        }\n    }\n\n    @Override\n    public void update(SaasKnowledgeElement saasKnowledgeElement, KnowledgeElementContentUpdateReq knowledgeElementContentUpdateReq, SysUserInfo sysUserInfo, KnowledgeElementVersionStatus status) {\n        // 查询指定页面信息\n        LambdaQueryWrapper\u003cSaasKnowledgeElementVersion\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElementVersion.class)\n                .eq(SaasKnowledgeElementVersion::getTenantId, saasKnowledgeElement.getTenantId())\n                .eq(SaasKnowledgeElementVersion::getPageCode, saasKnowledgeElement.getCode());\n        SaasKnowledgeElementVersion record \u003d new SaasKnowledgeElementVersion();\n        record.setAttachmentCode(CollUtil.join(knowledgeElementContentUpdateReq.getAttachments(), StrUtil.COMMA));\n        record.setDescription(saasKnowledgeElement.getConfig());\n        record.setTitle(saasKnowledgeElement.getEleName());\n        record.setContent(knowledgeElementContentUpdateReq.getContent());\n        record.setContentMarked(knowledgeElementContentUpdateReq.getContentMarked());\n        record.setModifierTime(LocalDateTime.now());\n        record.setCode(IdUtil.getSnowflakeNextIdStr());\n        // 状态\n        record.setStatus(status.name());\n        // 更新当前版本\n        saasKnowledgeElementVersionMapper.update(record, lambdaQueryWrapper);\n    }\n\n    @Override\n    public Result\u003cString\u003e updateOrIssue(KnowledgeElementContentUpdateReq issueReq) {\n        // 页面组件\n        String lockKey \u003d KbCacheConst.KB_LOCK_PAGE_UPDATE + issueReq.getCode();\n        RLock rLock \u003d redissonClient.getLock(lockKey);\n        try {\n            // 尝试获取锁，等待时间和持有时间均为10秒\n            if (rLock.tryLock(10, 10, TimeUnit.SECONDS)) {\n                issueReq.html2Markdown();\n                if (StrUtil.equalsIgnoreCase(issueReq.getOperateType(), \"update\")) {\n                    return this.updateContent(issueReq);\n                } else if (StrUtil.equalsIgnoreCase(issueReq.getOperateType(), \"issue\")) {\n                    return this.issue(issueReq, true);\n                }\n            }\n        } catch (InterruptedException e) {\n            // 如果获取锁失败，记录日志\n            log.info(\"page version number increment。get lock failed...message:{}\", e.getMessage(), e);\n        } finally {\n            // 释放分布式锁\n            if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                rLock.unlock();\n                log.info(\"free comment lock successful...\");\n            }\n        }\n\n        return Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n\n    @Override\n    public Map\u003cString, SaasKnowledgeElement\u003e listPageCountByCodes(List\u003cString\u003e dataIds, String tenantId) {\n        if (CollUtil.isEmpty(dataIds) || StrUtil.isBlank(tenantId)) {\n            return Map.of();\n        }\n        LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d\n                Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, tenantId).in(SaasKnowledgeElement::getCode, dataIds);\n        lambdaQueryWrapper.select(SaasKnowledgeElement::getCode, SaasKnowledgeElement::getPageCount, SaasKnowledgeElement::getCreateTime);\n        List\u003cSaasKnowledgeElement\u003e elements \u003d saasKnowledgeElementMapper.selectList(lambdaQueryWrapper);\n        if (CollUtil.isNotEmpty(elements)) {\n            return elements.stream().collect(Collectors.toMap(SaasKnowledgeElement::getCode, s -\u003e s));\n        }\n        return Map.of();\n    }\n\n    @Override\n    public DataSetChunkInfo buildChunkInfo(double[] vector, String chunkText, SaasKnowledgeElement element, int line, Map\u003cString, Integer\u003e chunkMeta) {\n        DataSetChunkInfo chunkInfo \u003d new DataSetChunkInfo();\n        chunkInfo.setVector(vector);\n        chunkInfo.setContent(chunkText);\n        chunkInfo.setYear(element.getYear());\n        chunkInfo.setContainerId(element.getContainerId());\n        chunkInfo.setTopic(element.getTopic());\n        DocTimeStatus docTimeStatus \u003d DocTimeStatus.parse(element.getNeverExpire());\n        if (docTimeStatus \u003d\u003d DocTimeStatus.NEVER_EXPIRE) {\n            chunkInfo.setTimeStatus(docTimeStatus.getCode());\n            chunkInfo.setStartTime(0L);\n            chunkInfo.setEndTime(0L);\n        } else if (docTimeStatus \u003d\u003d DocTimeStatus.TIME_EXPIRE) {\n            chunkInfo.setTimeStatus(docTimeStatus.getCode());\n            chunkInfo.setStartTime(element.getStartTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\n            chunkInfo.setEndTime(element.getEndTime().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\n        }\n        chunkInfo.setCategory(DataSetChunkType.ORIGINAL.getName());\n        chunkInfo.setCreateTime(LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\n        chunkInfo.setDataId(element.getCode());\n        // i是从下标0开始的，因此需要+1\n        String key \u003d Objects.toString(line + 1, \"1\");\n        int page \u003d Integer.parseInt(Objects.toString(chunkMeta.get(key), \"1\"));\n        chunkInfo.setPage(page);\n        chunkInfo.setParagraphId(md5.digestHex(chunkInfo.getContainerId() + chunkInfo.getDataId() + page));\n        chunkInfo.setId(md5.digestHex(chunkInfo.getParagraphId() + IdUtil.getSnowflakeNextIdStr()));\n        return chunkInfo;\n    }\n\n    @Override\n    public void merge(SaasKnowledgeElement saasKnowledgeElement, List\u003cString\u003e attachmentCodes, SysUserInfo sysUserInfo, KnowledgeElementVersionStatus status) {\n        String lockKey \u003d StrUtil.format(KbCacheConst.KB_LOCK_PAGE_VERSION, saasKnowledgeElement.getCode());\n        RLock rLock \u003d redissonClient.getLock(lockKey);\n        try {\n            // 尝试获取锁，等待时间和持有时间均为10秒\n            if (rLock.tryLock(10, 10, TimeUnit.SECONDS)) {\n                // 查询指定页面信息，只和页面关联\n                LambdaQueryWrapper\u003cSaasKnowledgeElementVersion\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElementVersion.class)\n                        .eq(SaasKnowledgeElementVersion::getTenantId, saasKnowledgeElement.getTenantId())\n                        .eq(SaasKnowledgeElementVersion::getPageCode, saasKnowledgeElement.getCode())\n                        .eq(SaasKnowledgeElementVersion::getStatus, KnowledgeElementVersionStatus.DEFAULT.getCode());\n                lambdaQueryWrapper.select(SaasKnowledgeElementVersion::getId, SaasKnowledgeElementVersion::getCode);\n                SaasKnowledgeElementVersion pageVersion \u003d saasKnowledgeElementVersionMapper.selectOne(lambdaQueryWrapper, false);\n                SaasKnowledgeElementVersion record \u003d new SaasKnowledgeElementVersion();\n                if (pageVersion !\u003d null) {\n                    // 存在，那么直接更新\n                    record.setAttachmentCode(CollUtil.join(attachmentCodes, StrUtil.COMMA));\n                    record.setTitle(saasKnowledgeElement.getEleName());\n                    record.setDescription(saasKnowledgeElement.getConfig());\n                    // 判断page类型，如果是excel，存储到OSS上面，避免数据太多，超过DB字段的上限。\n                    // dealContent(kbPage, versionCode, record, sysUserInfo);\n                    record.setContent(saasKnowledgeElement.getContent());\n                    record.setContentMarked(saasKnowledgeElement.getContentMarked());\n                    record.setId(pageVersion.getId());\n                    record.setModifierTime(LocalDateTime.now());\n                    record.setModifier(sysUserInfo.getCode());\n                    saasKnowledgeElementVersionMapper.updateById(record);\n                } else {\n                    // 查询已发布的最大版本号\n                    LambdaQueryWrapper\u003cSaasKnowledgeElementVersion\u003e queryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElementVersion.class)\n                            .eq(SaasKnowledgeElementVersion::getTenantId, saasKnowledgeElement.getTenantId())\n                            .eq(SaasKnowledgeElementVersion::getPageCode, saasKnowledgeElement.getCode())\n                            .eq(SaasKnowledgeElementVersion::getStatus, KnowledgeElementVersionStatus.ISSUED.getCode());\n                    queryWrapper.select(SaasKnowledgeElementVersion::getVersionNo);\n                    List\u003cSaasKnowledgeElementVersion\u003e issuedVersions \u003d saasKnowledgeElementVersionMapper.selectList(queryWrapper);\n                    int maxVersionNo \u003d issuedVersions.stream()\n                            .map(SaasKnowledgeElementVersion::getVersionNo)\n                            .max(Integer::compareTo)\n                            .orElse(0); // 没有已发布版本则为0\n                    int newVersionNo \u003d maxVersionNo + 1;\n                    record.setVersionNo(newVersionNo);\n                    record.setTitle(saasKnowledgeElement.getEleName());\n                    record.setDescription(saasKnowledgeElement.getConfig());\n                    record.setUserCode(sysUserInfo.getCode());\n                    record.setContent(saasKnowledgeElement.getContent());\n                    record.setContentMarked(saasKnowledgeElement.getContentMarked());\n                    record.setPageCode(saasKnowledgeElement.getCode());\n                    record.setTenantId(sysUserInfo.getTenantId());\n                    record.setCreator(sysUserInfo.getCode());\n                    record.setCreateTime(LocalDateTime.now());\n                    record.setModifier(sysUserInfo.getCode());\n                    record.setModifierTime(LocalDateTime.now());\n                    record.setStatus(status.name());\n                    record.setCode(IdUtil.getSnowflakeNextIdStr());\n                    if (CollUtil.isNotEmpty(attachmentCodes)) {\n                        record.setAttachmentCode(CollUtil.join(attachmentCodes, StrUtil.COMMA));\n                    }\n                    log.info(\"生成一个新的版本号，versionNo:{},versionCode:{}\", record.getVersionNo());\n                    // insert\n                    int ret \u003d saasKnowledgeElementVersionMapper.insert(record);\n                    log.info(\"新增页面版本,ret:{}\", ret);\n                }\n            }\n        } catch (InterruptedException e) {\n            // 如果获取锁失败，记录日志\n            log.info(\"page version number increment。get lock failed...message:{}\", e.getMessage(), e);\n        } finally {\n            // 释放分布式锁\n            if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                rLock.unlock();\n                log.info(\"free comment lock successful...\");\n            }\n        }\n    }\n\n    /**\n     * 对象转换Function\n     */\n    private static class SaasKnowledgeElementApplyFunction implements Function\u003cSaasKnowledgeElement, KnowledgeElementResp\u003e {\n\n        @Override\n        public KnowledgeElementResp apply(SaasKnowledgeElement saasKnowledgeElement) {\n            KnowledgeElementResp knowledgeElementResp \u003d new KnowledgeElementResp();\n            BeanUtils.copyProperties(saasKnowledgeElement, knowledgeElementResp);\n            // 设置显示\n            if (saasKnowledgeElement.getEleSize() !\u003d null \u0026\u0026 saasKnowledgeElement.getEleSize() \u003e 0) {\n                knowledgeElementResp.setEleSizeDisplay(DataSizeUtil.format(saasKnowledgeElement.getEleSize()));\n            } else {\n                knowledgeElementResp.setEleSizeDisplay(\"-\");\n            }\n            ProcessStatusEnum processStatusEnum \u003d ProcessStatusEnum.parse(knowledgeElementResp.getProcessStatus());\n            if (processStatusEnum \u003d\u003d ProcessStatusEnum.PROCESSING || processStatusEnum \u003d\u003d ProcessStatusEnum.EMBEDDED || processStatusEnum \u003d\u003d ProcessStatusEnum.EMBEDDING) {\n                // 判断处理时间，如果超过2小时，那么默认按失败处理\n                if (ChronoUnit.HOURS.between(saasKnowledgeElement.getCreateTime(), LocalDateTime.now()) \u003e 4) {\n                    knowledgeElementResp.setProcessStatus(ProcessStatusEnum.FAILURE.getCode());\n                }\n            }\n            // 判断处理进度\n            if (processStatusEnum \u003d\u003d ProcessStatusEnum.INIT) {\n                knowledgeElementResp.setProcessPercent(0);\n            } else if (processStatusEnum \u003d\u003d ProcessStatusEnum.SUCCESS) {\n                knowledgeElementResp.setProcessPercent(100);\n            } else {\n                if (saasKnowledgeElement.getProcessCount() \u003e 0 \u0026\u0026 saasKnowledgeElement.getPageCount() \u003e 0) {\n                    int per \u003d BigDecimal.valueOf(saasKnowledgeElement.getProcessCount()).divide(BigDecimal.valueOf(saasKnowledgeElement.getPageCount()), 4, RoundingMode.HALF_UP)\n                            .multiply(BigDecimal.valueOf(100)).intValue();\n                    knowledgeElementResp.setProcessPercent(per);\n                } else {\n                    knowledgeElementResp.setProcessPercent(0);\n                }\n            }\n            return knowledgeElementResp;\n        }\n    }\n\n    @Override\n    public Pagination\u003cKbPageCreateInfoResp\u003e listSnapshot(String name, Integer pageNo, Integer pageSize) {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        try (Page\u003cKbPageCreateInfo\u003e page \u003d PageHelper.startPage(pageNo, pageSize)) {\n            PageSnapshotSearchReq searchReq \u003d new PageSnapshotSearchReq();\n            searchReq.setName(name);\n            searchReq.setUserCode(sysUserInfo.getCode());\n            searchReq.setTenantId(sysUserInfo.getTenantId());\n            List\u003cKbPageCreateInfo\u003e kbPageUserInfos \u003d saasKnowledgeElementMapper.listSnapshotPage(searchReq);\n            List\u003cKbPageCreateInfoResp\u003e pageTree \u003d new ArrayList\u003c\u003e();\n            if (CollUtil.isNotEmpty(kbPageUserInfos)) {\n                pageTree \u003d new ArrayList\u003c\u003e(kbPageUserInfos.stream().map(KbPageCreateInfoResp::of).toList());\n            }\n            return Pagination.pagination(pageTree, page.getTotal(), pageNo, pageSize);\n        }\n    }\n\n    @Override\n    public Result\u003cBoolean\u003e deleteSnapshot(List\u003cString\u003e pageCodes) {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d\n                Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getTenantId, sysUserInfo.getTenantId())\n                        .eq(SaasKnowledgeElement::getCreator, sysUserInfo.getCode()).in(SaasKnowledgeElement::getCode, pageCodes);\n        // 删除页面\n        int ret \u003d saasKnowledgeElementMapper.delete(lambdaQueryWrapper);\n        if (ret \u003e 0) {\n            knowledgeElementVersionService.delete(sysUserInfo.getTenantId(), pageCodes);\n        }\n        if (ret \u003e 0) {\n            return Result.data(Boolean.TRUE, i18nMessage.resolveMessage(\"system.common.delete.success\"));\n        }\n        Result\u003cBoolean\u003e fail \u003d Result.error(i18nMessage.resolveMessage(\"system.common.delete.fail\"));\n        fail.setData(Boolean.FALSE);\n        return fail;\n    }\n\n\n    @Override\n    public SaasKnowledgeElementCacheInfo get(String containerId, String tenantId) {\n        String key \u003d KbCacheConst.KB_SPACE_INFO + containerId;\n        String value \u003d stringRedisTemplate.opsForValue().get(key);\n        if (StrUtil.isNotBlank(value)) {\n            String json \u003d stringRedisTemplate.opsForValue().get(key);\n            return SaasKnowledgeElementCacheInfo.fromJson(json);\n        }\n        // select db\n        SaasKnowledgeElement saasKnowledgeElement \u003d saasKnowledgeElementMapper.selectOne(Wrappers.lambdaQuery(SaasKnowledgeElement.class).eq(SaasKnowledgeElement::getContainerId, containerId).eq(SaasKnowledgeElement::getTenantId, tenantId), false);\n        if (saasKnowledgeElement \u003d\u003d null) {\n            saasKnowledgeElement \u003d new SaasKnowledgeElement();\n            saasKnowledgeElement.setEleName(StrUtil.EMPTY);\n        }\n        SaasKnowledgeElementCacheInfo cacheInfo \u003d SaasKnowledgeElementCacheInfo.fromKbSpace(saasKnowledgeElement);\n        if (saasKnowledgeElement.getId() !\u003d null) {\n            stringRedisTemplate.opsForValue().set(key, cacheInfo.toJson(), 2, TimeUnit.HOURS);\n        }\n        return cacheInfo;\n    }\n\n    @Override\n    public Pagination\u003cKnowledgeElementResp\u003e hotPage(Integer pageNo, Integer pageSize, String containerId) {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 是否租户管理员\n        boolean adminRole \u003d false;\n        List\u003cString\u003e joinSpaceCodes \u003d null;\n\n        if (StrUtil.isNotBlank(containerId)) {\n            // 如果指定了空间，验证用户是否有权限访问该空间\n            joinSpaceCodes \u003d Collections.singletonList(containerId);\n        } else if (!adminRole) {\n            // 如果不是管理员且未指定空间，获取用户有权限的所有空间\n            joinSpaceCodes \u003d kbSpaceUserService.userSpaceCode(sysUserInfo);\n        }\n\n        try (Page\u003cSaasKnowledgeElement\u003e page \u003d PageHelper.startPage(pageNo, pageSize)) {\n            LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class)\n                    .eq(SaasKnowledgeElement::getTenantId, sysUserInfo.getTenantId())\n                    // 只查询已发布的页面\n                    .eq(SaasKnowledgeElement::getProcessStatus, ProcessStatusEnum.SUCCESS.getCode())\n                    .ne(SaasKnowledgeElement::getCategory, KnowledgeElementTypes.FOLDER.name())\n                    .ne(SaasKnowledgeElement::getCategory, KnowledgeContainerType.DIRECTORY.name())\n                    // 根据热度排序\n                    .orderByDesc(SaasKnowledgeElement::getHotNumber);\n\n            // 如果指定了空间编码，直接在主查询中添加条件\n            if (StrUtil.isNotBlank(containerId)) {\n                lambdaQueryWrapper.eq(SaasKnowledgeElement::getContainerId, containerId);\n            } else if (!adminRole \u0026\u0026 CollUtil.isNotEmpty(joinSpaceCodes)) {\n                // 如果是非管理员且有权限的空间列表不为空，添加空间编码条件\n                lambdaQueryWrapper.in(SaasKnowledgeElement::getContainerId, joinSpaceCodes);\n            }\n\n            // 直接使用lambdaQueryWrapper进行查询\n            List\u003cSaasKnowledgeElement\u003e saasKnowledgeElementList \u003d saasKnowledgeElementMapper.selectList(lambdaQueryWrapper);\n            List\u003cKnowledgeElementResp\u003e pageTree \u003d new ArrayList\u003c\u003e();\n            if (CollUtil.isNotEmpty(saasKnowledgeElementList)) {\n                pageTree \u003d new ArrayList\u003c\u003e(saasKnowledgeElementList.stream().map(KnowledgeElementResp::of).toList());\n                // 批量填充creatorName和modifierName\n                Set\u003cString\u003e userCodes \u003d new HashSet\u003c\u003e();\n                for (KnowledgeElementResp resp : pageTree) {\n                    userCodes.addAll(resp.userCodes());\n                }\n                if (!userCodes.isEmpty()) {\n                    Map\u003cString, String\u003e userMap \u003d userService.selectByCode(new ArrayList\u003c\u003e(userCodes));\n                    for (KnowledgeElementResp resp : pageTree) {\n                        resp.applyUserName(userMap);\n                    }\n                }\n            }\n            return Pagination.pagination(pageTree, page.getTotal(), pageNo, pageSize);\n        }\n    }\n\n    @Override\n    public Result\u003cString\u003e restore(PageVersionRestoreReq issueReq) {\n        // 记录发布空间页面的日志\n        String code \u003d issueReq.getCode();\n        log.info(\"根据code恢复页面版本当前页面快照编码,code:{}\", code);\n        SaasKnowledgeElementVersion saasKnowledgeElementVersion \u003d knowledgeElementVersionService.getVersionByCode(issueReq.getVersionNo(), issueReq.getCode());\n        // 恢复标题\n        issueReq.setTitle(saasKnowledgeElementVersion.getTitle());\n        // 获取当前用户信息\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 根据代码和租户ID查询页面信息\n        Optional\u003cSaasKnowledgeElement\u003e kbPageOptional \u003d this.queryByCode(issueReq.getPageCode(), sysUserInfo.getTenantId());\n        // 如果查询不到页面信息，抛出非法参数异常\n        if (kbPageOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        // 获取查询到的页面信息\n        SaasKnowledgeElement record \u003d kbPageOptional.get();\n        // 创建一个新对象用于更新页面状态\n        SaasKnowledgeElement update \u003d new SaasKnowledgeElement();\n        if (StrUtil.isNotBlank(issueReq.getTitle())) {\n            update.setEleName(issueReq.getTitle());\n        }\n        update.setId(record.getId());\n        update.setModifier(sysUserInfo.getCode());\n        update.setModifierTime(LocalDateTime.now());\n        SaasKnowledgeElementIssueContext issueContext \u003d new SaasKnowledgeElementIssueContext();\n        // 如果是已经发布的状态。新增一个版本作为当前页面版本的草稿状态。\n        issueReq.applyPublish(issueContext, update);\n        // 设置最新的内容\n        update.setContent(issueReq.getContent());\n        update.setContentMarked(issueReq.getContentMarked());\n        update.setProcessStatus(ProcessStatusEnum.INIT.getCode());\n        // 执行页面状态更新操作\n        int ret \u003d saasKnowledgeElementMapper.updateById(update);\n        // 记录更新结果\n        log.info(\"恢复空间页面结果:{}\", ret \u003e 0);\n        // 如果更新成功，进行向量化处理\n        if (ret \u003e 0) {\n            issueReq.updateIssue(update, record);\n            // todo 处理附件\n            // 更新版本信息\n            this.issuePage(issueContext, update, sysUserInfo, issueReq.getAttachments());\n            // 如果原来记录中原本就是发布状态,并且当前页面不需要审核，则更新动态信息\n            // 空间动态信息新增\n//            SaasKnowledgeElementCacheInfo saasKnowledgeElementCacheInfo \u003d this.get(update.getContainerId(), update.getTenantId());\n//            saasKnowledgeElementTrendService.messageTrend(SaasKnowledgeElementTrendAddReq.of(UserContextHolder.getCurrentUser(), update, SaasKnowledgeElementEvent.DELETED, saasKnowledgeElementCacheInfo));\n            if (issueContext.getVersionStatus() \u003d\u003d KnowledgeElementVersionStatus.ISSUED) {\n                // 删除旧的es索引\n                boolean re \u003d knowledgeElementDataService.deleteByDataId(update.getTenantId(),update.getContainerId(), issueReq.getPageCode());\n                log.info(\"数据库删除成功,ret:{},向量删除:{}\", ret, re);\n            }\n        }\n        // 返回成功结果\n        return Result.success(\"SUCCESS\");\n    }\n\n    @Override\n    public void issuePage(SaasKnowledgeElementIssueContext issueContext, SaasKnowledgeElement saasKnowledgeElement, SysUserInfo sysUserInfo, List\u003cString\u003e attachmentCodes) {\n        // 判断是否为新版本\n        if (issueContext.isStartVersion()) {\n            // 新增一个版本\n            this.merge(saasKnowledgeElement, attachmentCodes, sysUserInfo, issueContext.getVersionStatus());\n        } else {\n            // 更新\n            KnowledgeElementContentUpdateReq knowledgeElementContentUpdateReq \u003d new KnowledgeElementContentUpdateReq();\n            BeanUtils.copyProperties(saasKnowledgeElement, knowledgeElementContentUpdateReq);\n            this.update(saasKnowledgeElement, knowledgeElementContentUpdateReq, sysUserInfo, issueContext.getVersionStatus());\n        }\n    }\n\n\n    /**\n     * 根据id查询空间页面详情\n     *\n     * @param code 空间页面主键id\n     * @return 空间页面详情\n     */\n    @Override\n    public Result\u003cKbPageUserStatusResp\u003e queryUserStatusByCode(String code) {\n        log.info(\"根据主键id查询空间页面用户状态详情,code:{}\", code);\n        KbPageUserStatusResp kbPageResp \u003d new KbPageUserStatusResp();\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 查询页面的事件\n        Map\u003cString, KbPageEvent\u003e kbPageEventMap \u003d kbPageEventService.mapByUserCode(code, sysUserInfo.getCode(), sysUserInfo.getTenantId(), List.of(\n                KbEventMessageTypes.EVENT_PAGE_FOLLOW, KbEventMessageTypes.EVENT_PAGE_COLLECT, KbEventMessageTypes.EVENT_PAGE_LIKES));\n        // 设置状态\n        kbPageResp.applyToggleStatus(kbPageEventMap);\n        return Result.data(kbPageResp);\n    }\n\n    /**\n     * 文件名比较方法，支持按数字前缀排序\n     *\n     * @param fileName1 第一个文件名\n     * @param fileName2 第二个文件名\n     * @param sortType 排序类型（1\u003d正序, 0\u003d反序）\n     * @return 比较结果\n     */\n    private int compareFileName(String fileName1, String fileName2, Integer sortType) {\n        if (fileName1 \u003d\u003d null \u0026\u0026 fileName2 \u003d\u003d null) {\n            return 0;\n        }\n        if (fileName1 \u003d\u003d null) {\n            return sortType \u003d\u003d 0 ? -1 : 1;\n        }\n        if (fileName2 \u003d\u003d null) {\n            return sortType \u003d\u003d 0 ? 1 : -1;\n        }\n\n        // 提取文件名前的数字\n        Integer number1 \u003d extractNumberPrefix(fileName1);\n        Integer number2 \u003d extractNumberPrefix(fileName2);\n\n        int result;\n        if (number1 !\u003d null \u0026\u0026 number2 !\u003d null) {\n            // 两个都有数字前缀，按数字比较\n            result \u003d number1.compareTo(number2);\n            if (result \u003d\u003d 0) {\n                // 数字相同，继续按文件名比较\n                result \u003d fileName1.compareTo(fileName2);\n            }\n        } else if (number1 !\u003d null) {\n            // 只有第一个有数字前缀，数字前缀的排在前面\n            result \u003d -1;\n        } else if (number2 !\u003d null) {\n            // 只有第二个有数字前缀，数字前缀的排在前面\n            result \u003d 1;\n        } else {\n            // 都没有数字前缀，按普通字符串比较\n            result \u003d fileName1.compareTo(fileName2);\n        }\n\n        // 根据排序类型决定是否反转结果\n        return sortType \u003d\u003d 1 ? result : -result;\n    }\n\n    /**\n     * 从文件名中提取数字前缀\n     * 匹配模式：数字 + 分隔符（如点、横线、下划线等）\n     *\n     * @param fileName 文件名\n     * @return 提取的数字，如果没有则返回null\n     */\n    private Integer extractNumberPrefix(String fileName) {\n        if (fileName \u003d\u003d null || fileName.trim().isEmpty()) {\n            return null;\n        }\n\n        // 匹配开头的数字，后面跟着分隔符（. - _ 空格等）\n        java.util.regex.Pattern pattern \u003d java.util.regex.Pattern.compile(\"^(\\\\d+)[.\\\\-_\\\\s]+\");\n        java.util.regex.Matcher matcher \u003d pattern.matcher(fileName.trim());\n\n        if (matcher.find()) {\n            try {\n                return Integer.parseInt(matcher.group(1));\n            } catch (NumberFormatException e) {\n                log.debug(\"解析文件名数字前缀失败: {}\", fileName, e);\n                return null;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * 查询所有知识库元素列表，包括所有子级，排序规则与list接口保持一致\n     * @param knowledgeElementQueryReq 查询条件Vo\n     * @return 所有知识库元素列表（包括所有层级）\n     */\n    @Override\n    public Result\u003cList\u003cKnowledgeElementResp\u003e\u003e listAllWithSort(KnowledgeElementQueryReq knowledgeElementQueryReq) {\n        log.info(\"根据条件查询所有知识库元素列表（包括所有层级）\");\n        log.info(\"QueryReq:{}\", knowledgeElementQueryReq.toString());\n\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 查询全部列表的\n        DepartmentUserOrgPermissions orgPermissions \u003d kbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n\n        LambdaQueryWrapper\u003cSaasKnowledgeElement\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElement.class)\n                .eq(SaasKnowledgeElement::getTenantId, sysUserInfo.getTenantId());\n\n        // 查询条件\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeElementQueryReq.getContainerId()), SaasKnowledgeElement::getContainerId, knowledgeElementQueryReq.getContainerId());\n        // 注意：这里不限制parentCode，要查询所有层级\n        if (StrUtil.isNotBlank(knowledgeElementQueryReq.getCategory())) {\n            List\u003cString\u003e category \u003d StrUtil.split(knowledgeElementQueryReq.getCategory(), StrUtil.COMMA);\n            lambdaQueryWrapper.in(SaasKnowledgeElement::getCategory, category);\n        }\n        lambdaQueryWrapper.like(StrUtil.isNotBlank(knowledgeElementQueryReq.getEleName()), SaasKnowledgeElement::getEleName, knowledgeElementQueryReq.getEleName());\n\n        // 草稿状态只能自己可见\n        lambdaQueryWrapper.and(l-\u003e{\n            l.ne(SaasKnowledgeElement::getProcessStatus,ProcessStatusEnum.DRAFT.getCode()).or(lf-\u003e{\n                lf.eq(SaasKnowledgeElement::getProcessStatus,ProcessStatusEnum.DRAFT.getCode());\n                lf.eq(SaasKnowledgeElement::getCreator, Objects.toString(sysUserInfo.getCode()));\n            });\n        });\n\n        // 过滤权限\n        ElementSearchCondition searchCondition \u003d ElementSearchCondition.from(sysUserInfo.getTenantId(), knowledgeElementQueryReq.getContainerId(), null, orgPermissions.permissionCodesToList());\n        List\u003cString\u003e visibleCodes \u003d saasKnowledgeElementMapper.listVisibleCodes(searchCondition);\n        if (CollUtil.isNotEmpty(visibleCodes)){\n            lambdaQueryWrapper.and(lf-\u003e lf.eq(SaasKnowledgeElement::getPermissionStatus,ToggleStatusEnum.YES.getCode()).or(l1-\u003e{\n                l1.eq(SaasKnowledgeElement::getPermissionStatus,ToggleStatusEnum.NO.getCode());\n                l1.in(SaasKnowledgeElement::getCode,visibleCodes);\n            }));\n        } else {\n            lambdaQueryWrapper.eq(SaasKnowledgeElement::getPermissionStatus,ToggleStatusEnum.YES.getCode());\n        }\n\n        // 设定排序规则\n        SortRules sortRule \u003d SortRules.parse(knowledgeElementQueryReq.getSortRule());\n        if (sortRule \u003d\u003d SortRules.SORT_NUMBER) {\n            lambdaQueryWrapper.orderByAsc(SaasKnowledgeElement::getSort);\n        } else if (sortRule \u003d\u003d SortRules.SORT_CREATE_TIME) {\n            if (knowledgeElementQueryReq.getSortType() \u003d\u003d 0) {\n                lambdaQueryWrapper.orderByAsc(SaasKnowledgeElement::getCreateTime);\n            } else {\n                lambdaQueryWrapper.orderByDesc(SaasKnowledgeElement::getCreateTime);\n            }\n        } else if (sortRule \u003d\u003d SortRules.SORT_MODIFY_TIME) {\n            if (knowledgeElementQueryReq.getSortType() \u003d\u003d 0) {\n                lambdaQueryWrapper.orderByAsc(SaasKnowledgeElement::getModifierTime);\n            } else {\n                lambdaQueryWrapper.orderByDesc(SaasKnowledgeElement::getModifierTime);\n            }\n        }\n        String permissionType \u003d saasKnowledgeContainerPermissionService.getHighestPermission(knowledgeElementQueryReq.getContainerId(),sysUserInfo);\n        log.info(\"当前用户在容器中的最高权限:{}\",permissionType);\n        // 如果是没权限的角色，那么需要判断当前的知识库是否设置为公开，如果是公开的情况下，那么给予只读角色\n        Optional\u003cSaasKnowledgeContainer\u003e containerOptional \u003d knowledgeContainerQueryService.queryInfoByCode(knowledgeElementQueryReq.getContainerId());\n        if (containerOptional.isEmpty()) {\n            return Result.data(new ArrayList\u003c\u003e());\n        }\n        boolean canFilter\u003dtrue;\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d containerOptional.get();\n        if ( KbKnowledgeBaseContainerVisibilityRange.publicRead(saasKnowledgeContainer.getVisibilityRange())){\n            // 公开可读\n            canFilter\u003dfalse;\n        }else{\n            // 非公开可读，那么必须有权限才可以查看\n            if (!StrUtil.equalsIgnoreCase(KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode(),permissionType)){\n                // 公开可读\n                canFilter\u003dfalse;\n            }\n        }\n        List\u003cSaasKnowledgeElement\u003e saasKnowledgeElementInfos \u003d saasKnowledgeElementMapper.selectList(lambdaQueryWrapper);\n        if (canFilter){\n            List\u003cString\u003e elementCodes\u003dsaasKnowledgeElementInfos.stream().map(SaasKnowledgeElement::getCode).toList();\n            ElementFilterSearchCondition searchFilterCondition\u003d ElementFilterSearchCondition.from(sysUserInfo.getTenantId(),knowledgeElementQueryReq.getContainerId(),elementCodes,orgPermissions.permissionCodesToList());\n            List\u003cString\u003e visibleFilterCodes \u003d saasKnowledgeElementMapper.listVisibleFilterCodes(searchFilterCondition);\n            if (CollUtil.isNotEmpty(visibleFilterCodes)){\n                saasKnowledgeElementInfos\u003dsaasKnowledgeElementInfos.stream().filter(e-\u003evisibleFilterCodes.contains(e.getCode())).toList();\n            }\n        }\n        // 对于文件名排序，在内存中进行排序\n        if (sortRule \u003d\u003d SortRules.SORT_TITLE) {\n            saasKnowledgeElementInfos.sort((a, b) -\u003e compareFileName(a.getEleName(), b.getEleName(), knowledgeElementQueryReq.getSortType()));\n        }\n\n        // 构建树形结构并保持每一级的排序\n        List\u003cKnowledgeElementResp\u003e result \u003d buildTreeStructureWithSort(saasKnowledgeElementInfos, knowledgeElementQueryReq);\n\n        return Result.data(result);\n    }\n\n    /**\n     * 构建树形结构并保持每一级的排序\n     */\n    private List\u003cKnowledgeElementResp\u003e buildTreeStructureWithSort(List\u003cSaasKnowledgeElement\u003e elements, KnowledgeElementQueryReq queryReq) {\n        if (CollectionUtil.isEmpty(elements)) {\n            return new ArrayList\u003c\u003e();\n        }\n\n        // 转换为响应对象\n        List\u003cKnowledgeElementResp\u003e allElements \u003d elements.stream()\n                .map(new SaasKnowledgeElementApplyFunction())\n                .collect(Collectors.toList());\n\n        // 批量填充creatorName和modifierName\n        Set\u003cString\u003e userCodes \u003d new HashSet\u003c\u003e();\n\n        // key-code value:parentCode\n        Map\u003cString,String\u003e elementRootMap\u003dnew HashMap\u003c\u003e();\n        for (KnowledgeElementResp resp : allElements) {\n            userCodes.addAll(resp.userCodes());\n            elementRootMap.put(resp.getCode(),resp.getParentCode());\n        }\n        if (!userCodes.isEmpty()) {\n            Map\u003cString, String\u003e userMap \u003d userService.selectByCode(new ArrayList\u003c\u003e(userCodes));\n            for (KnowledgeElementResp resp : allElements) {\n                resp.applyUserName(userMap);\n            }\n        }\n        log.info(\"批量填充creatorName和modifierName{}\" , allElements);\n        // 创建映射：parentCode -\u003e 子元素列表\n        Map\u003cString, List\u003cKnowledgeElementResp\u003e\u003e parentChildMap \u003d new HashMap\u003c\u003e();\n        Map\u003cString,KnowledgeElementResp\u003e rootMap\u003dnew HashMap\u003c\u003e();\n\n        for (KnowledgeElementResp element : allElements) {\n            String parentCode \u003d StrUtil.isBlank(element.getParentCode()) ? \"0\" : element.getParentCode();\n            parentChildMap.computeIfAbsent(parentCode, k -\u003e new ArrayList\u003c\u003e()).add(element);\n           if (!elementRootMap.containsKey(element.getParentCode())){\n               rootMap.put(element.getCode(),element);\n               //parentChildMap.computeIfAbsent(element.getCode(), k -\u003e new ArrayList\u003c\u003e()).add(element);\n           }\n        }\n\n        // 对每一级的子元素进行排序\n        SortRules sortRule \u003d SortRules.parse(queryReq.getSortRule());\n        for (List\u003cKnowledgeElementResp\u003e children : parentChildMap.values()) {\n            sortElementList(children, sortRule, queryReq.getSortType());\n        }\n\n        // 递归构建树形结构\n        //List\u003cKnowledgeElementResp\u003e rootElements \u003d parentChildMap.getOrDefault(\"0\", new ArrayList\u003c\u003e());\n\n        List\u003cKnowledgeElementResp\u003e rootElements \u003d new ArrayList\u003c\u003e(rootMap.values",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3116
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/uploader/impl/PPTUploader.java",
      "timestamp": 1761533697399,
      "startOffset": 962,
      "endOffset": 6178,
      "codeContent": "unstructured.oss.UnstructuredOSSClient;\nimport com.torchv.unstructured.pojo.DataSetChunkResponse;\nimport com.torchv.unstructured.ppt.PPTConvertOSSMarkdown;\nimport com.torchv.unstructured.ppt.PPTPreviewTextExtract;\nimport com.torchv.unstructured.ppt.PPTXConvertOSSMarkdown;\nimport com.torchv.unstructured.ppt.PPTXPreviewTextExtract;\nimport com.torchv.application.knowledge.domain.uploader.pojo.DataSetUploadContext;\nimport com.torchv.application.knowledge.domain.uploader.pojo.DataSetUploadResponse;\nimport com.torchv.infra.embedding.constant.DocConvertFormats;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.poi.poifs.filesystem.FileMagic;\nimport org.springframework.stereotype.Component;\n\nimport java.io.File;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/4/16 17:30\n * @since torchv_server v1.7.1\n */\n@Component\n@Slf4j\n@AllArgsConstructor\npublic class PPTUploader extends AbstractDataSetUploader {\n    \n    final MaterialService materialService;\n    final UnstructuredOSSClient unstructuredOSSClient;\n    \n    @Override\n    public DataSetUploadResponse upload(DataSetUploadContext uploadContext) {\n        log.info(\"开始处理PPT文件上传，文件名：{}\", uploadContext.getMultipartFile().getOriginalFilename());\n        DataSetUploadResponse response \u003d null;\n        FileMagic fm \u003d getFileMagic(uploadContext);\n        String docx_format \u003d \"pptx\";\n        switch (fm) {\n            case OLE2 -\u003e {\n                // ppt格式\n                response \u003d this.getPPT(uploadContext, DocConvertFormats.PPT);\n                response.setEleSuffix(DocConvertFormats.PPT.getSource());\n            }\n            case OOXML -\u003e {\n                // .pptx\n                response \u003d this.getPPT(uploadContext, DocConvertFormats.PPTX);\n                response.setEleSuffix(docx_format);\n            }\n            default -\u003e {\n                // 根据后缀名直接预览处理\n                String extName \u003d FileUtil.extName(uploadContext.getMultipartFile().getOriginalFilename());\n                if (StrUtil.equalsIgnoreCase(DocConvertFormats.PPT.getSource(), extName)) {\n                    response \u003d this.getPPT(uploadContext, DocConvertFormats.PPT);\n                    response.setEleSuffix(DocConvertFormats.PPT.getSource());\n                } else if (StrUtil.equalsIgnoreCase(docx_format, extName)) {\n                    uploadContext.processFileName(docx_format);\n                    response \u003d this.getPPT(uploadContext, DocConvertFormats.PPTX);\n                    response.setEleSuffix(docx_format);\n                }\n            }\n        }\n        return response;\n    }\n    \n    /**\n     * 处理PPT文件\n     * @param uploadContext 上传上下文\n     * @return DataSetUploadResponse\n     */\n    private DataSetUploadResponse getPPT(DataSetUploadContext uploadContext, DocConvertFormats formats) {\n        DataSetUploadResponse response \u003d this.initResponse(uploadContext.getMultipartFile());\n        // 使用真实的doc格式\n        response.setCategory(uploadContext.getCategory());\n        File tmpFile \u003d null;\n        try {\n            tmpFile \u003d FileUtil.createTempFile(\"\", \".\" + formats.getSource(), true);\n            FileUtil.writeFromStream(uploadContext.getMultipartFile().getInputStream(), tmpFile);\n            List\u003cDataSetChunkResponse\u003e chunksList \u003d new ArrayList\u003c\u003e();\n            if (formats \u003d\u003d DocConvertFormats.PPT) {\n                chunksList \u003d new PPTPreviewTextExtract(tmpFile).get();\n            } else if (formats \u003d\u003d DocConvertFormats.PPTX) {\n                chunksList \u003d new PPTXPreviewTextExtract(tmpFile).get();\n            }\n            response.setChunks(chunksList);\n            response.setPageCount(chunksList.size());\n            // 初始化chunks\n            MaterialInfoResp materialInfoResp \u003d materialService.save(tmpFile, response.getEleMd5(), uploadContext.getTenantId());\n            response.setEleUrl(materialInfoResp.getFileUrl());\n            response.setStatus(true);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            FileUtil.del(tmpFile);\n        }\n        return response;\n    }\n\n\n    @Override\n    public DataSetUploadResponse parse(DataSetUploadContext uploadContext) {\n        DataSetUploadResponse response \u003d this.initResponse(uploadContext.getMultipartFile());\n        File tmpFile \u003d null;\n        File docMdFile \u003d null;\n        DocConvertFormats formats \u003d DocConvertFormats.bySource(FileUtil.extName(uploadContext.getFileName()));\n        try {\n            tmpFile \u003d FileUtil.createTempFile(\"\", \".\" + FileUtil.extName(uploadContext.getFileName()), true);\n            FileUtil.writeFromStream(uploadContext.getMultipartFile().getInputStream(), tmpFile);\n            if (formats \u003d\u003d DocConvertFormats.PPT) {\n                // docMdFile \u003d new PPTConvertMarkdown().apply(tmpFile);\n                docMdFile \u003d new PPTConvertOSSMarkdown(unstructuredOSSClient, uploadContext.getTenantId()).apply(tmpFile);\n            } else if (formats \u003d\u003d DocConvertFormats.PPTX) {\n                // docMdFile \u003d new PPTXConvertMarkdown().apply(tmpFile);\n                docMdFile \u003d new PPTXConvertOSSMarkdown(unstructuredOSSClient",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 114
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/web/BusinessDataSourceController.java",
      "timestamp": 1761533697438,
      "startOffset": 3824,
      "endOffset": 7379,
      "codeContent": "@RequestParam(value \u003d \"containerCode\", required \u003d false) String containerCode) {\n        log.info(\"统计数据源类型\u0026数量,API:{}\", \"/kl/api/saas/database/group\");\n        return businessDataSourceService.listCount(containerCode);\n    }\n    \n    /**\n     * 新增数据源\n     * @param businessDataSourceAddReq 新增vo\n     * @return 新增是否成功\n     */\n    @Operation(summary \u003d \"新增数据源\")\n    @PostMapping(\"/add\")\n    public Result\u003cString\u003e add(@Valid @RequestBody BusinessDataSourceAddReq businessDataSourceAddReq) {\n        log.info(\"新增数据源,API:{}\", \"/kl/api/saas/database/add\");\n        log.info(\"新增数据源模块Vo:{}\", businessDataSourceAddReq.toString());\n        return businessDataSourceService.add(businessDataSourceAddReq);\n    }\n    \n    /**\n     * 新增数据源\n     * @param businessDataSourceAddReq 新增vo\n     * @return 新增是否成功\n     */\n    @Operation(summary \u003d \"测试数据源连接是否可用\")\n    @PostMapping(\"/connect/test\")\n    public Result\u003cBoolean\u003e test(@Valid @RequestBody BusinessDataSourceTestConnectionReq businessDataSourceAddReq) {\n        log.info(\"测试数据源是否链接可用,API:{}\", \"/kl/api/saas/database/connect/test\");\n        return businessDataSourceService.testDs(businessDataSourceAddReq);\n    }\n    \n    /**\n     * 更新数据源\n     * @param businessDataSourceUpdateReq 更新vo（根据containerCode批量更新）\n     * @return 更新是否成功\n     */\n    @Operation(summary \u003d \"根据containerCode修改数据源\")\n    @PutMapping(\"/update\")\n    public Result\u003cString\u003e update(@Valid @RequestBody BusinessDataSourceUpdateReq businessDataSourceUpdateReq) {\n        log.info(\"修改数据源,API:{}\", \"/kl/api/saas/database/update\");\n        log.info(\"修改Vo:{}\", businessDataSourceUpdateReq.toString());\n        return businessDataSourceService.update(businessDataSourceUpdateReq);\n    }\n    \n    /**\n     * 根据containerCode查询数据源详情\n     * @param containerCode 容器编码\n     * @return 数据源详情列表\n     */\n    @Operation(summary \u003d \"根据containerCode查询数据源详情\")\n    @Parameter(name \u003d \"containerCode\", description \u003d \"容器编码\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @GetMapping(\"/queryById\")\n    public Result\u003cList\u003cBusinessDataSourceResp\u003e\u003e queryById(@RequestParam(value \u003d \"containerCode\") String containerCode) {\n        log.info(\"根据containerCode查询数据源详情,API:{},containerCode:{}\", \"/kl/api/saas/database/queryById\", containerCode);\n        return businessDataSourceService.queryById(containerCode);\n    }\n    \n    /**\n     * 批量删除\n     * @param id 批量删除主键id,多个以逗号分隔,例如：id1,id2,id3\n     * @return 删除是否成功\n     */\n    @Operation(summary \u003d \"批量删除数据源\", description \u003d \"主键id字段多个以逗号分隔,例如：id1,id2,id3\")\n    @Parameter(name \u003d \"id\", description \u003d \"主键id\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @DeleteMapping(\"/deleteBatch\")\n    public Result\u003cString\u003e deleteBatch(@RequestParam(value \u003d \"id\") String id) {\n        log.info(\"根据主键id批量删除,API:{},ids:{}\", \"/kl/api/saas/database/deleteBatch\", id);\n        Assert.notNull(id, \"id不能为空\");\n        List\u003cInteger\u003e ids \u003d StrUtil.split(id, StrUtil.C_COMMA).stream().map(Integer::parseInt).collect(Collectors.toList());\n        return businessDataSourceService.delete(ids);\n    }\n    \n    /**\n     * 删除数据源\n     * @param containerCode 容器编码\n     * @return 删除是否成功\n     */\n    @Operation(summary \u003d \"根据containerCode删除数据源\")\n    @Parameter(name \u003d \"containerCode\", description \u003d \"容器编码\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @DeleteMapping(\"/delete\")\n    public Result\u003cString\u003e delete(@RequestParam(value \u003d \"containerCode\") String containerCode) {\n        log.info(\"删除数据源,API:{},ID:{}\", \"/kl/api/saas/database/delete\", containerCode);\n        Assert.notNull(containerCode, \"containerCode不能为空\");\n        return businessDataSourceService.delete(containerCode",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 83
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/web/KnowledgeContainerController.java",
      "timestamp": 1761533697453,
      "startOffset": 905,
      "endOffset": 14261,
      "codeContent": "ContainerDataService;\nimport com.torchv.application.knowledge.domain.knowledge.KnowledgeModelService;\nimport com.torchv.application.knowledge.domain.knowledge.KnowledgeStatisticsService;\nimport com.torchv.application.knowledge.model.request.knowledge.*;\nimport com.torchv.application.knowledge.model.response.knowledge.KnowledgeContainerFollowResp;\nimport com.torchv.application.knowledge.model.response.knowledge.KnowledgeContainerResp;\nimport com.torchv.application.knowledge.model.response.knowledge.KnowledgeContainerTagResp;\nimport com.torchv.application.knowledge.model.response.knowledge.KnowledgeEmbeddingModelResp;\nimport com.torchv.common.constant.enums.system.SystemModule;\nimport com.torchv.common.context.UserContextHolder;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.infra.common.extra.log.LogContext;\nimport com.torchv.infra.common.extra.log.annotation.SysLog;\nimport com.torchv.infra.license.LicenseBootstrap;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\nimport cn.hutool.core.lang.Assert;\nimport com.torchv.common.model.Pagination;\nimport com.torchv.common.model.Result;\nimport org.springframework.web.bind.annotation.*;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.Parameters;\nimport io.swagger.v3.oas.annotations.enums.ParameterIn;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\nimport com.torchv.application.knowledge.domain.knowledge.KnowledgeContainerService;\n\nimport jakarta.validation.Valid;\n\nimport java.util.List;\n\n/**\n * 知识库容器-接口API\n * @since torchv_server v0.1-beta.1\n * @author \u003ca href\u003d\"mailto:xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/01/02 19:54\n */\n@Slf4j\n@AllArgsConstructor\n@Tag(name \u003d \"知识库容器\")\n@RestController\n@RequestMapping(\"/kl/api/saas/container\")\npublic class KnowledgeContainerController {\n\n    final KnowledgeContainerService knowledgeContainerService;\n    final KnowledgeStatisticsService knowledgeStatisticsService;\n    final KnowledgeModelService knowledgeModelService;\n    final KnowledgeContainerDataService knowledgeContainerDataService;\n    /**\n     * 获取所有支持的嵌入模型\n     * @return 嵌入模型列表\n     */\n    @Operation(summary \u003d \"获取所有支持的嵌入模型\")\n    @GetMapping(\"/embeddings/all\")\n    public Result\u003cList\u003cKnowledgeEmbeddingModelResp\u003e\u003e listAllEmbeddingModels() {\n        log.info(\"获取所有支持的嵌入模型,API:{}\", \"/kl/api/saas/container/embeddings/all\");\n        return knowledgeModelService.listAllSupportEmbeddingModels(UserContextHolder.getTenantId());\n    }\n    /**\n     * 获取所有支持的嵌入模型\n     * @return 嵌入模型列表\n     */\n    @Operation(summary \u003d \"获取所有支持的嵌入模型\")\n    @GetMapping(\"/embeddings\")\n    public Result\u003cList\u003cKnowledgeEmbeddingModelResp\u003e\u003e listEmbeddingModels() {\n        return knowledgeModelService.listAllSupportEmbeddingModels(UserContextHolder.getTenantId());\n    }\n    /**\n     * 分页查询知识库容器\n     * @param knowledgeContainerQueryReq 查询条件vo\n     * @param pageNo 当前页码\n     * @param pageSize 页码大小\n     * @return 分页列表\n     */\n    @Operation(summary \u003d \"分页查询知识库容器\")\n    @Parameters({\n            @Parameter(name \u003d \"pageNo\", description \u003d \"当前页码,默认1\", required \u003d true, in \u003d ParameterIn.QUERY, example \u003d \"1\"),\n            @Parameter(name \u003d \"pageSize\", description \u003d \"页码大小,默认10\", required \u003d true, in \u003d ParameterIn.QUERY, example \u003d \"10\")\n    })\n    @GetMapping(\"/list\")\n    public Pagination\u003cKnowledgeContainerResp\u003e list(KnowledgeContainerQueryReq knowledgeContainerQueryReq,\n                                                   @RequestParam(value \u003d \"pageNo\", defaultValue \u003d \"1\") Integer pageNo,\n                                                   @RequestParam(value \u003d \"pageSize\", defaultValue \u003d \"10\") Integer pageSize) {\n        log.info(\"分页查询知识库容器,API:{},page:{},size:{}\", \"/kl/api/saas/container/list\", pageNo, pageSize);\n        log.info(\"查询条件Vo:{}\", knowledgeContainerQueryReq.toString());\n        return knowledgeContainerService.list(knowledgeContainerQueryReq, pageNo, pageSize);\n    }\n\n    /**\n     * 统计\n     * @param statisticalReq 参数\n     * @return 统计数据\n     */\n    @Operation(summary \u003d \"统计知识库容量\")\n    @PutMapping(\"/statistical\")\n    public Result\u003cKnowledgeContainerResp\u003e statistical(@Valid @RequestBody KnowledgeContainerStatisticalReq statisticalReq) {\n        log.info(\"统计知识库容量,api:{}\", \"/kl/api/saas/container/statistical\");\n        return knowledgeStatisticsService.statistical(statisticalReq);\n    }\n\n    /**\n     * 新增知识库容器\n     * @param knowledgeContainerAddReq 新增vo\n     * @return 新增是否成功\n     */\n    @SaCheckPermission(value \u003d {\"RES_LLM_FILE\", \"RES_LLM_FILE_ADD\", \"RES_LLM_FILE_PREVIEW\", \"RES_LLM_FILE_ADD_BATCH\", \"RES_LLM_FILE_EDIT\"}, mode \u003d SaMode.OR, orRole \u003d {\"SYS_ROLE_CLI_ADMIN\"})\n    @Operation(summary \u003d \"新增知识库容器\")\n    @PostMapping(\"/add\")\n    @SysLog(module \u003d SystemModule.LLM_KNOWLEDGE, value \u003d \"新增知识库,名称:#{ #name }\")\n    public Result\u003cString\u003e add(@Valid @RequestBody KnowledgeContainerAddReq knowledgeContainerAddReq) throws JsonProcessingException {\n        log.info(\"新增知识库容器,API:{}\", \"/kl/api/saas/container/add\");\n        log.info(\"新增知识库容器模块Vo:{}\", knowledgeContainerAddReq.toString());\n        LogContext.putVariable(\"name\", knowledgeContainerAddReq.getName());\n        // 校验license，登录的时候校验\n        LicenseBootstrap.checkLicense();\n        return knowledgeContainerService.add(knowledgeContainerAddReq);\n    }\n\n    /**\n     * 新增个人知识库容器\n     * @return 新增是否成功\n     */\n    @SaCheckPermission(value \u003d {\"RES_LLM_FILE\", \"RES_LLM_FILE_ADD\", \"RES_LLM_FILE_PREVIEW\", \"RES_LLM_FILE_ADD_BATCH\", \"RES_LLM_FILE_EDIT\"}, mode \u003d SaMode.OR, orRole \u003d {\"SYS_ROLE_CLI_ADMIN\"})\n    @Operation(summary \u003d \"新增知识库容器\")\n    @GetMapping(\"/addPersonal\")\n    @SysLog(module \u003d SystemModule.LLM_KNOWLEDGE, value \u003d \"新增知识库,名称:#{ #name }\")\n    public Result\u003cString\u003e add() throws JsonProcessingException {\n        log.info(\"新增知识库容器,API:{}\", \"/kl/api/saas/container/addPersonal\");\n        // 校验license，登录的时候校验\n        LicenseBootstrap.checkLicense();\n        return knowledgeContainerService.addPersonal();\n    }\n\n    /**\n     * 校检个人知识库是否存在\n     * @return 是否存在\n     */\n    @SaCheckPermission(value \u003d {\"RES_LLM_FILE\", \"RES_LLM_FILE_ADD\", \"RES_LLM_FILE_PREVIEW\", \"RES_LLM_FILE_ADD_BATCH\", \"RES_LLM_FILE_EDIT\"}, mode \u003d SaMode.OR, orRole \u003d {\"SYS_ROLE_CLI_ADMIN\"})\n    @Operation(summary \u003d \"校检个人知识库是否存在\")\n    @GetMapping(\"/checkPersonal\")\n    @SysLog(module \u003d SystemModule.LLM_KNOWLEDGE, value \u003d \"校检个人知识库是否存在\")\n    public Result\u003cString\u003e check(){\n        log.info(\"新增知识库容器,API:{}\", \"/kl/api/saas/container/checkPersonal\");\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        return knowledgeContainerDataService.checkPersonal(sysUserInfo, true);\n    }\n    /**\n     * 更新知识库容器\n     * @param knowledgeContainerUpdateReq 更新vo\n     * @return 更新是否成功\n     */\n    @SaCheckPermission(value \u003d {\"RES_LLM_FILE\", \"RES_LLM_FILE_ADD\", \"RES_LLM_FILE_PREVIEW\", \"RES_LLM_FILE_ADD_BATCH\", \"RES_LLM_FILE_EDIT\"}, mode \u003d SaMode.OR, orRole \u003d {\"SYS_ROLE_CLI_ADMIN\"})\n    @Operation(summary \u003d \"修改知识库容器\")\n    @PutMapping(\"/update\")\n    @SysLog(module \u003d SystemModule.LLM_KNOWLEDGE, value \u003d \"编辑知识库,名称:#{ #name }\")\n    public Result\u003cString\u003e update(@Valid @RequestBody KnowledgeContainerUpdateReq knowledgeContainerUpdateReq) {\n        log.info(\"修改知识库容器,API:{}\", \"/kl/api/saas/container/update\");\n        log.info(\"修改Vo:{}\", knowledgeContainerUpdateReq.toString());\n        LogContext.putVariable(\"name\", knowledgeContainerUpdateReq.getName());\n        return knowledgeContainerService.update(knowledgeContainerUpdateReq);\n    }\n\n    @SaCheckPermission(value \u003d {\"RES_LLM_FILE\", \"RES_LLM_FILE_ADD\", \"RES_LLM_FILE_PREVIEW\", \"RES_LLM_FILE_ADD_BATCH\", \"RES_LLM_FILE_EDIT\"}, mode \u003d SaMode.OR, orRole \u003d {\"SYS_ROLE_CLI_ADMIN\"})\n    @Operation(summary \u003d \"移动知识库\")\n    @PutMapping(\"/move\")\n    @SysLog(module \u003d SystemModule.LLM_KNOWLEDGE, value \u003d \"移动知识库\")\n    public Result\u003cString\u003e move(@Valid @RequestBody KnowledgeContainerMoveReq moveReq) {\n        log.info(\"移动知识库,API:{}\", \"/kl/api/saas/container/move\");\n        log.info(\"移动知识库Vo:{}\", moveReq.toString());\n        return knowledgeContainerService.move(moveReq);\n    }\n\n    /**\n     * 根据id查询知识库容器详情\n     * @param id 主键id\n     * @return 知识库容器详情\n     */\n    @Operation(summary \u003d \"根据主键id查询知识库容器详情\")\n    @Parameter(name \u003d \"id\", description \u003d \"主键id\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @GetMapping(\"/queryById\")\n    public Result\u003cKnowledgeContainerResp\u003e queryById(@RequestParam(value \u003d \"id\") Integer id) {\n        log.info(\"根据主键id查询知识库容器详情,API:{},主键id:{}\", \"/kl/api/saas/container/queryById\", id);\n        return knowledgeContainerService.queryById(id);\n    }\n\n    @Operation(summary \u003d \"根据code查询知识库容器详情\")\n    @Parameter(name \u003d \"code\", description \u003d \"code\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @GetMapping(\"/queryByCode\")\n    public Result\u003cKnowledgeContainerResp\u003e queryByCode(@RequestParam(value \u003d \"code\") String code) {\n        log.info(\"根据code查询知识库容器详情,API:{},code:{}\", \"/kl/api/saas/container/queryByCode\", code);\n        return knowledgeContainerService.queryByCode(code);\n    }\n\n    @Operation(summary \u003d \"查询收藏状态\")\n    @Parameter(name \u003d \"code\", description \u003d \"code\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @GetMapping(\"/queryFollowStatus\")\n    public Result\u003cKnowledgeContainerFollowResp\u003e queryFollowStatus(@RequestParam(value \u003d \"code\") String code) {\n        log.info(\"根据code查询知识库容器详情,API:{},code:{}\", \"/kl/api/saas/container/queryByCode\", code);\n        return knowledgeContainerService.queryFollowStatus(code);\n    }\n\n    @Operation(summary \u003d \"根据id查询知识库基础配置详情\")\n    @Parameter(name \u003d \"id\", description \u003d \"id\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @GetMapping(\"/queryBasicInfoByCode\")\n    public Result\u003cKnowledgeContainerResp\u003e queryBasicInfoByCode(@RequestParam(value \u003d \"code\") String code) {\n        log.info(\"根据code查询知识库基础配置详情,API:{},code:{}\", \"/kl/api/saas/container/queryBasicInfoByCode\", code);\n        return knowledgeContainerService.queryBasicInfoByCode(code);\n    }\n\n    @Operation(summary \u003d \"根据id查询知识库基础配置详情\")\n    @Parameter(name \u003d \"id\", description \u003d \"id\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @GetMapping(\"/queryBasicInfoById\")\n    public Result\u003cKnowledgeContainerResp\u003e queryBasicInfoById(@RequestParam(value \u003d \"id\") Integer id) {\n        log.info(\"根据id查询知识库基础配置详情,API:{},code:{}\", \"/kl/api/saas/container/queryBasicInfoById\", id);\n        return knowledgeContainerService.queryBasicInfoById(id);\n    }\n\n    @SaCheckPermission(value \u003d {\"RES_LLM_FILE\", \"RES_LLM_FILE_ADD\", \"RES_LLM_FILE_PREVIEW\", \"RES_LLM_FILE_ADD_BATCH\", \"RES_LLM_FILE_EDIT\"}, mode \u003d SaMode.OR, orRole \u003d {\"SYS_ROLE_CLI_ADMIN\"})\n    @Operation(summary \u003d \"更新知识库基础配置详情\")\n    @PutMapping(\"/updateBasicInfo\")\n    public Result\u003cString\u003e updateBasicInfo(@Valid @RequestBody KnowledgeContainerUpdateReq knowledgeContainerUpdateReq) {\n        log.info(\"根据code更新知识库基础配置详情,API:{},code:{}\", \"/kl/api/saas/container/updateBasicInfo\", knowledgeContainerUpdateReq);\n        return knowledgeContainerService.updateBasicInfo(knowledgeContainerUpdateReq);\n    }\n\n    @Operation(summary \u003d \"根据code查询当前知识库容器用户权限\" +\n            \"description \u003d \\\"权限类型，取值示例：MANAGE\u003d可管理，EDIT\u003d可编辑，VIEW_DOWNLOAD\u003d可查看/下载，VIEW_ONLY\u003d仅可查看\\\"\")\n    @Parameter(name \u003d \"code\", description \u003d \"code\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @GetMapping(\"/queryPermissionByCode\")\n    public Result\u003cString\u003e queryPermissionByCode(@RequestParam(value \u003d \"code\") String code,@RequestParam(value \u003d \"elementCode\",required \u003d false) String elementCode) {\n        log.info(\"根据code查询当前知识库容器用户权限,API:{},code:{},elementCode:{}\", \"/kl/api/saas/container/queryPermissionByCode\", code,elementCode);\n        return knowledgeContainerService.queryPermissionByCode(code,elementCode);\n    }\n\n    @Operation(summary \u003d \"统计查询知识库标签信息-列表\")\n    @Parameters({\n            @Parameter(name \u003d \"pageNo\", description \u003d \"当前页码,默认1\", required \u003d true, in \u003d ParameterIn.QUERY, example \u003d \"1\"),\n            @Parameter(name \u003d \"pageSize\", description \u003d \"页码大小,默认10\", required \u003d true, in \u003d ParameterIn.QUERY, example \u003d \"10\"),\n            @Parameter(name \u003d \"name\", description \u003d \"名称\", in \u003d ParameterIn.QUERY)\n    })\n    @GetMapping(\"/tags\")\n    public Pagination\u003cKnowledgeContainerTagResp\u003e tags(@RequestParam(value \u003d \"name\", required \u003d false) String name,\n                                                      @RequestParam(value \u003d \"pageNo\", defaultValue \u003d \"1\") Integer pageNo,\n                                                      @RequestParam(value \u003d \"pageSize\", defaultValue \u003d \"10\") Integer pageSize) {\n        log.info(\"统计查询知识库标签信息-列表,API:{}\", \"/kl/api/saas/container/tags\");\n        return knowledgeContainerService.listTag(name, pageNo, pageSize);\n    }\n\n    /**\n     * 删除知识库容器\n     * @param id 主键id\n     * @return 删除是否成功\n     */\n    @SaCheckPermission(value \u003d {\"RES_LLM_FILE\", \"RES_LLM_FILE_ADD\", \"RES_LLM_FILE_PREVIEW\", \"RES_LLM_FILE_ADD_BATCH\", \"RES_LLM_FILE_EDIT\"}, mode \u003d SaMode.OR, orRole \u003d {\"SYS_ROLE_CLI_ADMIN\"})\n    @Operation(summary \u003d \"删除知识库容器\")\n    @Parameter(name \u003d \"id\", description \u003d \"主键id\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @DeleteMapping(\"/delete\")\n    @SysLog(module \u003d SystemModule.LLM_KNOWLEDGE, value \u003d \"删除知识库,名称:#{ #name }\")\n    public Result\u003cString\u003e delete(@RequestParam(value \u003d \"id\") Integer id) {\n        log.info(\"删除知识库容器,API:{},ID:{}\", \"/kl/api/saas/container/delete\", id);\n        Assert.notNull(id, \"system.common.null.id\");\n        return knowledgeContainerService.delete(id);\n    }\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 267
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/openapi/domain/channel/impl/DingTalkCallbackServiceImpl.java",
      "timestamp": 1761533697485,
      "startOffset": 976,
      "endOffset": 6546,
      "codeContent": "knowledge.model.response.chat.ChatIntegration;\nimport com.torchv.application.openapi.domain.channel.DingTalkCallbackService;\nimport com.torchv.application.openapi.model.req.channel.DingTalkCallbackReq;\nimport com.torchv.application.store.domain.builder.AppChatContextBuilder;\nimport com.torchv.application.store.domain.completion.AppChatDebugCompletion;\nimport com.torchv.application.store.service.ChannelDingTalkService;\nimport com.torchv.common.constant.Platforms;\nimport com.torchv.common.constant.llm.AgentIntegrations;\nimport com.torchv.common.extra.filter.ThreadLocalHolder;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.pipeline.channel.DingTalkClient;\nimport com.torchv.infra.rag.agent.BotAgent;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.llm.model.completions.BotCompletionResponse;\nimport com.torchv.repository.store.entity.AppChannelDingtalk;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/9/3 16:50\n * @since torchv_server v1.7.11\n */\n@AllArgsConstructor\n@Service\n@Slf4j\npublic class DingTalkCallbackServiceImpl implements DingTalkCallbackService {\n    \n    final ChannelDingTalkService channelDingTalkService;\n    final BotAgent botAgent;\n    final DingTalkClient dingTalkClient;\n    final AppChatContextBuilder appChatContextBuilder;\n\n\n    @Override\n    public String chat(DingTalkCallbackReq callbackReq) {\n        String robotCode \u003d callbackReq.getRobotCode();\n        log.info(\"钉钉回调Chat事件,robotCode:{}\", robotCode);\n        Optional\u003cAppChannelDingtalk\u003e dingtalk \u003d channelDingTalkService.getByCode(robotCode);\n        if (dingtalk.isEmpty()) {\n            log.info(\"code:{} 配置不存在，\", robotCode);\n            return \"failed\";\n        }\n        log.info(\"code:{} 配置存在，\", robotCode);\n        // 获取得到当前钉钉的配置信息，appid、secret\n        AppChannelDingtalk dingtalkConfig \u003d dingtalk.get();\n        String conversationId \u003d callbackReq.getConversationId();\n        String question \u003d callbackReq.chatContent();\n        if (StrUtil.isBlank(conversationId) || StrUtil.isBlank(question)) {\n            log.info(\"conversationId或者question为空\");\n            return \"failed\";\n        }\n        log.info(\"conversationId:{},question:{}\", conversationId, question);\n\n        // 构建用户信息\n        SysUserInfo sysUserInfo \u003d new SysUserInfo();\n        sysUserInfo.setCode(callbackReq.getChatbotUserId());\n        sysUserInfo.setTenantId(dingtalkConfig.getTenantId());\n        // 复制给LocalContext上下文,在UserContextHolder中使用\n        ThreadLocalHolder.setUser(sysUserInfo);\n        // 构建问答信息\n        AppChatDebugCompletion appChatDebugCompletion\u003dnew AppChatDebugCompletion();\n        appChatDebugCompletion.setAppid(dingtalkConfig.getAppid());\n        appChatDebugCompletion.setQuestion(question);\n        appChatDebugCompletion.setConversationId(conversationId);\n        appChatDebugCompletion.setPlatforms(Platforms.DING_TALK);\n        appChatDebugCompletion.setStream(false);\n        // integrations\n        appChatDebugCompletion.setIntegrations(List.of(ChatIntegration.from(AgentIntegrations.INNER_INTENT),ChatIntegration.from(AgentIntegrations.INNER_SUBQUERY)));\n        ChainContext chainContext \u003d appChatContextBuilder.build(appChatDebugCompletion);;\n        // 构建大模型的对话信息\n        BotCompletionResponse botCompletionResponse \u003d botAgent.startSync(chainContext);\n        String answer \u003d botCompletionResponse.firstMessage();\n        // 发送钉钉请求\n        JSONObject msgParam \u003d new JSONObject();\n        msgParam.put(\"text\", \"\u003e @\" + callbackReq.getSenderNick() + \" \" + question + \"\\n\\n\" + answer);\n        msgParam.put(\"title\", \"回复@\" + callbackReq.getSenderNick());\n        String marked \u003d msgParam.toJSONString();\n        dingTalkClient.initClient(robotCode, dingtalkConfig.getClientId(), dingtalkConfig.getClientSecret());\n        // 发送消息\n        dingTalkClient.simpleMarked(marked, robotCode, conversationId);\n        return \"SUCCESS\";\n    }\n\n    @Override\n    public OapiChatSendRequest.Markdown markdownStream(ChatbotMessage message, String tenantId, String appid) {\n        MessageContent messageContent\u003dmessage.getText();\n        // 构建用户信息\n        SysUserInfo sysUserInfo \u003d new SysUserInfo();\n        sysUserInfo.setCode(message.getSenderId());\n        sysUserInfo.setTenantId(tenantId);\n        // 复制给LocalContext上下文,在UserContextHolder中使用\n        ThreadLocalHolder.setUser(sysUserInfo);\n        // 构建问答信息\n        AppChatDebugCompletion appChatDebugCompletion\u003dnew AppChatDebugCompletion();\n        appChatDebugCompletion.setAppid(appid);\n        appChatDebugCompletion.setQuestion(messageContent.getContent());\n        appChatDebugCompletion.setConversationId(message.getConversationId());\n        appChatDebugCompletion.setPlatforms(Platforms.DING_TALK);\n        // integrations\n        appChatDebugCompletion.setIntegrations(List.of(ChatIntegration.from(AgentIntegrations.INNER_INTENT),ChatIntegration.from(AgentIntegrations.INNER_SUBQUERY)));\n        appChatDebugCompletion.setStream(false);\n        ChainContext chainContext \u003d appChatContextBuilder.build(appChatDebugCompletion);;\n        //ChainContext chainContext \u003d channelCallBackChatContextBuilder.build(channelCallbackCompletion);\n        BotCompletionResponse botCompletionResponse \u003d botAgent.startSync(chainContext);\n        String answer \u003d botCompletionResponse.firstMessage();\n        OapiChatSendRequest.Markdown markdown\u003dnew OapiChatSendRequest.Markdown();",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 111
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/openapi/service/impl/OpenAppServiceImpl.java",
      "timestamp": 1761533697553,
      "startOffset": 1046,
      "endOffset": 4522,
      "codeContent": "knowledge.model.response.chat.ChatIntegration;\nimport com.torchv.application.openapi.domain.completion.ChatStoreAppApiV1Completion;\nimport com.torchv.application.openapi.domain.pojo.OpenAppChatValidationResult;\nimport com.torchv.application.openapi.domain.pojo.WebChatRecord;\nimport com.torchv.application.openapi.domain.completion.ChatAppApiV1Completion;\nimport com.torchv.application.openapi.model.req.ChatValidationReq;\nimport com.torchv.application.openapi.domain.pojo.WebPage;\nimport com.torchv.application.openapi.model.resp.ChatValidationResp;\nimport com.torchv.application.openapi.service.OpenAppService;\nimport com.torchv.application.knowledge.model.dto.PromptInfoResp;\nimport com.torchv.application.store.domain.completion.AppChatDebugCompletion;\nimport com.torchv.application.store.service.AppInfoService;\nimport com.torchv.application.store.service.AppSettingsService;\nimport com.torchv.common.constant.AppTypes;\nimport com.torchv.common.constant.CacheCns;\nimport com.torchv.common.constant.Cns;\nimport com.torchv.common.constant.Platforms;\nimport com.torchv.common.constant.llm.AgentIntegrations;\nimport com.torchv.common.context.UserContextHolder;\nimport com.torchv.common.extra.filter.ThreadLocalHolder;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.infra.common.external.queue.RabbitMessageService;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.utils.GsonUtils;\nimport com.torchv.common.utils.RsaUtil;\nimport com.torchv.repository.store.entity.AppInfo;\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/3/20 20:16\n * @since torchv_server v0.1-beta.1.6\n */\n@AllArgsConstructor\n@Slf4j\n@Service\npublic class OpenAppServiceImpl implements OpenAppService {\n    \n    final StringRedisTemplate stringRedisTemplate;\n    final AppInfoService appInfoService;\n    final AppSettingsService appSettingsService;\n    final RabbitMessageService rabbitMessageService;\n\n    @Override\n    public AppChatDebugCompletion buildDebugCompletion(ChatAppApiV1Completion req, OpenAppChatValidationResult result) {\n        // 构建用户信息\n        String tenantId \u003d result.getAppInfo().getTenantId();\n        String userId \u003d req.getUserId();\n        if (StrUtil.isBlank(userId)) {\n            userId \u003d StrUtil.hide(MD5.create().digestHex(result.getAppInfo().getTenantId()),5,26);\n        }\n        // 复制给LocalContext上下文,在UserContextHolder中使用\n        ThreadLocalHolder.setUser(SysUserInfo.webClient(userId, tenantId));\n        // 构建问答信息\n        AppChatDebugCompletion appChatDebugCompletion\u003dnew AppChatDebugCompletion();\n        appChatDebugCompletion.setAppid(result.getAppInfo().getAppid());\n        appChatDebugCompletion.setQuestion(req.getPrompt());\n        appChatDebugCompletion.setConversationId(req.getConversationId());\n        appChatDebugCompletion.setPlatforms(Platforms.PC);\n        // integrations\n        appChatDebugCompletion.setIntegrations(List.of(ChatIntegration.from(AgentIntegrations.INNER_INTENT),ChatIntegration.from(AgentIntegrations.INNER_SUBQUERY)));\n        return appChatDebugCompletion;\n    }\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 75
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/openapi/web/OpenApiTest.java",
      "timestamp": 1761533697578,
      "startOffset": 1501,
      "endOffset": 2197,
      "codeContent": "infra.rag.chain.model.ChainCompletionParameter;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.constant.ModelProviders;\nimport com.torchv.infra.rag.http.interceptor.JWTAuthorizationInterceptor;\nimport com.torchv.infra.rag.llm.model.completions.BotCompletionResponse;\nimport com.torchv.infra.rag.llm.model.completions.BotMessage;\nimport com.torchv.infra.rag.llm.model.completions.BotRole;\nimport com.torchv.infra.rag.llm.supplier.AbstractLLMSupplier;\nimport com.torchv.infra.rag.llm.supplier.chatglm.request.ChatGLMTurboCompletion;\nimport com.torchv.infra.rag.llm.supplier.chatglm.response.ChatGLMCompletionResponse;\nimport com.torchv.infra.web.spring.properties",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 11
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/openapi/web/OpenChatAppController.java",
      "timestamp": 1761533697585,
      "startOffset": 890,
      "endOffset": 4308,
      "codeContent": "pojo.OpenAppChatValidationResult;\nimport com.torchv.application.openapi.domain.completion.ChatAppApiV1Completion;\nimport com.torchv.application.openapi.model.req.ChatValidationReq;\nimport com.torchv.application.openapi.model.resp.ChatValidationResp;\nimport com.torchv.application.openapi.service.OpenAPIService;\nimport com.torchv.application.openapi.service.OpenAppService;\nimport com.torchv.application.store.domain.builder.AppChatContextBuilder;\nimport com.torchv.common.constant.ApiCodes;\nimport com.torchv.common.model.Result;\nimport com.torchv.infra.rag.agent.BotAgent;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.common.exception.ApiException;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.enums.ParameterIn;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.validation.Valid;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.*;\n\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/3/20 20:11\n * @since torchv_server v0.1-beta.1.6\n */\n@RestController\n@RequestMapping(\"/openapi/app/api/v1\")\n@AllArgsConstructor\n@Slf4j\n@Tag(name \u003d \"app应用对话\")\npublic class OpenChatAppController {\n    \n    final OpenAppService openAppService;\n    final OpenAPIService openAPIService;\n    final BotAgent botAgent;\n    final BillingSubscribeAccountService billingSubscribeAccountService;\n    final AppChatContextBuilder appChatContextBuilder;\n\n\n    \n    @Operation(summary \u003d \"对话前参数校验\")\n    @Parameter(name \u003d \"x-torchv-site\", description \u003d \"站点,固定值:api.torchv.com\", required \u003d true, in \u003d ParameterIn.HEADER)\n    @PostMapping(\"/chat/validations\")\n    public Result\u003cChatValidationResp\u003e check(@Valid @RequestBody ChatValidationReq req, HttpServletRequest request) {\n        log.info(\"chat开放接口,api:{},prompt:{}\", \"/openapi/app/api/v1/chat/validations\", req.getPrompt());\n        return openAppService.validation(req, request);\n    }\n    \n    /**\n     * 完成对话\n     * @param v1Completion 请求参数\n     * @param response 响应\n     */\n    @Operation(summary \u003d \"一键嵌入-chat对话\")\n    @Parameter(name \u003d \"x-torchv-site\", description \u003d \"站点,固定值:api.torchv.com\", required \u003d true, in \u003d ParameterIn.HEADER)\n    @PostMapping(\"/chat/completions\")\n    public Object completions(@RequestBody ChatAppApiV1Completion v1Completion, HttpServletRequest request, HttpServletResponse response) {\n        log.info(\"chat开放接口,api:{},fromIp:{},fromHeader:{}\", \"/openapi/app/api/v1/chat/completions\", JakartaServletUtil.getClientIP(request), JakartaServletUtil.getHeaderMap(request));\n        // 1. 校验请求参数\n        OpenAppChatValidationResult result \u003d openAppService.validationCompletion(v1Completion);\n        // 校验账户余额\n        String tenantId \u003d result.getAppInfo().getTenantId();\n        boolean ret \u003d billingSubscribeAccountService.validateAvailableAmount(tenantId);\n        Assert.isTrue(ret, ApiException.one(ApiCodes.InsufficientAccountBalance));\n        // 3. 组装请求参数并设置响应ContentType\n        openAPIService.contentType(true, response);\n        v1Completion.setUserId(openAppService.userId(request));\n        // 4. 构建对话上下文\n        ChainContext chainContext \u003d appChatContextBuilder.build(openAppService.buildDebugCompletion(v1Completion, result));\n        //",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 74
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/domain/builder/AppChatContextBuilder.java",
      "timestamp": 1761533697705,
      "startOffset": 776,
      "endOffset": 6718,
      "codeContent": "n.hutool.core.util.StrUtil;\nimport com.torchv.application.knowledge.model.dto.PromptInfoResp;\nimport com.torchv.application.knowledge.model.request.PromptConfigReq;\nimport com.torchv.application.knowledge.service.ChatIntegrationService;\nimport com.torchv.application.store.domain.completion.AppChatDebugCompletion;\nimport com.torchv.application.store.domain.completion.LiteAgentContextCompletion;\nimport com.torchv.application.store.model.dto.AppSettingsResp;\nimport com.torchv.application.store.service.AppContainerService;\nimport com.torchv.application.store.service.AppInfoService;\nimport com.torchv.application.store.service.AppSettingsService;\nimport com.torchv.common.constant.ApiCodes;\nimport com.torchv.common.constant.AppTypes;\nimport com.torchv.common.context.UserContextHolder;\nimport com.torchv.common.exception.ApiException;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.kb.space.service.KnowledgeEmbeddingChangeService;\nimport com.torchv.infra.rag.chain.context.ContextBuilder;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.chain.model.ChainRequest;\nimport com.torchv.infra.rag.constant.AgentPromptSteps;\nimport com.torchv.infra.rag.constant.LLMDispatchers;\nimport com.torchv.infra.rag.llm.prompt.builder.LiteAgentContextPromptBuilder;\n\nimport com.torchv.repository.store.entity.AppInfo;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * 构建APP应用的大模型Chain上下文信息\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/4/21 11:48\n * @since torchv_server v1.7.2\n */\n@Slf4j\n@AllArgsConstructor\n@Component(\"appChatContextBuilder\")\npublic class AppChatContextBuilder implements ContextBuilder\u003cAppChatDebugCompletion\u003e {\n\n    final AppInfoService appInfoService;\n    final AppContainerService appContainerService;\n    final AppSettingsService appSettingsService;\n    final ChatIntegrationService chatIntegrationService;\n    final KnowledgeEmbeddingChangeService knowledgeEmbeddingChangeService;\n\n    @Override\n    public ChainContext build(AppChatDebugCompletion completion) {\n        log.info(\"构建APP应用的大模型Chain上下文信息\");\n        ChainContext chainContext \u003d new ChainContext();\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        chainContext.setTenantId(sysUserInfo.getTenantId());\n        chainContext.setUserId(sysUserInfo.getCode());\n        ChainRequest chainRequest \u003d new ChainRequest();\n        chainRequest.setPlatform(completion.getPlatforms());\n        Optional\u003cAppInfo\u003e appInfoOptional \u003d appInfoService.queryInfoByAppId(completion.getAppid(), sysUserInfo.getTenantId());\n        if (appInfoOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        AppInfo appInfo \u003d appInfoOptional.get();\n        AppTypes appTypes \u003d AppTypes.ofDefault(appInfo.getCategory());\n        // 是openapi接口\n        // chainRequest.setOpenapi(true);\n        chainRequest.setAppTypes(appTypes);\n        chainRequest.setQuestion(completion.getQuestion());\n        chainRequest.setReviseQuestion(completion.getQuestion());\n        Assert.notBlank(completion.getQuestion(), ApiException.one(ApiCodes.InvalidParameter));\n        // 如果是chatBot类型，需要赋予prompt\n        AppSettingsResp appSettingsResp \u003d appSettingsService.querySettingsByAppId(appInfo.getAppid(),sysUserInfo.getTenantId(),AppTypes.of(appInfo.getCategory()));\n        // 如果透传的config不为空，那么使用透传的config覆盖应用配置的config\n        if (completion.getConfig()\u003d\u003dnull){\n            // 使用绑定的配置config\n            PromptConfigReq configReq\u003dappSettingsResp.configReq();\n            completion.setConfig(configReq);\n        }\n        if (StrUtil.isBlank(completion.getPrompt())){\n            // 使用绑定的prompt\n            completion.setPrompt(appSettingsResp.getPrompt());\n        }\n\n        if (appTypes \u003d\u003d AppTypes.LITE_AGENT) {\n            // 如果是轻量级Agent，那么query和prompt需要处理\n            String prompt \u003d new LiteAgentContextPromptBuilder().build(LiteAgentContextCompletion.builder().question(completion.getQuestion()).prompt(appSettingsResp.getPrompt()).build());\n            chainRequest.setPrompt(prompt);\n            // LiteAgent应用不需要检索知识库\n            completion.setRagSearch(false);\n            chainContext.getSearchContext().setEnableEmbedding(false);\n            chainContext.getSearchContext().setEnableReRanker(false);\n        } else {\n            // 设置知识库id\n            // 查询应用绑定的容器\n            List\u003cString\u003e containerAppIds \u003dappContainerService.listContainers(appInfo);\n            if (CollUtil.isNotEmpty(containerAppIds)) {\n                // 设置embedding的模型\n                chainContext.getSearchContext().applyEmbeddingModel(knowledgeEmbeddingChangeService.checkKnowledgeConsistency(containerAppIds));\n            }else{\n                // 不进行embedding处理，直接大模型回复\n                chainContext.getSearchContext().setEnableEmbedding(false);\n                chainContext.getSearchContext().setEnableReRanker(false);\n                // 如果知识库没有绑定，那么不查询知识库，直接让大模型回答\n                //chainContext.getSearchContext().setRagSearch(false);\n                completion.setRagSearch(false);\n            }\n            // 使用应用设置的prompt\n            chainRequest.setPrompt(appSettingsResp.getPrompt());\n            // 设置添加prompt\n            chainContext.getPrompts().addPrompt(AgentPromptSteps.SYSTEM,appSettingsResp.getSystemPrompt());\n            chainContext.getPrompts().addPrompt(AgentPromptSteps.REWRITE,appSettingsResp.getRewritePrompt());\n            chainContext.getPrompts().addPrompt(AgentPromptSteps.SUB_QUERY,appSettingsResp.getSubQueryPrompt());\n            chainRequest.setContainerId(containerAppIds);\n        }\n        /**\n         * 输入的文件，可以根据输入文件进行对话\n         */\n        chainRequest.setFileId(completion.getFileId());\n        //chainRequest.setStream(true);\n        chainRequest.setStream(completion.isStream()",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 119
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761533697762,
      "startOffset": 2613,
      "endOffset": 6357,
      "codeContent": "infra.common.extra.log.LogContext;\nimport com.torchv.common.model.Pagination;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.kb.admin.model.dto.DepartmentUserOrgPermissions;\nimport com.torchv.kb.admin.service.KbDepartmentUserService;\nimport com.torchv.kb.common.constant.PlatFormTypes;\nimport com.torchv.kb.space.service.KnowledgeEmbeddingChangeService;\nimport com.torchv.repository.application.entity.AppInfoPermission;\nimport com.torchv.repository.application.mapper.AppInfoPermissionMapper;\nimport com.torchv.repository.chat.entity.SaasKnowledgeContainer;\nimport com.torchv.repository.kb.department.entity.KbDepartment;\nimport com.torchv.repository.kb.department.entity.KbDepartmentUser;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentMapper;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentUserMapper;\nimport com.torchv.repository.store.entity.AppInfo;\nimport com.torchv.repository.store.entity.AppPrompt;\nimport com.torchv.repository.store.entity.AppSettings;\nimport com.torchv.repository.store.entity.AppTheme;\nimport com.torchv.repository.store.mapper.AppInfoMapper;\nimport com.torchv.repository.store.mapper.AppPromptMapper;\nimport com.torchv.repository.store.mapper.AppSettingsMapper;\nimport com.torchv.repository.store.mapper.AppThemeMapper;\nimport com.torchv.infra.web.spring.properties.ChatBotConfig;\nimport com.torchv.infra.web.i18n.I18nMessage;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.redisson.api.RLock;\nimport org.redisson.api.RedissonClient;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static com.torchv.kb.common.constant.KbAppStatusTypes.*;\n\n/**\n * 应用信息模块-业务Service实现\n * @since torchv_server v0.1-beta.1.6\n * @author \u003ca href\u003d\"mailto:xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/03/19 15:05\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class AppInfoServiceImpl extends ServiceImpl\u003cAppInfoMapper, AppInfo\u003e implements AppInfoService {\n    \n    final AppInfoMapper appInfoMapper;\n    final AppContainerService appContainerService;\n    final I18nMessage i18nMessage;\n    final RedissonClient redissonClient;\n    final AppPromptService appPromptService;\n    final AppInfoPermissionMapper appInfoPermissionMapper;\n    final AppSettingsService appSettingsService;\n    final AppThemeService appThemeService;\n    final KnowledgeContainerService knowledgeContainerService;\n    final ChatBotConfig chatBotConfig;\n    final AppTagService appTagService;\n    final AppDestroyService appDestroyService;\n    final KbDepartmentUserMapper kbDepartmentUserMapper;\n    final KbDepartmentUserService kbDepartmentUserService;\n    final KbDepartmentMapper kbDepartmentMapper;\n    final AppPromptMapper appPromptMapper;\n    final AppSettingsMapper appSettingsMapper;\n    final AppThemeMapper appThemeMapper;\n    final UserService userService;\n    final KnowledgeEmbeddingChangeService knowledgeEmbeddingChangeService;\n\n\n    @Override\n    public Result\u003cString\u003e publishApp(String appid,String status) {\n        //String[] split \u003d appid.split(\",\");\n        //QueryWrapper\u003cAppInfo\u003e queryWrapper \u003d new QueryWrapper\u003cAppInfo\u003e().in(\"appid\", split);\n        LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d  Wrappers.lambdaQuery(AppInfo.class).in(AppInfo::getAppid, StrUtil.split(appid,StrUtil.COMMA));\n        AppInfo appInfo \u003d new AppInfo();\n        appInfo.setStatus(status);\n        int update \u003d baseMapper.update(appInfo, lambdaQ",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 82
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppSettingsServiceImpl.java",
      "timestamp": 1761533697781,
      "startOffset": 1604,
      "endOffset": 14737,
      "codeContent": "infra.rag.constant.Prompts;\nimport com.torchv.repository.chat.entity.SaasPromptTemplate;\nimport com.torchv.repository.chat.mapper.SaasPromptTemplateMapper;\nimport com.torchv.repository.store.entity.AppPrompt;\nimport com.torchv.repository.store.entity.AppSettings;\nimport com.torchv.repository.store.mapper.AppSettingsMapper;\nimport com.torchv.infra.web.i18n.I18nMessage;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport cn.hutool.core.lang.Assert;\n\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\n\nimport org.redisson.api.RLock;\nimport org.redisson.api.RedissonClient;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\nimport com.torchv.application.store.service.AppSettingsService;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDateTime;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\n\n/**\n * 应用配置模块-业务Service实现\n * @since torchv_server v0.1-beta.1.6\n * @author \u003ca href\u003d\"mailto:xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/03/20 10:10\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class AppSettingsServiceImpl implements AppSettingsService {\n    \n    final AppSettingsMapper appSettingsMapper;\n    final RedissonClient redissonClient;\n    final StringRedisTemplate stringRedisTemplate;\n    final I18nMessage i18nMessage;\n    final ModelProviderService modelProviderService;\n    final ChatPromptService chatPromptService;\n    final AppPromptService appPromptService;\n    final SaasPromptTemplateMapper saasPromptTemplateMapper;\n    \n    @Override\n    public void addDefaultSettings(String appid, String tenantId, AppTypes appTypes) {\n        AppSettings appSettings \u003d new AppSettings();\n        appSettings.setCreateTime(LocalDateTime.now());\n        appSettings.setModifierTime(LocalDateTime.now());\n        appSettings.setAppid(appid);\n        appSettings.setTenantId(tenantId);\n        PromptConfigReq configReq \u003d PromptConfigReq.DEFAULT;\n        appSettings.setQms(BigDecimal.valueOf(configReq.getQms()));\n        // 这里选择一个有效的模型\n        appSettings.setModelName(modelProviderService.availableModel(tenantId));\n        appSettings.setAutoReply(configReq.isRagNoContextFinallyAnswer() ? ToggleStatusEnum.YES.getCode() : ToggleStatusEnum.NO.getCode());\n        appSettings.setChatType(configReq.getChatType());\n        appSettings.setLlmDispatcherName(configReq.getLlmDispatcherName());\n        appSettings.setRagAlpha(BigDecimal.valueOf(configReq.getRagAlpha()));\n        appSettings.setRagNoContextFinallyAnswerText(configReq.getRagNoContextFinallyAnswerText());\n        appSettings.setReviseMinScore(BigDecimal.valueOf(configReq.getReviseMinScore()));\n        appSettings.setRms(BigDecimal.valueOf(configReq.getRms()));\n        appSettings.setTemperature(configReq.getTemperature());\n        appSettings.setTopP(configReq.getTopP());\n        // 轻量级Agent应用，无需检索知识库\n        if (appTypes \u003d\u003d AppTypes.LITE_AGENT) {\n            // 不开启知识库搜索\n            appSettings.setSearchKnowledge(ToggleStatusEnum.NO.getCode());\n            // 考虑到是LiteAgent应用类型，有些值需要设置屏蔽知识库检索\n            // 直接开启大模型回复\n            appSettings.setAutoReply(ToggleStatusEnum.YES.getCode());\n        } else {\n            appSettings.setSearchKnowledge(ToggleStatusEnum.YES.getCode());\n        }\n//        appSettings.setPrompt(Prompts.getPrompt(appTypes).getPrompt());\n        //新增默认要读取全局配置\n        PromptInfoResp promptInfoResp \u003d chatPromptService.queryPrompt(tenantId);\n        if (promptInfoResp !\u003d null \u0026\u0026 StrUtil.isNotBlank(promptInfoResp.getPrompt())) {\n            appSettings.setPrompt(promptInfoResp.getPrompt());\n        }else {\n            // 默认的Prompts配置\n            appSettings.setPrompt(Prompts.getPrompt(appTypes).getPrompt());\n        }\n        appSettingsMapper.insert(appSettings);\n    }\n    \n    /**\n     * 更新应用配置记录\n     * @param appSettingsUpdateReq 更新应用配置条件Vo\n     * @return 是否更新成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e update(AppSettingsUpdateReq appSettingsUpdateReq) {\n        log.info(\"根据主键id修改应用配置数据,Vo:{}\", appSettingsUpdateReq.toString());\n        String tenantId \u003d UserContextHolder.getTenantId();\n        LambdaQueryWrapper\u003cAppSettings\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppSettings.class).eq(AppSettings::getTenantId, tenantId).eq(AppSettings::getAppid, appSettingsUpdateReq.getAppid());\n        String redisKey \u003d Cns.LOCK_APP_THEME_KEY + tenantId + \":\" + appSettingsUpdateReq.getAppid();\n        RLock rLock \u003d redissonClient.getLock(redisKey);\n        try {\n            if (rLock.tryLock(10L, 10L, TimeUnit.SECONDS)) {\n                AppSettings dbAppSettings \u003d appSettingsMapper.selectOne(lambdaQueryWrapper, false);\n                AppSettings appSettings \u003d new AppSettings();\n                BeanUtils.copyProperties(appSettingsUpdateReq, appSettings);\n                BeanUtils.copyProperties(appSettingsUpdateReq.getConfig(), appSettings);\n                // 将config对象序列化为JSON字符串存储到config字段中\n                appSettings.setConfig(GsonUtils.GSON.toJson(appSettingsUpdateReq.getConfig()));\n                appSettings.setQms(BigDecimal.valueOf(appSettingsUpdateReq.getConfig().getQms()));\n                appSettings.setRms(BigDecimal.valueOf(appSettingsUpdateReq.getConfig().getRms()));\n                appSettings.setRagAlpha(BigDecimal.valueOf(appSettingsUpdateReq.getConfig().getRagAlpha()));\n                appSettings.setReviseMinScore(BigDecimal.valueOf(appSettingsUpdateReq.getConfig().getReviseMinScore()));\n                if (appSettingsUpdateReq.getConfig().isRagNoContextFinallyAnswer()) {\n                    appSettings.setAutoReply(ToggleStatusEnum.YES.getCode());\n                } else {\n                    appSettings.setAutoReply(ToggleStatusEnum.NO.getCode());\n                }\n                // 类型\n                appSettings.setModifierTime(LocalDateTime.now());\n                // 是否开启rag搜索\n                if (appSettingsUpdateReq.isRagSearch()) {\n                    appSettings.setSearchKnowledge(ToggleStatusEnum.YES.getCode());\n                } else {\n                    appSettings.setSearchKnowledge(ToggleStatusEnum.NO.getCode());\n                }\n                int ret;\n                if (dbAppSettings \u003d\u003d null) {\n                    ret \u003d appSettingsMapper.insert(appSettings);\n                } else {\n                    ret \u003d appSettingsMapper.update(appSettings, lambdaQueryWrapper);\n                }\n                // 配置发生变更，删除缓存，避免查询时获取到老数据\n                String cacheKey \u003d CacheCns.APP_CHAT_CONFIG_KEY + tenantId + \":\" + appSettingsUpdateReq.getAppid();\n                stringRedisTemplate.delete(cacheKey);\n                return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.insert.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.insert.fail\"));\n            }\n        } catch (InterruptedException e) {\n            log.error(\"获取锁异常\", e);\n        } finally {\n            if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                rLock.unlock();\n            }\n        }\n        return Result.error(i18nMessage.resolveMessage(\"system.common.insert.fail\"));\n    }\n    \n    /**\n     * 根据id查询应用配置详情\n     * @param id 应用配置主键id\n     * @return 应用配置详情\n     */\n    @Override\n    public Result\u003cAppSettingsResp\u003e queryById(Integer id) {\n        log.info(\"根据主键id查询应用配置详情,Id:{}\", id);\n        AppSettings appSettings \u003d appSettingsMapper.selectById(id);\n        Assert.notNull(appSettings, \"请求数据非法\");\n        AppSettingsResp appSettingsResp \u003d new AppSettingsResp();\n        BeanUtils.copyProperties(appSettings, appSettingsResp);\n        return Result.data(appSettingsResp);\n    }\n    \n    @Override\n    public Result\u003cAppSettingsResp\u003e queryByAppId(String appId) {\n        log.info(\"根据appid查询应用配置详情,appId:{}\", appId);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        LambdaQueryWrapper\u003cAppSettings\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppSettings.class).eq(AppSettings::getTenantId, tenantId).eq(AppSettings::getAppid, appId);\n        AppSettings appSettings \u003d appSettingsMapper.selectOne(lambdaQueryWrapper, false);\n        AppSettingsResp appSettingsResp \u003d new AppSettingsResp();\n        if (appSettings !\u003d null) {\n            appSettingsResp.applySettings(appSettings, modelProviderService.availableModel());\n        } else {\n            appSettingsResp.applyConfig(PromptConfigReq.DEFAULT, modelProviderService.availableModel());\n            // 设置prompt\n            appSettingsResp.setPrompt(Prompts.CHAT.getPrompt());\n            appSettingsResp.setAppid(appId);\n        }\n        return Result.data(appSettingsResp);\n    }\n    \n    @Override\n    public PromptInfoResp queryInfoByAppId(String appid, String tenantId, AppTypes appTypes) {\n        log.info(\"根据appid查询配置信息,appid:{},tenantId:{},appType:{}\", appid, tenantId,appTypes);\n        String redisKey \u003d CacheCns.APP_CHAT_CONFIG_KEY + tenantId + \":\" + appid;\n        String value \u003d stringRedisTemplate.opsForValue().get(redisKey);\n        if (StrUtil.isNotBlank(value)) {\n            log.info(\"从缓存中获取配置信息,redisKey:{},value:{}\", redisKey,value);\n            return GsonUtils.fromJson(value, PromptInfoResp.class).get();\n        } else {\n            LambdaQueryWrapper\u003cAppSettings\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppSettings.class).eq(AppSettings::getTenantId, tenantId).eq(AppSettings::getAppid, appid);\n            AppSettings appSettings \u003d appSettingsMapper.selectOne(lambdaQueryWrapper, false);\n            PromptInfoResp promptInfoResp \u003d new PromptInfoResp();\n            PromptConfigReq configReq \u003d new PromptConfigReq();\n            if (appSettings !\u003d null) {\n                // 配置信息赋值\n                BeanUtils.copyProperties(appSettings, configReq);\n                // 不同类型，单独set，避免copy方法失效\n                configReq.setQms(appSettings.getQms().floatValue());\n                configReq.setRms(appSettings.getRms().floatValue());\n                configReq.setRagAlpha(appSettings.getRagAlpha().floatValue());\n                configReq.setReviseMinScore(appSettings.getReviseMinScore().floatValue());\n                if (appSettings.getAutoReply() \u003d\u003d ToggleStatusEnum.YES.getCode()) {\n                    configReq.setRagNoContextFinallyAnswer(true);\n                } else {\n                    configReq.setRagNoContextFinallyAnswer(false);\n                }\n                promptInfoResp.setConfigReq(configReq);\n                promptInfoResp.setPrompt(appSettings.getPrompt());\n            } else {\n                promptInfoResp.setConfigReq(PromptConfigReq.DEFAULT);\n                promptInfoResp.setPrompt(Prompts.getPrompt(appTypes).getPrompt());\n            }\n            stringRedisTemplate.opsForValue().set(redisKey, GsonUtils.GSON.toJson(promptInfoResp), 1, TimeUnit.DAYS);\n            return promptInfoResp;\n        }\n    }\n    \n    /**\n     * 根据id查询应用配置实体详情\n     * @param id 主键id\n     * @return 应用配置的Optional\n     */\n    @Override\n    public Optional\u003cAppSettings\u003e queryInfoById(Integer id) {\n        log.info(\"根据请求id查询应用配置实体详情,id:{}\", id);\n        AppSettings appSettings \u003d appSettingsMapper.selectById(id);\n        if (appSettings !\u003d null) {\n            return Optional.of(appSettings);\n        }\n        return Optional.empty();\n    }\n    \n    @Override\n    public Optional\u003cAppSettings\u003e queryByAppId(String appId, String tenantId) {\n        LambdaQueryWrapper\u003cAppSettings\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppSettings.class).eq(AppSettings::getTenantId, tenantId).eq(AppSettings::getAppid, appId);\n        AppSettings appSettings \u003d appSettingsMapper.selectOne(lambdaQueryWrapper, false);\n        return Optional.ofNullable(appSettings);\n    }\n\n    @Override\n    public AppSettingsResp querySettingsByAppId(String appId,String tenantId, AppTypes appTypes) {\n        AppSettingsResp appSettingsResp \u003d new AppSettingsResp();\n        // 设置type\n        appSettingsResp.setCategory(appTypes.name());\n        Optional\u003cAppSettings\u003e appSettingsOptional \u003d this.queryByAppId(appId, tenantId);\n        if (appSettingsOptional.isPresent()) {\n            AppSettings appSettings \u003d appSettingsOptional.get();\n            // 判断配置信息JSON是否采用默认全局配置\n            if (StrUtil.isBlank(appSettings.getConfig()) || PromptConfigReq.DEFAULT.equals(appSettings.getConfig())) {\n                // 使用全局模板配置\n                LambdaQueryWrapper\u003cSaasPromptTemplate\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasPromptTemplate.class)\n                        .eq(SaasPromptTemplate::getTenantId, tenantId);\n                // 目前我看代码没做这个逻辑\n//                        .eq(SaasPromptTemplate::getUseFlag, 1);\n                SaasPromptTemplate saasPromptTemplate \u003d saasPromptTemplateMapper.selectOne(lambdaQueryWrapper, false);\n                if (saasPromptTemplate !\u003d null \u0026\u0026 StrUtil.isNotBlank(saasPromptTemplate.getConfig())) {\n                    // 将全局模板的config赋值给appSettings，然后再apply\n                    appSettings.setConfig(saasPromptTemplate.getConfig());\n                }\n            }",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 262
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/ChannelLarkChatServiceImpl.java",
      "timestamp": 1761533697809,
      "startOffset": 974,
      "endOffset": 6904,
      "codeContent": "knowledge.model.response.chat.ChatIntegration;\nimport com.torchv.application.openapi.domain.completion.ChatChannelCallbackCompletion;\nimport com.torchv.application.store.domain.builder.AppChatContextBuilder;\nimport com.torchv.application.store.domain.completion.AppChatDebugCompletion;\nimport com.torchv.application.store.model.dto.AppLarkConfig;\nimport com.torchv.application.store.service.ChannelLarkChatService;\nimport com.torchv.application.store.service.ChannelLarkService;\nimport com.torchv.common.constant.Platforms;\nimport com.torchv.common.constant.llm.AgentIntegrations;\nimport com.torchv.common.extra.filter.ThreadLocalHolder;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.common.utils.GsonUtils;\nimport com.torchv.pipeline.channel.lark.dto.LarkEventMessageDTO;\nimport com.torchv.pipeline.channel.lark.parser.ChatMessageParser;\nimport com.torchv.pipeline.channel.lark.message.MarkdownBodyApply;\nimport com.torchv.infra.rag.agent.BotAgent;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.llm.model.completions.BotCompletionResponse;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * \u003ca href\u003d\"https://open.feishu.cn/document/server-docs/im-v1/message-content-description/create_json#7111df05\"\u003e...\u003c/a\u003e\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/10/9 20:43\n * @since torchv_server v1.8.5\n */\n@AllArgsConstructor\n@Service\n@Slf4j\npublic class ChannelLarkChatServiceImpl implements ChannelLarkChatService {\n    \n    final BotAgent botAgent;\n    final ChannelLarkService channelLarkService;\n    final AppChatContextBuilder appChatContextBuilder;\n    \n    @Override\n    public void chat(LarkEventMessageDTO messageDTO) {\n        Optional\u003cAppLarkConfig\u003e configOptional \u003d channelLarkService.getByCode(messageDTO.getLarkId());\n        if (configOptional.isEmpty()) {\n            log.error(\"飞书应用配置不存在,appid:{}\", messageDTO.getLarkId());\n            return;\n        }\n        AppLarkConfig config \u003d configOptional.get();\n\n        // 构建用户信息\n        SysUserInfo sysUserInfo \u003d new SysUserInfo();\n        sysUserInfo.setCode(messageDTO.getUserId());\n        sysUserInfo.setTenantId(messageDTO.getTenantId());\n        // 复制给LocalContext上下文,在UserContextHolder中使用\n        ThreadLocalHolder.setUser(sysUserInfo);\n        // 构建问答信息\n        AppChatDebugCompletion appChatDebugCompletion\u003dnew AppChatDebugCompletion();\n        appChatDebugCompletion.setAppid(config.getAppid());\n        appChatDebugCompletion.setQuestion(messageDTO.getQuestion());\n        appChatDebugCompletion.setConversationId(messageDTO.getChatId());\n        appChatDebugCompletion.setPlatforms(Platforms.LARK);\n        appChatDebugCompletion.setStream(false);\n        // integrations\n        appChatDebugCompletion.setIntegrations(List.of(ChatIntegration.from(AgentIntegrations.INNER_INTENT),ChatIntegration.from(AgentIntegrations.INNER_SUBQUERY)));\n        ChainContext chainContext \u003d appChatContextBuilder.build(appChatDebugCompletion);\n        BotCompletionResponse botCompletionResponse \u003d botAgent.startSync(chainContext);\n        String answer \u003d botCompletionResponse.firstMessage();\n        Client client \u003d Client.newBuilder(config.getLarkId(), config.getSecret()).build();\n        try {\n            // 构建一个Markdown的回复格式\n            String markdown \u003d new MarkdownBodyApply().apply(answer);\n            if (StrUtil.equalsIgnoreCase(messageDTO.getChatType(), \"p2p\")) {\n                // 发送请求\n                CreateMessageResp resp \u003d client.im().message().create(CreateMessageReq.newBuilder()\n                        .receiveIdType(CreateMessageReceiveIdTypeEnum.OPEN_ID)\n                        .createMessageReqBody(CreateMessageReqBody.newBuilder()\n                                .msgType(\"post\")\n                                .receiveId(messageDTO.getUserId())\n                                .content(markdown)\n                                .uuid(IdUtil.fastSimpleUUID())\n                                .build())\n                        .build());\n                // 业务数据处理\n                log.info(Jsons.DEFAULT.toJson(resp.getData()));\n            } else if (StrUtil.equalsIgnoreCase(messageDTO.getChatType(), \"group\")) {\n                ReplyMessageResp resp \u003d client.im().message().reply(ReplyMessageReq.newBuilder().messageId(messageDTO.getMessageId()).replyMessageReqBody(\n                        ReplyMessageReqBody.newBuilder().msgType(\"post\").uuid(IdUtil.fastSimpleUUID())\n                                .content(markdown).build())\n                        .build());\n                log.info(Jsons.DEFAULT.toJson(resp.getData()));\n            }\n        } catch (Throwable e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n    \n    @Override\n    public String chat(P2MessageReceiveV1 event, AppLarkConfig appLarkConfig) {\n        // 构建用户信息\n        SysUserInfo sysUserInfo \u003d new SysUserInfo();\n        sysUserInfo.setCode(event.getEvent().getSender().getSenderId().getOpenId());\n        sysUserInfo.setTenantId(appLarkConfig.getTenantId());\n        // 复制给LocalContext上下文,在UserContextHolder中使用\n        ThreadLocalHolder.setUser(sysUserInfo);\n        // 构建问答信息\n        AppChatDebugCompletion appChatDebugCompletion\u003dnew AppChatDebugCompletion();\n        appChatDebugCompletion.setAppid(appLarkConfig.getAppid());\n        appChatDebugCompletion.setQuestion(new ChatMessageParser().apply(event));\n        appChatDebugCompletion.setConversationId(event.getEvent().getMessage().getChatId());\n        appChatDebugCompletion.setPlatforms(Platforms.LARK);\n        // integrations\n        appChatDebugCompletion.setIntegrations(List.of(ChatIntegration.from(AgentIntegrations.INNER_INTENT),ChatIntegration.from(AgentIntegrations.INNER_SUBQUERY)));\n        ChainContext chainContext \u003d appChatContextBuilder.build(appChatDebugCompletion",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 113
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/ChannelQyWechatChatServiceImpl.java",
      "timestamp": 1761533697824,
      "startOffset": 793,
      "endOffset": 4342,
      "codeContent": "knowledge.model.response.chat.ChatIntegration;\nimport com.torchv.application.store.domain.builder.AppChatContextBuilder;\nimport com.torchv.application.store.domain.completion.AppChatDebugCompletion;\nimport com.torchv.application.store.model.dto.AppQyWechatConfig;\nimport com.torchv.application.store.service.ChannelQyWechatChatService;\nimport com.torchv.application.store.service.ChannelQyWechatMessageService;\nimport com.torchv.application.store.service.ChannelQyWechatService;\nimport com.torchv.common.constant.Platforms;\nimport com.torchv.common.constant.llm.AgentIntegrations;\nimport com.torchv.common.extra.filter.ThreadLocalHolder;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.infra.rag.agent.BotAgent;\nimport com.torchv.infra.rag.chain.model.ChainContext;\nimport com.torchv.infra.rag.llm.model.completions.BotCompletionResponse;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport me.chanjar.weixin.common.error.WxErrorException;\nimport me.chanjar.weixin.cp.api.WxCpMessageService;\nimport me.chanjar.weixin.cp.api.WxCpService;\nimport me.chanjar.weixin.cp.api.impl.WxCpMessageServiceImpl;\nimport me.chanjar.weixin.cp.bean.message.*;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n/**\n * 实现微信的对话功能\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/9/20 18:03\n * @since torchv_server v1.8.3\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class ChannelQyWechatChatServiceImpl implements ChannelQyWechatChatService {\n    \n    final ChannelQyWechatService channelQyWechatService;\n    final BotAgent botAgent;\n    final ChannelQyWechatMessageService channelQyWechatMessageService;\n    final AppChatContextBuilder appChatContextBuilder;\n    \n    @Override\n    public WxCpXmlOutMessage chat(WxCpXmlMessage wxCpXmlMessage, Map\u003cString, Object\u003e map, WxCpService wxCpService) {\n        log.info(\"企业微信回调Chat事件\");\n        String agentId \u003d wxCpXmlMessage.getAgentId();\n        // conversationId使用fromUserName\n        String conversationId \u003d wxCpXmlMessage.getFromUserName();\n        String question \u003d wxCpXmlMessage.getContent();\n        if (StrUtil.isBlank(conversationId) || StrUtil.isBlank(question)) {\n            log.info(\"conversationId或者question为空\");\n            return null;\n        }\n        Optional\u003cAppQyWechatConfig\u003e wechatConfigOptional \u003d channelQyWechatService.getByCode(agentId);\n        if (wechatConfigOptional.isEmpty()) {\n            return null;\n        }\n        AppQyWechatConfig wechatConfig \u003d wechatConfigOptional.get();\n\n        // 构建用户信息\n        SysUserInfo sysUserInfo \u003d new SysUserInfo();\n        sysUserInfo.setCode(wxCpXmlMessage.getFromUserName());\n        sysUserInfo.setTenantId(wechatConfig.getTenantId());\n        // 复制给LocalContext上下文,在UserContextHolder中使用\n        ThreadLocalHolder.setUser(sysUserInfo);\n        // 构建问答信息\n        AppChatDebugCompletion appChatDebugCompletion\u003dnew AppChatDebugCompletion();\n        appChatDebugCompletion.setAppid(wechatConfig.getAppid());\n        appChatDebugCompletion.setQuestion(question);\n        appChatDebugCompletion.setConversationId(conversationId);\n        appChatDebugCompletion.setPlatforms(Platforms.QY_WECHAT);\n        appChatDebugCompletion.setStream(false);\n        // integrations\n        appChatDebugCompletion.setIntegrations(List.of(ChatIntegration.from(AgentIntegrations.INNER_INTENT),ChatIntegration.from(AgentIntegrations.INNER_SUBQUERY)));\n        ChainContext chainContext \u003d appChatContextBuilder.build(appChatDebugC",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 76
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/ChannelQyWechatMessageServiceImpl.java",
      "timestamp": 1761533697830,
      "startOffset": 1014,
      "endOffset": 1223,
      "codeContent": "infra.common.utils.MarkdownUtils;\nimport com.torchv.repository.chat.entity.SaasConversationInfo;\nimport com.torchv.infra.web.spring.properties.ChatBotConfig;\nimport com.torchv.unstructured.utils.CharacterUtils",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 4
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/web/ChatRecordController.java",
      "timestamp": 1761533697872,
      "startOffset": 2379,
      "endOffset": 3921,
      "codeContent": "不必须传递 @since 2025/10/24\n        // Assert.notBlank(pageQuery.getAppid(), \"请求参数错误,请重试\");\n        return recordService.listApp(pageNo, pageSize, pageQuery);\n    }\n\n\n    @Operation(summary \u003d \"问答记录导出\")\n    @GetMapping(\"/chat/export\")\n    public Result\u003cConversationRecordExportResp\u003e export(ChatRecordReq pageQuery, HttpServletResponse response) {\n        log.info(\"问答记录导出,API:{}\", \"/store/api/saas/app/chat/export\");\n        log.info(\"查询条件:{}\", pageQuery.toString());\n        // appid 必须传递\n        //Assert.notBlank(pageQuery.getAppid(), \"请求参数错误,请重试\");\n        return recordService.exportApp(pageQuery, response);\n    }\n    /**\n     * 会话记录\n     * @param pageNo 页码\n     * @param pageSize 页大小\n     * @param pageQuery 请求参数\n     * @return 分页数据\n     */\n    @Parameters({\n            @Parameter(name \u003d \"pageNo\", description \u003d \"页码\"),\n            @Parameter(name \u003d \"pageSize\", description \u003d \"页大小\")\n    })\n    @Operation(summary \u003d \"分页查询会话记录\")\n    @GetMapping(\"/topic/list\")\n    public Pagination\u003cConversationRecordResp\u003e list(ChatRecordReq pageQuery,\n                                                   @RequestParam(value \u003d \"pageNo\", defaultValue \u003d \"1\") Integer pageNo,\n                                                   @RequestParam(value \u003d \"pageSize\", defaultValue \u003d \"10\") Integer pageSize) {\n        log.info(\"会话记录接口,api:{}\", \"/store/api/saas/app/topic/list\");\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        pageQuery.setUserId(sysUserInfo.getCode());\n        return recordService.list(pageNo, pageSize, pageQuery);\n    }\n",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 37
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/system/service/impl/ModelProviderServiceImpl.java",
      "timestamp": 1761533697882,
      "startOffset": 1764,
      "endOffset": 5208,
      "codeContent": "infra.rag.constant.LLMModels;\nimport com.torchv.infra.rag.llm.model.ModelSetting;\nimport com.torchv.repository.system.entity.RagConfigLlmModel;\nimport com.torchv.repository.system.mapper.RagConfigLlmModelMapper;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/9/21 15:54\n * @since torchv_server v1.8.3\n */\n@AllArgsConstructor\n@Service\n@Slf4j\npublic class ModelProviderServiceImpl implements ModelProviderService {\n    \n    final RagConfigLlmModelMapper ragConfigLlmModelMapper;\n    final RagConfigLlmModelService ragConfigLlmModelService;\n    final StringRedisTemplate stringRedisTemplate;\n    final Lock lock \u003d new ReentrantLock(false);\n    \n    @Override\n    public List\u003cString\u003e availableModels() {\n        lock.lock();\n        try {\n            /**String value \u003d stringRedisTemplate.opsForValue().get(CacheCns.CACHE_MODEL_AVAILABLE_SETTING);\n            if (StrUtil.isNotBlank(value)) {\n                return StrUtil.split(value, StrUtil.COMMA);\n            }**/\n            // 从DB数据库里面查询\n            LambdaQueryWrapper\u003cRagConfigLlmModel\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(RagConfigLlmModel.class);\n            lambdaQueryWrapper.eq(RagConfigLlmModel::getOnlineStatus, ToggleStatusEnum.YES.getValue());\n            List\u003cRagConfigLlmModel\u003e ragConfigLlmModels \u003d ragConfigLlmModelMapper.selectList(lambdaQueryWrapper);\n            if (CollectionUtil.isNotEmpty(ragConfigLlmModels)) {\n                List\u003cString\u003e models \u003d ragConfigLlmModels.stream().map(RagConfigLlmModel::getModel).toList();\n                stringRedisTemplate.opsForValue().set(CacheCns.CACHE_MODEL_AVAILABLE_SETTING, StrUtil.join(StrUtil.COMMA, models), 2L, TimeUnit.HOURS);\n                return models;\n            }\n            return List.of();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    @Override\n    public List\u003cString\u003e availableLargeModels(String tenantId) {\n        List\u003cSelectGroupResp\u003e selectGroups\u003dragConfigLlmModelService.listModelGroup(tenantId, LargeModelType.LARGE_LANGUAGE_MODELS);\n        if (CollUtil.isNotEmpty(selectGroups)){\n            List\u003cString\u003e models\u003dnew ArrayList\u003c\u003e();\n            for (SelectGroupResp s:selectGroups){\n                if (CollUtil.isNotEmpty(s.getOptions())){\n                    models.addAll(s.getOptions().stream().map(SelectDetailResp::getValue).toList());\n                }\n            }\n            return models;\n        }\n        return List.of();\n    }\n\n    @Override\n    public List\u003cString\u003e availableReRankerModels(String tenantId) {\n        List\u003cSelectGroupResp\u003e selectGroups\u003dragConfigLlmModelService.listModelGroup(tenantId, LargeModelType.RERANK_MODELS);\n        if (CollUtil.isNotEmpty(selectGroups)){\n            List\u003cString\u003e models\u003dnew ArrayList\u003c\u003e();\n            for (SelectGroupResp s:selectGroups){\n                if (CollUtil.isNotEmpty(s.getOptions())){\n                    models.addAll(s.getOptions().stream().map(SelectDetailResp::getValue).toList());\n                }\n            }\n            return models;\n        }\n        return List.of();\n    }\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 84
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/user/web/AuthController.java",
      "timestamp": 1761533698026,
      "startOffset": 2361,
      "endOffset": 14547,
      "codeContent": "infra.common.extra.log.annotation.SysLog;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.model.base.CaptchaResult;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.infra.common.utils.CommonUtils;\nimport com.torchv.infra.common.utils.RedisUtil;\nimport com.torchv.infra.license.LicenseBootstrap;\nimport com.torchv.kb.system.service.SystemService;\nimport com.torchv.repository.tenant.entity.SaasTenantInfo;\nimport com.torchv.repository.user.entity.SysUser;\nimport com.torchv.infra.web.spring.properties.SecureConfig;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.enums.ParameterIn;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\nimport jakarta.validation.Valid;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\n\n/**\n * 鉴权服务api\n *\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2022/7/15 11:25\n */\n@Tag(name \u003d \"授权登录(PC端)\")\n@Slf4j\n@AllArgsConstructor\n@RestController\n@RequestMapping(\"/user/api/auth\")\npublic class AuthController {\n\n    final UserAuthService userAuthService;\n    final UserRoleService userRoleService;\n    final PermService permService;\n    final SecureConfig secureConfig;\n    final TenantInfoService tenantInfoService;\n    final SystemService systemService;\n    final UserService userService;\n    final LicenseBootstrap licenseBootstrap;\n    final ModuleEmbedAuthService moduleEmbedAuthService;\n    final SaTokenConfig saTokenConfig;\n\n\n    @GetMapping(\"/token\")\n    @Operation(summary \u003d \"获取嵌入Token\", description \u003d \"支持两种模式：1.平台密钥(tk-开头)获取token 2.临时token换取新token\")\n    public Result\u003cModuleEmbedAuthResp\u003e getToken(\n            @RequestParam(\"secureKey\") @Parameter(description \u003d \"密钥或临时token\", required \u003d true, in \u003d ParameterIn.QUERY) String secureKey,\n            HttpServletRequest request,\n            HttpServletResponse response) {\n\n        log.info(\"获取嵌入Token, secureKey: {}\", secureKey);\n        \n        ModuleEmbedAuthResp resp;\n        String newToken;\n        \n        // 判断secureKey是否以tk-开头（平台密钥）\n        if (secureKey.startsWith(Cns.API_TOKEN_PREFIX_V2)) {\n            // 模式1：平台密钥模式（tk-开头）\n            log.info(\"模式1：使用平台密钥获取token, secureKey: {}\", secureKey);\n            \n            // getEmbedToken内部会添加Bearer前缀\n            resp \u003d moduleEmbedAuthService.getEmbedToken(secureKey, request);\n            newToken \u003d resp.getToken();\n            \n            log.info(\"模式1：平台密钥生成token成功\");\n            \n        } else {\n            // 模式2：临时token模式（从/apiToken接口获取的token）\n            log.info(\"模式2：使用临时token换取新token, tempToken: {}\", secureKey);\n            \n            // 从Redis中查询userCode\n            String redisKey \u003d \"embed:api_token:\" + secureKey;\n            String userCode \u003d RedisUtil.getString(redisKey);\n            \n            // 验证临时token是否有效\n            Assert.isTrue(StringUtils.isNotEmpty(userCode), () -\u003e new BizException(ErrorCodeEnum.PARAM_ERROR.getCode(), \"临时token无效或已使用\"));\n            \n            log.info(\"模式2：从Redis查询到userCode: {}\", userCode);\n            \n            // 删除Redis中的临时token记录（保证一次性使用）\n            RedisUtil.del(redisKey);\n            log.info(\"模式2：已删除Redis中的临时token记录，保证一次性使用\");\n            \n            // 使用userCode生成新的token\n            SysUserInfo userInfo \u003d userAuthService.getUserInfo(userCode, 0, Cns.SYS_TYPE.CLI);\n            Assert.notNull(userInfo, () -\u003e new BizException(\"用户不存在\"));\n            \n            // 生成新Token\n            StpUtil.login(userCode);\n            UserContextHolder.setCurrentUser(userInfo);\n            newToken \u003d StpUtil.getTokenInfo().getTokenValue();\n            \n            Integer tokenExpireSeconds \u003d 7200; // 默认过期时间2小时\n            resp \u003d new ModuleEmbedAuthResp();\n            resp.setToken(newToken);\n            resp.setTokenExpireSeconds(tokenExpireSeconds);\n            \n            log.info(\"模式2：临时token换取新token成功\");\n        }\n\n        // 设置Cookie，将新token写入到自己域名的Cookie中\n        if (StringUtils.isNotEmpty(newToken)) {\n            // 使用token的过期时间作为Cookie的存活时间\n            // 优先使用resp中的过期时间，如果没有则使用Sa-Token配置文件中的timeout值\n            int cookieAliveTime \u003d resp.getTokenExpireSeconds() !\u003d null \n                ? resp.getTokenExpireSeconds() \n                : (int) saTokenConfig.getTimeout();\n\n            // 写入Sa-Token识别的Cookie名称（与配置文件中的token-name保持一致）\n            JakartaServletUtil.addCookie(response, saTokenConfig.getTokenName(), newToken, cookieAliveTime);\n            log.info(\"设置Sa-Token Cookie成功, cookieName: {}, cookieAliveTime: {}秒\", saTokenConfig.getTokenName(), cookieAliveTime);\n        }\n\n        return Result.success(resp);\n    }\n\n    @GetMapping(\"/apiToken\")\n    @Operation(summary \u003d \"获取API Token（纯接口版本）\", description \u003d \"用于第三方系统纯后端API调用，根据平台密钥生成一次性临时Token\")\n    public Result\u003cModuleEmbedAuthResp\u003e getApiToken(\n            @RequestParam(\"secureKey\") @Parameter(description \u003d \"平台密钥（完整格式：tk-xxx）\", required \u003d true, in \u003d ParameterIn.QUERY) String secureKey,\n            HttpServletRequest request) {\n\n        log.info(\"获取API Token（纯接口版本）, secureKey: {}\", secureKey);\n\n        // 如果传入的secureKey不包含tk-前缀，自动添加（兼容旧接口）\n        String fullSecureKey \u003d secureKey.startsWith(Cns.API_TOKEN_PREFIX_V2) ? secureKey : Cns.API_TOKEN_PREFIX_V2 + secureKey;\n        \n        // 调用服务层生成Token（支持缓存机制）\n        ModuleEmbedAuthResp resp \u003d moduleEmbedAuthService.getEmbedToken(fullSecureKey, request);\n        String userCode \u003d StpUtil.getLoginIdAsString();\n        \n        // 生成一个临时token（一次性使用）\n        String tempToken \u003d IdUtil.fastSimpleUUID();\n        \n        // 将临时token和userCode的映射存储到Redis，有效期与tokenExpireSeconds保持一致\n        Integer expireSeconds \u003d resp.getTokenExpireSeconds() !\u003d null ? resp.getTokenExpireSeconds() : 7200;\n        String redisKey \u003d \"embed:api_token:\" + tempToken;\n        RedisUtil.setString(redisKey, userCode, expireSeconds);\n        \n        log.info(\"生成临时API Token成功, tempToken: {}, userCode: {}, expireSeconds: {}秒\", tempToken, userCode, expireSeconds);\n\n        // 返回临时token\n        ModuleEmbedAuthResp result \u003d new ModuleEmbedAuthResp();\n        result.setToken(tempToken);\n        result.setTokenExpireSeconds(expireSeconds);\n        \n        return Result.success(result);\n    }\n\n    /**\n     * 登录接口，登录成功返回accessToken\n     *\n     * @param loginUserReq 请求参数\n     * @return accessToken\n     */\n    @PostMapping(\"/login\")\n    @Operation(summary \u003d \"登录接口\")\n    @SysLog(value \u003d \"用户登录\", module \u003d SystemModule.LOGIN)\n    public Result\u003cLoginResp\u003e login(@Valid @RequestBody LoginUserReq loginUserReq) {\n        // 校验license，登录的时候校验\n        LicenseBootstrap.checkLicense();\n        LoginResp loginResult \u003d new LoginResp();\n        // 校验验证码\n        String cacheCode \u003d RedisUtil.getString(Cns.getCacheKeyImgCode(loginUserReq.getVerifyCodeToken()));\n        try {\n            Assert.isTrue(StringUtils.isNotEmpty(cacheCode), () -\u003e new BizException(ErrorCodeEnum.VERIFY_CODE_ERROR));\n            Assert.isTrue(cacheCode.equalsIgnoreCase(loginUserReq.getVerifyCode()), () -\u003e new BizException(ErrorCodeEnum.VERIFY_CODE_ERROR));\n        } finally {\n            // 验证码只能使用一次\n            RedisUtil.del(Cns.getCacheKeyImgCode(loginUserReq.getVerifyCodeToken()));\n        }\n        LoginDecrypt decrypt \u003d new LoginDecrypt(secureConfig, loginUserReq.getUsername(), loginUserReq.getPwd());\n        // 鉴权\n        String accessToken \u003d userAuthService.auth(decrypt.decryptUser(), decrypt.decryptPwd(), loginUserReq.getSysType());\n        loginResult.setXzAccessToken(accessToken);\n        return Result.success(loginResult);\n    }\n    /**\n     * 登录接口，登录成功返回accessToken（该接口去掉了验证码，单独给测试团队做自动化接口登录使用，不在程序界面功能中使用）\n     * @param loginUserReq 请求对象参数\n     * @return accessToken\n     */\n    @Operation(summary \u003d \"登录接口-非验证码\", description \u003d \"登录接口，登录成功返回accessToken（该接口去掉了验证码，单独给测试团队做自动化接口登录使用，不在程序界面功能中使用）\")\n    @PostMapping(\"/loginAuto\")\n    public Result\u003cLoginResp\u003e loginAuto(@Valid @RequestBody LoginUserAutoReq loginUserReq) {\n        LoginResp loginResult \u003d new LoginResp();\n        // 鉴权\n        LoginDecrypt decrypt \u003d new LoginDecrypt(secureConfig, loginUserReq.getUsername(), loginUserReq.getPwd());\n        String accessToken \u003d userAuthService.auth(decrypt.decryptUser(), decrypt.decryptPwd(), loginUserReq.getSysType());\n        loginResult.setXzAccessToken(accessToken);\n        return Result.success(loginResult);\n    }\n\n    /**\n     * H5端登录接口，登录成功返回accessToken\n     * @param loginH5UserReq 请求参数\n     * @return accessToken\n     */\n    @PostMapping(\"/h5Login\")\n    @Operation(summary \u003d \"H5端登录接口\")\n    @SysLog(value \u003d \"H5端登录接口\", module \u003d SystemModule.LOGIN)\n    public Result\u003cLoginH5Resp\u003e h5Login(@Valid @RequestBody LoginH5UserReq loginH5UserReq) throws ApiException {\n        log.info(\"H5端账号密码登录接口,api:{}\", \"/kb/auth/h5Login\");\n        return userAuthService.h5Login(loginH5UserReq);\n    }\n\n    /**\n     * 重定向 SSO 登录的 URL\n     * @param response\n     * @throws IOException\n     */\n    @GetMapping(\"/userLogin\")\n    @Operation(summary \u003d \"SSO登录跳转\")\n    public void ssoLoginRedirection(HttpServletResponse response) throws IOException {\n        try {\n            String loginUrl \u003d userAuthService.buildLoginUrl();\n            log.info(\"SSO登录跳转,loginUrl:{}\", loginUrl);\n            if (ObjectUtil.isNotEmpty(loginUrl)) {\n                // 重定向到三方鉴权URL\n                response.sendRedirect(loginUrl);\n            } else {\n                // URL无效，发送 400 错误响应\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"无效的登录 URL\");\n            }\n        } catch (IOException e) {\n            log.error(\"SSO登录重定向跳转异常\", e);\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"重定向到登录页面时发生错误\");\n        }\n    }\n\n    /**\n     * 处理SSO回调请求\n     * @param code 一次性鉴权码\n     * @param state 自定义加密查询参数\n     * @param session\n     * @param response\n     * @return\n     * @throws IOException\n     */\n    @GetMapping(\"/callback\")\n    @Operation(summary \u003d \"用户登录回调接口\")\n    public Result\u003cLoginKbResp\u003e callback(@RequestParam(\"code\") String code,\n            @RequestParam(value \u003d \"state\", required \u003d false) String state, HttpSession session, HttpServletResponse response) throws IOException {\n        Result\u003cLoginKbResp\u003e loginKbRespResult \u003d null;\n        try {\n            // 调用服务层处理回调请求\n            loginKbRespResult \u003d userAuthService.handleSSOCallback(code, state, session, response);\n        } catch (Exception e) {\n            log.error(\"处理回调请求时出错\", e);\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"处理回调请求时出错\");\n        }\n        return loginKbRespResult;\n    }\n\n\n    /**\n     * 用户登出接口\n     * @return 退出成功\n     */\n    @Operation(summary \u003d \"用户登出接口\")\n    @PostMapping(\"/logout\")\n    @SaCheckLogin\n    public Result\u003cString\u003e logout(HttpServletResponse response) {\n        // 获取当前token\n        String currentToken \u003d StpUtil.getTokenValue();\n        \n        // 删除Redis中的token缓存（embed:token:*格式的key）\n        // 由于不知道具体的secureKey，需要通过token查找并删除对应的缓存\n        String userCode \u003d StpUtil.getLoginIdAsString();\n        if (StringUtils.isNotEmpty(currentToken) \u0026\u0026 StringUtils.isNotEmpty(userCode)) {\n            // 尝试删除可能存在的embed token缓存\n            // 格式：embed:token:{secureKey}:{userCode}\n            String pattern \u003d \"embed:token:*:\" + userCode;\n            Collection\u003cString\u003e keys \u003d RedisUtil.keys(pattern);\n            if (keys !\u003d null \u0026\u0026 !keys.isEmpty()) {\n                RedisUtil.del(keys.toArray(new String[0]));\n                log.info(\"已删除用户 {} 的embed token缓存，共 {} 个key\", userCode, keys.size());\n            }\n        }\n        \n        // 执行Sa-Token登出\n        StpUtil.logout();\n        \n        // 手动清除Cookie（删除通过/token接口设置的cookie）\n        JakartaServletUtil.addCookie(response, saTokenConfig.getTokenName(), null, 0);\n        log.info(\"已清除Cookie: {}\", saTokenConfig.getTokenName());\n        \n        log.info(\"用户登出成功，已清除token、redis缓存和cookie\");\n        ",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 302
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/admin/service/impl/KbThirdPartServiceImpl.java",
      "timestamp": 1761533698089,
      "startOffset": 1697,
      "endOffset": 24143,
      "codeContent": "infra.common.external.queue.RabbitMessageService;\nimport com.torchv.common.model.Pagination;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.kb.admin.model.event.DepartmentThirdPartImportMessage;\nimport com.torchv.kb.admin.model.request.KbConfigThirdPartReq;\nimport com.torchv.kb.admin.model.response.*;\nimport com.torchv.kb.admin.service.KbThirdPartService;\nimport com.torchv.kb.common.constant.KbAsyncTasksStatusTypes;\nimport com.torchv.kb.common.constant.KbEventMessageTypes;\nimport com.torchv.kb.common.model.KbEventMessageCallbackDTO;\nimport com.torchv.repository.kb.system.entity.KbAsyncTasksStatus;\nimport com.torchv.repository.kb.system.mapper.KbAsyncTasksStatusMapper;\nimport com.torchv.repository.kb.thirdPartImport.entity.KbThirdPartDingTalk;\nimport com.torchv.repository.kb.thirdPartImport.entity.KbThirdPartImportConfig;\nimport com.torchv.repository.kb.thirdPartImport.mapper.KbThirdPartDingTalkMapper;\nimport com.torchv.repository.kb.thirdPartImport.mapper.KbThirdPartImportConfigMapper;\nimport com.torchv.infra.web.i18n.I18nMessage;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.redisson.api.RLock;\nimport org.redisson.api.RedissonClient;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * 第三方平台导入\n *\n * @author liuchuan\u003ca href \u003d \" lanhaichen2021 @ gmail.com \"\u003elanhaichen2021@gmail.com\u003c/a\u003e\n * 1/2/25 13:38\n * @since torchv_server kb-v0.0.1\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class KbThirdPartServiceImpl extends ServiceImpl\u003cKbThirdPartImportConfigMapper, KbThirdPartImportConfig\u003e implements KbThirdPartService {\n\n    final KbAsyncTasksStatusMapper kbAsyncTasksStatusMapper;\n    final RabbitMessageService rabbitMessageService;\n    final KbThirdPartImportConfigMapper kbThirdPartImportConfigMapper;\n    final KbThirdPartDingTalkMapper kbThirdPartDingTalkMapper;\n    final I18nMessage i18nMessage;\n    final RedisTemplate\u003cString, String\u003e redisTemplate;\n    final RedissonClient redissonClient;\n\n    /**\n     * 验证钉钉API权限\n     *\n     * @param appKey    钉钉应用的AppKey\n     * @param appSecret 钉钉应用的AppSecret\n     * @throws RuntimeException 当权限验证失败时抛出异常\n     */\n    public void validateDingTalkPermissions(String appKey, String appSecret) {\n        // 定义请求客户端\n        DingTalkClient tokenClient \u003d new DefaultDingTalkClient(\"https://oapi.dingtalk.com/gettoken\");\n        DingTalkClient subDepClient \u003d new DefaultDingTalkClient(\"https://oapi.dingtalk.com/topapi/v2/department/listsubid\");\n        DingTalkClient userClient \u003d new DefaultDingTalkClient(\"https://oapi.dingtalk.com/topapi/v2/user/list\");\n\n        // 1. 获取token\n        OapiGettokenRequest req \u003d new OapiGettokenRequest();\n        req.setAppkey(appKey);\n        req.setAppsecret(appSecret);\n        req.setHttpMethod(\"GET\");\n\n        OapiGettokenResponse rsp;\n        try {\n            rsp \u003d tokenClient.execute(req);\n        } catch (Exception e) {\n            throw new RuntimeException(i18nMessage.resolveMessage(\"kb.system.department.sync.get.access.token\"));\n        }\n        Assert.equals(rsp.getErrcode(), 0L, i18nMessage.resolveMessage(\"kb.system.department.sync.get.access.token\"));\n        Assert.notNull(rsp.getAccessToken(), i18nMessage.resolveMessage(\"kb.system.department.sync.get.access.token\"));\n        String accessToken \u003d rsp.getAccessToken();\n\n        // 2. 测试部门信息读权限\n        OapiV2DepartmentListsubidRequest reqDepList \u003d new OapiV2DepartmentListsubidRequest();\n        reqDepList.setDeptId(1L);\n        OapiV2DepartmentListsubidResponse rspDepList \u003d null;\n        try {\n            rspDepList \u003d subDepClient.execute(reqDepList, accessToken);\n        } catch (ApiException e) {\n            throw new RuntimeException(e);\n        }\n        Assert.equals(rspDepList.getErrcode(), 0L, rspDepList.getMsg());\n\n        // 3. 测试部门成员读权限\n        OapiV2UserListRequest userReq \u003d new OapiV2UserListRequest();\n        userReq.setDeptId(1L);\n        userReq.setCursor(0L);\n        userReq.setSize(1L);\n        OapiV2UserListResponse userRsp \u003d null;\n        try {\n            userRsp \u003d userClient.execute(userReq, accessToken);\n        } catch (Exception e) {\n            throw new RuntimeException(i18nMessage.resolveMessage(\"kb.system.department.sync.get.department.user\"));\n        }\n        Assert.equals(userRsp.getErrcode(), 0L, i18nMessage.resolveMessage(\"kb.system.department.sync.get.department.user\"));\n        // 4. 测试手机号和个人信息权限\n        List\u003cOapiV2UserListResponse.ListUserResponse\u003e list \u003d userRsp.getResult().getList();\n\n        // Assert.isTrue(CollUtil.isNotEmpty(list), i18nMessage.resolveMessage(\"kb.system.department.sync.get.department.user\"));\n        // OapiV2UserListResponse.ListUserResponse userResponse \u003d list.get(0);\n        // // mobile字段，如果没有开通的情况下，钉钉接口不回返回，直接校验这个字段即可。\n        // Assert.isTrue(StrUtil.isNotBlank(userResponse.getMobile()), i18nMessage.resolveMessage(\"kb.system.department.sync.null.user\"));\n        // 用户根部门下不一定有用户，故为空就不判断\n        if (CollUtil.isNotEmpty(list)) {\n            OapiV2UserListResponse.ListUserResponse userResponse \u003d list.get(0);\n            // mobile字段，如果没有开通的情况下，钉钉接口不回返回，直接校验这个字段即可。\n            Assert.isTrue(StrUtil.isNotBlank(userResponse.getMobile()), i18nMessage.resolveMessage(\"kb.system.department.sync.null.user\"));\n        }\n\n        /**\n         UserImport foundUser \u003d null;\n         // 获取部门id列表，用于尝试获取一个用户\n         List\u003cLong\u003e depIdList \u003d rspDepList.getResult().getDeptIdList();\n         for (Long depId : depIdList) {\n         OapiV2UserListRequest reqUser \u003d new OapiV2UserListRequest();\n         reqUser.setDeptId(depId);\n         reqUser.setCursor(0L);\n         reqUser.setSize(10L);\n         reqUser.setOrderField(\"modify_desc\");\n         // 是否返回访问受限的员工\n         reqUser.setContainAccessLimit(false);\n         reqUser.setLanguage(\"zh_CN\");\n         OapiV2UserListResponse rspUser \u003d null;\n         try {\n         rspUser \u003d userClient.execute(reqUser, accessToken);\n         } catch (ApiException e) {\n         throw new RuntimeException(e);\n         }\n         List\u003cUserImport\u003e userInfoByDepId \u003d rspUser.getResult().getList().stream()\n         .filter(Objects::nonNull)\n         .map(userInfo -\u003e {\n         UserImport userImport \u003d UserImport.builder().build();\n         BeanUtils.copyProperties(userInfo, userImport);\n         userImport.setDeptIdList(new ArrayList\u003c\u003e());\n         userInfo.getDeptIdList().forEach(deptId -\u003e {\n         userImport.getDeptIdList().add(deptId);\n         });\n         return userImport;\n         }).toList();\n\n         if (!userInfoByDepId.isEmpty()) {\n         foundUser \u003d userInfoByDepId.get(0);\n         break;\n         }\n\n         // 遍历子部门\n         OapiV2DepartmentListsubidRequest reqSubDepList \u003d new OapiV2DepartmentListsubidRequest();\n         reqSubDepList.setDeptId(depId);\n         OapiV2DepartmentListsubidResponse rspSubDepLst \u003d null;\n         try {\n         rspSubDepLst \u003d subDepClient.execute(reqSubDepList, accessToken);\n         } catch (Exception e) {\n         throw new RuntimeException(e);\n         }\n         depIdList.addAll(rspSubDepLst.getResult().getDeptIdList());\n         }\n\n         if (foundUser !\u003d null) {\n         Assert.notNull(foundUser.getMobile(), i18nMessage.resolveMessage(\"kb.system.department.sync.get.user.tel\"));\n         } else {\n         throw new RuntimeException(i18nMessage.resolveMessage(\"kb.system.department.sync.null.user\"));\n         }**/\n\n    }\n\n    /**\n     * 配置第三方平台\n     *\n     * @param kbConfigThirdPartReq\n     * @return\n     */\n    @Override\n    public Result\u003cBoolean\u003e configThirdPart(KbConfigThirdPartReq kbConfigThirdPartReq) {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        String userCode \u003d sysUserInfo.getCode();\n        String tenantId \u003d sysUserInfo.getTenantId();\n\n        String key \u003d Cns.LOCK_KNOWLEDGE_KEY + tenantId;\n        RLock rLock \u003d redissonClient.getLock(key);\n        try {\n            // 1. 判断渠道\n            Platforms platforms \u003d Platforms.of(kbConfigThirdPartReq.getThirdPartPlatformName());\n            switch (Objects.requireNonNull(platforms)) {\n                case DING_TALK -\u003e {\n                    // 2. 验证钉钉应用权限\n                    validateDingTalkPermissions(\n                            kbConfigThirdPartReq.getThirdPartPlatformId(),\n                            kbConfigThirdPartReq.getThirdPartPlatformSecret());\n\n                    // 3. 判断更新/新增\n                    KbThirdPartImportConfig existConfig \u003d kbThirdPartImportConfigMapper.selectOne(Wrappers.\u003cKbThirdPartImportConfig\u003elambdaQuery().eq(KbThirdPartImportConfig::getTenantId, tenantId));\n                    KbThirdPartDingTalk existDingTalk \u003d kbThirdPartDingTalkMapper.selectOne(Wrappers.\u003cKbThirdPartDingTalk\u003elambdaQuery().eq(KbThirdPartDingTalk::getTenantId, tenantId));\n                    // 4.1 新增\n                    if (ObjectUtil.isNull(existDingTalk) \u0026\u0026 ObjectUtil.isNull(existConfig)) {\n                        existDingTalk \u003d KbThirdPartDingTalk.builder()\n                                .createTime(LocalDateTime.now())\n                                .creator(userCode)\n                                .modifierTime(LocalDateTime.now())\n                                .modifier(userCode)\n                                .tenantId(tenantId)\n                                .dingtalkId(kbConfigThirdPartReq.getThirdPartPlatformId())\n                                .dingtalkSecret(kbConfigThirdPartReq.getThirdPartPlatformSecret())\n                                .build();\n                        existConfig \u003d KbThirdPartImportConfig.builder()\n                                .createTime(LocalDateTime.now())\n                                .creator(userCode)\n                                .modifierTime(LocalDateTime.now())\n                                .modifier(userCode)\n                                .tenantId(tenantId)\n                                .thirdPartName(Platforms.DING_TALK.name())\n                                .build();\n\n                        kbThirdPartDingTalkMapper.insert(existDingTalk);\n                        kbThirdPartImportConfigMapper.insert(existConfig);\n                    }\n                    // 4.2 更新\n                    else if (ObjectUtil.isNotNull(existConfig) \u0026\u0026 ObjectUtil.isNotNull(existDingTalk)) {\n                        existDingTalk.setModifier(userCode);\n                        existDingTalk.setModifierTime(LocalDateTime.now());\n                        existDingTalk.setDingtalkId(kbConfigThirdPartReq.getThirdPartPlatformId());\n                        existDingTalk.setDingtalkSecret(kbConfigThirdPartReq.getThirdPartPlatformSecret());\n                        kbThirdPartDingTalkMapper.updateById(existDingTalk);\n                        // 4.3 用户试图绑定多个平台\n                    } else if (ObjectUtil.isNotNull(existConfig) \u0026\u0026 ObjectUtil.isNull(existDingTalk)) {\n                        throw new RuntimeException(i18nMessage.resolveMessage(\"kb.system.department.sync.repeat.platform\"));\n                        // 4.4 用户数据损坏，重建config\n                    } else if (ObjectUtil.isNull(existConfig) \u0026\u0026 ObjectUtil.isNotNull(existDingTalk)) {\n                        existConfig \u003d KbThirdPartImportConfig.builder()\n                                .createTime(LocalDateTime.now())\n                                .creator(userCode)\n                                .modifierTime(LocalDateTime.now())\n                                .modifier(userCode)\n                                .tenantId(tenantId)\n                                .thirdPartName(Platforms.DING_TALK.name())\n                                .build();\n\n                        existDingTalk.setModifier(userCode);\n                        existDingTalk.setModifierTime(LocalDateTime.now());\n                        existDingTalk.setDingtalkId(kbConfigThirdPartReq.getThirdPartPlatformId());\n                        existDingTalk.setDingtalkSecret(kbConfigThirdPartReq.getThirdPartPlatformSecret());\n\n                        kbThirdPartDingTalkMapper.updateById(existDingTalk);\n                        kbThirdPartImportConfigMapper.insert(existConfig);\n                    }\n                }\n                default -\u003e throw new RuntimeException(i18nMessage.resolveMessage(\"kb.system.department.sync.unsupported.platform\"));\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n        } finally {\n            // 释放分布式锁\n            if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                rLock.unlock();\n                log.info(\"free thirdPartImportConfig lock successful...\");\n            }\n        }\n        return Result.success(Boolean.TRUE);\n    }\n\n    @Override\n    public Result\u003cKbThirdPartGetConfigResp\u003e getThirdPartConfig() {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        String tenantId \u003d sysUserInfo.getTenantId();\n        KbThirdPartImportConfig kbThirdPartImportConfig \u003d kbThirdPartImportConfigMapper.selectOne(Wrappers.\u003cKbThirdPartImportConfig\u003elambdaQuery().eq(KbThirdPartImportConfig::getTenantId, tenantId));\n        Assert.notNull(kbThirdPartImportConfig, \"kb.system.department.sync.null.config\");\n        String thirdPartName \u003d kbThirdPartImportConfig.getThirdPartName();\n        switch (Platforms.valueOf(thirdPartName)) {\n            case DING_TALK -\u003e {\n                KbThirdPartDingTalk existDingTalk \u003d kbThirdPartDingTalkMapper.selectOne(Wrappers.\u003cKbThirdPartDingTalk\u003elambdaQuery().eq(KbThirdPartDingTalk::getTenantId, tenantId), false);\n                Assert.notNull(existDingTalk, \"kb.system.department.sync.null.config\");\n                KbThirdPartGetConfigResp dingTalkResp \u003d new KbThirdPartGetConfigResp();\n                dingTalkResp.setPlatformName(Platforms.DING_TALK.name());\n                dingTalkResp.setDingtalkId(existDingTalk.getDingtalkId());\n                dingTalkResp.setDingtalkSecret(existDingTalk.getDingtalkSecret());\n                return Result.data(dingTalkResp);\n            }\n            default -\u003e throw new RuntimeException(i18nMessage.resolveMessage(\"kb.system.department.sync.unsupported.platform\"));\n        }\n\n    }\n\n    /**\n     * 第三方平台导入组织架构\n     *\n     * @return 是否成功\n     */\n    @Override\n    public Result\u003cKbDepartmentKbThirdPartImportResp\u003e thirdPartImport() {\n        log.info(\"第三方平台导入组织架构\");\n        SysUserInfo currentUser \u003d UserContextHolder.getCurrentUser();\n        String tenantId \u003d currentUser.getTenantId();\n        String currentUserCode \u003d currentUser.getCode();\n\n        // 1. 清理超时的进行中任务（30分钟超时）\n        cleanUpStuckTasks(tenantId, currentUserCode);\n\n        // 2. 查询当前租户是否有任务正在进行中\n        KbAsyncTasksStatus asyncTasksStatus \u003d kbAsyncTasksStatusMapper.selectOne(Wrappers.\u003cKbAsyncTasksStatus\u003elambdaQuery()\n                // 单任务类型\n                .eq(KbAsyncTasksStatus::getType, KbEventMessageTypes.EVENT_ThirdPartImport.name())\n                // 租户ID\n                .eq(KbAsyncTasksStatus::getTenantId, tenantId)\n                .in(KbAsyncTasksStatus::getStatus, Arrays.asList(\n                        KbAsyncTasksStatusTypes.PENDING.getStatus(),\n                        KbAsyncTasksStatusTypes.IN_PROGRESS.getStatus())));\n        Assert.isNull(asyncTasksStatus, \"kb.system.task.sync.in_progress\");\n\n        // 3. 查询对应租户,判断是否满足\n        KbThirdPartImportConfig kbThirdPartImportConfig \u003d kbThirdPartImportConfigMapper.selectOne(Wrappers.\u003cKbThirdPartImportConfig\u003elambdaQuery().eq(KbThirdPartImportConfig::getTenantId, tenantId));\n        Assert.notNull(kbThirdPartImportConfig, \"kb.system.department.sync.null.config\");\n        String platformName \u003d kbThirdPartImportConfig.getThirdPartName();\n\n        switch (Objects.requireNonNull(Platforms.of(platformName))) {\n            case DING_TALK -\u003e {\n                KbThirdPartDingTalk kbThirdPartDingTalk \u003d kbThirdPartDingTalkMapper.selectOne(Wrappers.\u003cKbThirdPartDingTalk\u003elambdaQuery().eq(KbThirdPartDingTalk::getTenantId, tenantId));\n                String id \u003d kbThirdPartDingTalk.getDingtalkId();\n                String secret \u003d kbThirdPartDingTalk.getDingtalkSecret();\n                // 4. 保存任务状态\n                String taskId \u003d IdUtil.getSnowflakeNextIdStr();\n                kbAsyncTasksStatusMapper.insert(KbAsyncTasksStatus.builder()\n                        .creator(currentUserCode)\n                        .createTime(LocalDateTime.now())\n                        .modifierTime(LocalDateTime.now())\n                        .modifier(currentUserCode)\n                        .type(KbEventMessageTypes.EVENT_ThirdPartImport.name())\n                        .status(KbAsyncTasksStatusTypes.PENDING.getStatus())\n                        .code(taskId)\n                        .tenantId(tenantId)\n                        .description(Platforms.DING_TALK.name())\n                        .build());\n\n                // 5. 发送异步消息\n                DepartmentThirdPartImportMessage commonEvent \u003d DepartmentThirdPartImportMessage.of(tenantId, currentUserCode, platformName, id, secret, taskId);\n                KbEventMessageCallbackDTO callbackDTO \u003d KbEventMessageCallbackDTO.of(KbEventMessageTypes.EVENT_ThirdPartImport, commonEvent);\n                rabbitMessageService.sendKbThirdPartImportMessage(callbackDTO);\n                // 6. 返回任务Id\n                return Result.success(new KbDepartmentKbThirdPartImportResp(taskId));\n            }\n            default -\u003e throw new RuntimeException(i18nMessage.resolveMessage(\"kb.system.department.sync.unsupported.platform\"));\n        }\n    }\n\n    @Override\n    public Result\u003cKbDepartmentQueryProcessResp\u003e processQuery(String taskId) {\n        String key \u003d Cns.IMPORT_PROGRESS_KEY_PREFIX + taskId;\n        String progress \u003d redisTemplate.opsForValue().get(key);\n        if (StringUtils.isBlank(progress)) {\n            return Result.success(new KbDepartmentQueryProcessResp(\"0\", KbAsyncTasksStatusTypes.PENDING.getDesc()));\n        }\n        String[] split \u003d progress.split(\":\");\n        return Result.success(new KbDepartmentQueryProcessResp(split[0], split[1]));\n    }\n\n    @Override\n    public Result\u003cBoolean\u003e thirdPartImportVerify(KbConfigThirdPartReq kbConfigThirdPartReq) {\n        Platforms platforms \u003d Platforms.of(kbConfigThirdPartReq.getThirdPartPlatformName());\n        switch (Objects.requireNonNull(platforms)) {\n            case DING_TALK -\u003e {\n                // 验证钉钉应用权限\n                validateDingTalkPermissions(\n                        kbConfigThirdPartReq.getThirdPartPlatformId(),\n                        kbConfigThirdPartReq.getThirdPartPlatformSecret());\n            }\n            default -\u003e throw new RuntimeException(i18nMessage.resolveMessage(\"kb.system.department.sync.unsupported.platform\"));\n        }\n\n        return Result.success(Boolean.TRUE);\n    }\n\n    @Override\n    public Result\u003cKbThirdPartConfigIsResp\u003e thirdPartConfigIs() {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        KbThirdPartImportConfig kbThirdPartImportConfig \u003d kbThirdPartImportConfigMapper.selectOne(Wrappers.\u003cKbThirdPartImportConfig\u003elambdaQuery().eq(KbThirdPartImportConfig::getTenantId, tenantId));\n        KbThirdPartConfigIsResp kbThirdPartConfigIsResp \u003d new KbThirdPartConfigIsResp();\n        if (ObjectUtil.isNull(kbThirdPartImportConfig)) {\n            kbThirdPartConfigIsResp.setConfigIs(false);\n        } else {\n            kbThirdPartConfigIsResp.setConfigIs(true);\n            kbThirdPartConfigIsResp.setPlatformName(kbThirdPartImportConfig.getThirdPartName());\n        }\n        return Result.success(kbThirdPartConfigIsResp);\n    }\n\n    @Transactional\n    @Override\n    public Result\u003cBoolean\u003e deleteConfig() {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        KbThirdPartImportConfig kbThirdPartImportConfig \u003d kbThirdPartImportConfigMapper.selectOne(Wrappers.\u003cKbThirdPartImportConfig\u003elambdaQuery().eq(KbThirdPartImportConfig::getTenantId, tenantId));\n        if (ObjectUtil.isNotNull(kbThirdPartImportConfig)) {\n            kbThirdPartImportConfigMapper.deleteById(kbThirdPartImportConfig);\n            String thirdPartName \u003d kbThirdPartImportConfig.getThirdPartName();\n            if (Objects.equals(thirdPartName, Platforms.DING_TALK.name())) {\n                kbThirdPartDingTalkMapper.delete(Wrappers.\u003cKbThirdPartDingTalk\u003elambdaQuery().eq(KbThirdPartDingTalk::getTenantId, tenantId));\n            }\n        }\n        return Result.success(Boolean.TRUE);\n    }\n\n    @Override\n    public Pagination\u003cKbThirdPartImportTaskHistoryResp\u003e taskHistory(Integer pageNo, Integer pageSize) {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        try (Page\u003cKbAsyncTasksStatus\u003e page \u003d PageHelper.startPage(pageNo, pageSize)) {\n            List\u003cKbThirdPartImportTaskHistoryResp\u003e resList \u003d new ArrayList\u003c\u003e();\n            List\u003cKbAsyncTasksStatus\u003e taskList \u003d kbAsyncTasksStatusMapper.selectList(Wrappers.\u003cKbAsyncTasksStatus\u003elambdaQuery()\n                    .eq(KbAsyncTasksStatus::getTenantId, tenantId)\n                    .eq(KbAsyncTasksStatus::getType, KbEventMessageTypes.EVENT_ThirdPartImport.name())\n                    .orderByDesc(KbAsyncTasksStatus::getModifierTime));\n            if (CollUtil.isNotEmpty(taskList)) {\n                taskList.forEach(task -\u003e {\n                    KbThirdPartImportTaskHistoryResp res \u003d new KbThirdPartImportTaskHistoryResp();\n                    KbAsyncTasksStatusTypes taskStatus \u003d KbAsyncTasksStatusTypes.of(task.getStatus());\n                    // 如果数据库出现了未知的任务类型，标记为失败\n                    if (ObjectUtil.isNotNull(taskStatus)) {\n                        res.setStatus(taskStatus.getDesc());\n                    } else {\n                        log.warn(\"未知的任务类型：{}\", task.getStatus());\n                        res.setStatus(KbAsyncTasksStatusTypes.FAILED.getDesc());\n                    }\n                    String description \u003d task.getDescription();\n                    switch (Objects.requireNonNull(Platforms.of(description))) {\n                        case DING_TALK -\u003e res.setPlatformName(\"钉钉\");\n                        case LARK -\u003e res.setPlatformName(\"飞书\");\n                        default -\u003e throw new RuntimeException(i18nMessage.resolveMessage(\"kb.system.department.sync.unsupported.platform\"));\n                    }\n                    res.setStartTime(task.getCreateTime());",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 435
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/space/service/SaasKnowledgeContainerPermissionService.java",
      "timestamp": 1761533698242,
      "startOffset": 1655,
      "endOffset": 2431,
      "codeContent": "    /**\n     * 获取数据ID列表\n     * @param stringStringMap 知识库容器ID-权限编码Map\n     * @param sysUserInfo 用户信息\n     * @return 数据ID列表\n     */\n    List\u003cString\u003e getDataIds(Map\u003cString,String\u003e stringStringMap, SysUserInfo sysUserInfo,List\u003cString\u003e permissionCodes);\n\n\n    Map\u003cString,String\u003e getHighestPermissions(List\u003cString\u003e getContainerId,SysUserInfo sysUserInfo);\n    /**\n     * 获取最高权限\n     * @param getContainerId 知识库容器ID\n     * @param sysUserInfo 用户信息\n     * @return 最高权限\n     */\n    String getHighestPermission(String getContainerId,SysUserInfo sysUserInfo);\n    /**\n     * 获取最高权限\n     * @param permissionList 权限列表\n     * @param sysUserInfo 用户信息\n     * @return 最高权限\n     */\n    String getHighestPermission(List\u003cSaasKnowledgeContainerPermission\u003e permissionList,SysUserInfo sysUserInfo);\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 25
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/page/service/impl/PagePermissionDataServiceImpl.java",
      "timestamp": 1761533698186,
      "startOffset": 107,
      "endOffset": 8867,
      "codeContent": "util.StrUtil;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.torchv.common.constant.enums.system.ToggleStatusEnum;\nimport com.torchv.common.constant.kb.KbKnowledgeBaseContainerMemberTypes;\nimport com.torchv.common.constant.kb.KbKnowledgeBaseContainerPermissionTypes;\nimport com.torchv.common.constant.kb.PagePermissionEventTypes;\nimport com.torchv.common.context.UserContextHolder;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.kb.common.metadata.data.PageMetaDataIndexField;\nimport com.torchv.kb.page.model.dto.PagePermissionCheckInfo;\nimport com.torchv.kb.page.model.request.PagePermissionBodyReq;\nimport com.torchv.kb.page.model.request.PagePermissionResetReq;\nimport com.torchv.kb.page.model.request.PagePermissionUpdateReq;\nimport com.torchv.kb.page.model.response.SaasKnowledgeElementPermissionResp;\nimport com.torchv.kb.page.service.PagePermissionDataService;\nimport com.torchv.kb.page.service.PagePermissionService;\nimport com.torchv.kb.space.service.KnowledgeContainerConfigQueryService;\nimport com.torchv.kb.space.service.SaasKnowledgeContainerPermissionService;\nimport com.torchv.infra.vector.VectorIndexDelegate;\nimport com.torchv.infra.vector.model.UpdateChunk;\nimport com.torchv.infra.vector.model.VectorChunkUpdateQueryReq;\nimport com.torchv.repository.chat.entity.SaasKnowledgeElement;\nimport com.torchv.repository.chat.entity.SaasKnowledgeElementPermission;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeElementMapper;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeElementPermissionMapper;\nimport com.torchv.infra.web.i18n.I18nMessage;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.*;\n\n/**\n * @author \u003ca href\u003d\"xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2025/9/14 17:54\n * @since ais-server\n */\n@Slf4j\n@Service\n@AllArgsConstructor\npublic class PagePermissionDataServiceImpl  extends ServiceImpl\u003cSaasKnowledgeElementPermissionMapper, SaasKnowledgeElementPermission\u003e  implements PagePermissionDataService {\n\n    final SaasKnowledgeElementMapper saasKnowledgeElementMapper;\n    final I18nMessage i18nMessage;\n    final PagePermissionService pagePermissionService;\n    final VectorIndexDelegate vectorIndexDelegate;\n    final KnowledgeContainerConfigQueryService knowledgeContainerConfigQueryService;\n    final SaasKnowledgeContainerPermissionService saasKnowledgeContainerPermissionService;\n\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e handlePermissionEvent(PagePermissionUpdateReq updateReq) {\n        PagePermissionEventTypes eventTypes\u003dPagePermissionEventTypes.fromString(updateReq.getEventType());\n        if (eventTypes\u003d\u003dnull) {\n            log.warn(\"不支持的权限事件类型:{}\", updateReq.getEventType());\n            return Result.customFail(\"不支持的权限事件类型:\" + updateReq.getEventType());\n        }\n        if (eventTypes\u003d\u003dPagePermissionEventTypes.PERMISSION_EVENT_TYPE_ADD) {\n            return this.handleEventAdd(updateReq);\n        } else if (eventTypes\u003d\u003dPagePermissionEventTypes.PERMISSION_EVENT_TYPE_UPDATE) {\n            return this.handleEventUpdate(updateReq);\n        } else if (eventTypes\u003d\u003dPagePermissionEventTypes.PERMISSION_EVENT_TYPE_DELETE) {\n            return this.handleEventDelete(updateReq);\n        }\n        return Result.customFail(\"不支持的权限事件类型:\" + updateReq.getEventType());\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e handleEventDelete(PagePermissionUpdateReq updateReq) {\n        // 删除事件，需要判断当前删除的用户是否更改了默认继承的权限\n        SysUserInfo sysUserInfo\u003d UserContextHolder.getCurrentUser();\n        // 有编辑+管理权限以上的人，才能删除用户\n        PagePermissionCheckInfo checkInfo\u003dpagePermissionService.checkOperationPermission(updateReq.getElementCode(),sysUserInfo,List.of(KbKnowledgeBaseContainerPermissionTypes.MANAGE,KbKnowledgeBaseContainerPermissionTypes.EDIT),true);\n        checkInfo.checkAdminPermission(sysUserInfo, updateReq);\n        SaasKnowledgeElement element\u003dcheckInfo.getElement();\n        int permissionStatus\u003delement.getPermissionStatus();\n        List\u003cString\u003e deletePermissionKeys\u003dnew ArrayList\u003c\u003e();\n        // 获取文档的权限列表\n        List\u003cSaasKnowledgeElementPermissionResp\u003e  permissions \u003d checkInfo.getPermissions();\n        // 校验权限，是否可以处理\n        // 判断当前文档是否是继承权限\n        boolean isInheritDeleted\u003dfalse;\n        boolean permissionInheritStatus\u003dObjects.equals(element.getPermissionStatus(), ToggleStatusEnum.YES.getCode());\n        // 是继承权限，此时要判断是否删除的非知识库继承的文档权限\n        // 判断是否对继承的权限做了删除\n        for (SaasKnowledgeElementPermissionResp permission : permissions) {\n            String permissionKey\u003dpermission.permissionKey();\n            long count\u003dupdateReq.getPermissions().stream().filter(p-\u003eObjects.equals(p.permissionKey(), permissionKey)).count();\n            if (count\u003e0){\n                // 标记删除的key权限\n                deletePermissionKeys.add(permissionKey);\n                if (permissionInheritStatus \u0026\u0026 permission.isInherited()){\n                    isInheritDeleted\u003dtrue;\n                }\n            }\n        }\n        // 根据条件记录直接做删除\n        LambdaQueryWrapper\u003cSaasKnowledgeElementPermission\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElementPermission.class)\n                .eq(SaasKnowledgeElementPermission::getTenantId, element.getTenantId())\n                .eq(SaasKnowledgeElementPermission::getElementCode, updateReq.getElementCode());\n        lambdaQueryWrapper.and(s-\u003e{\n            for (PagePermissionBodyReq permissionBodyReq:updateReq.getPermissions()) {\n                KbKnowledgeBaseContainerMemberTypes memberTypes\u003dKbKnowledgeBaseContainerMemberTypes.parse(permissionBodyReq.getMembershipType());\n                if (memberTypes\u003d\u003dnull){\n                    log.warn(\"不支持的权限类型:{}\", permissionBodyReq.getMembershipType());\n                    throw new IllegalArgumentException(\"不支持的权限类型:\"+permissionBodyReq.getMembershipType());\n                }\n                s.or().eq(SaasKnowledgeElementPermission::getMembershipType, memberTypes.getCode())\n                        .eq(SaasKnowledgeElementPermission::getMembershipCode, permissionBodyReq.getMembershipCode());\n            }\n        });\n        if (isInheritDeleted){\n            permissionStatus\u003dToggleStatusEnum.NO.getCode();\n            // 删除了继承的权限，当前文档需要变更为非继承权限\n            saasKnowledgeElementMapper.resetInheritPermission(updateReq.getElementCode(), permissionStatus);\n        }\n        // 做清理删除动作\n        boolean deleted\u003dthis.remove(lambdaQueryWrapper);;\n        log.info(\"文档权限删除,状态:{}，文档编码：{}，租户ID：{}\",deleted, updateReq.getElementCode(), element.getTenantId());\n        // 用户最新的权限编码\n        Set\u003cString\u003e permissionCodes\u003dnew HashSet\u003c\u003e();\n        List\u003cSaasKnowledgeElementPermission\u003e permissionList \u003dnew ArrayList\u003c\u003e();\n        // 这个时候，如果是继承权限被删除了，那么需要把继承的权限在批量新增加回来，因为当前文档已经变更为非继承权限了\n        // 针对删除的逻辑，es索引权限编码变更的逻辑：\n        // 1、判断当前删除的权限，是否已经把继承的权限删除了，\n        for (SaasKnowledgeElementPermissionResp permission : permissions) {\n            String permissionKey\u003dpermission.permissionKey();\n            if (deletePermissionKeys.contains(permissionKey)){\n                // 已经删除的权限。跳过\n                continue;\n            }\n            // 非删除的权限\n            if (isInheritDeleted){\n                // 如果是删除了继承权限，那么全部add进去，相当于复制\n                permissionCodes.add(permission.getMembershipCode());\n                // 在文档的权限表也需要add进去一份，相当于权限拷贝\n                permissionList.add(permission.addElementPermission(element,sysUserInfo));\n            }else{\n                // 如果没有删除继承权限，那么只把非继承的权限add进去\n                if (!permission.isInherited()){\n                    permissionCodes.add(permission.getMembershipCode());\n                }\n                // 如果没有删除继承权限，收集所有权限编码（包括知识库继承的和文档自定义的）\n//                permissionCodes.add(permission.getMembershipCode());\n            }\n        }\n        // 新增继承过来的权限\n        if (CollUtil.isNotEmpty(permissionList)){\n            log.info(\"文档权限删除后，新增非继承权限,文档编码：{}，租户ID：{}，新增权限数：{}\", updateReq.getElementCode(), element.getTenantId(), permissionList.size());\n            LambdaQueryWrapper\u003cSaasKnowledgeElementPermission\u003e saasKnowledgeElementPermissionLambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeElementPermission.class)\n                    .eq(SaasKnowledgeElementPermission::getTenantId, element.getTenantId())\n                    .eq(SaasKnowledgeElementPermission::getElementCode, updateReq.getElementCode());\n            this.remove(saasKnowledgeElementPermissionLambdaQueryWrapper",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 159
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/page/service/impl/KbPageEventServiceImpl.java",
      "timestamp": 1761533698159,
      "startOffset": 1308,
      "endOffset": 6207,
      "codeContent": "infra.common.external.queue.RabbitMessageService;\nimport com.torchv.common.model.Pagination;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.kb.common.constant.KbEventMessageTypes;\nimport com.torchv.kb.common.model.KbEventMessageCallbackDTO;\nimport com.torchv.kb.common.model.KbEventToggleReq;\nimport com.torchv.kb.page.model.dto.PageEventNameInfo;\nimport com.torchv.kb.page.model.event.KbPageEventMessage;\nimport com.torchv.kb.page.model.request.*;\nimport com.torchv.kb.page.model.response.KbPageFollowResp;\nimport com.torchv.kb.page.model.response.SpaceFollowInfoResp;\nimport com.torchv.kb.page.service.KbPageEventService;\nimport com.torchv.repository.kb.entity.KbUserCollectPageInfo;\nimport com.torchv.repository.kb.page.dto.PageEventUserInfo;\nimport com.torchv.repository.kb.page.entity.KbPageEvent;\nimport com.torchv.repository.kb.page.entity.KbUserPageFollowInfo;\nimport com.torchv.repository.kb.page.entity.KbUserPageFollowInfoSearch;\nimport com.torchv.repository.kb.page.mapper.KbPageEventMapper;\nimport com.torchv.repository.kb.space.dto.KbSpaceFollowingInfo;\nimport com.torchv.repository.kb.space.dto.SpaceFollowingSearch;\nimport com.torchv.repository.kb.space.mapper.KbSpaceFollowingMapper;\nimport com.torchv.repository.kb.user.mapper.KbUserCollectPageMapper;\nimport com.torchv.infra.web.i18n.I18nMessage;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.redisson.api.RLock;\nimport org.redisson.api.RedissonClient;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.stereotype.Service;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * 页面事件模块-业务Service实现\n * @since torchv_server kb-v0.0.1\n * @author \u003ca href\u003d\"mailto:xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/10/30 20:30\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class KbPageEventServiceImpl extends ServiceImpl\u003cKbPageEventMapper, KbPageEvent\u003e implements KbPageEventService {\n\n    final KbPageEventMapper kbPageEventMapper;\n    final RabbitMessageService rabbitMessageService;\n    final RedissonClient redissonClient;\n    final I18nMessage i18nMessage;\n    final KbSpaceFollowingMapper kbSpaceFollowingMapper;\n    final KbUserCollectPageMapper kbUserCollectPageMapper;\n    @Override\n    public Pagination\u003cPageEventUserInfo\u003e eventUserList(String eventType, String pageCode, Integer pageNo, Integer pageSize) {\n        long count;\n        List\u003cPageEventUserInfo\u003e list \u003d null;\n        // 启用分页查询，并在try资源管理中自动关闭分页上下文\n        try (Page\u003cPageEventUserInfo\u003e kbPagePageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n            // 执行查询，获取当前页的页面信息列表\n            list \u003d kbPageEventMapper.listEventUserInfo(UserContextHolder.getTenantId(), pageCode, eventType);\n            // 获取总记录数，用于分页信息\n            count \u003d kbPagePageNo.getTotal();\n        }\n        // 构造并返回分页响应对象，包含树形结构页面信息列表、总记录数、当前页码和每页记录数\n        return Pagination.pagination(list, count, pageNo, pageSize);\n\n    }\n    /**\n     * 追踪页面浏览信息\n     * 此方法用于记录用户的页面浏览数据，包括租户ID、页面代码和用户代码这些信息会被封装到一个事件对象中，\n     * 并发送到消息队列，以供后续处理或分析\n     *\n     * @param traceReq 包含页面追踪信息的请求对象\n     * @return 返回一个表示操作结果的Result对象，包含一个简单的成功消息\n     */\n    @Override\n    public Result\u003cString\u003e trace(PageTraceReq traceReq) {\n        // 获取当前用户信息\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        KbEventToggleReq eventToggleReq \u003d new KbEventToggleReq();\n        eventToggleReq.setBody(KbEventBody.PAGE);\n        eventToggleReq.setToggle(false);\n        eventToggleReq.setPageCode(traceReq.getPageCode());\n        eventToggleReq.setPrimaryCode(traceReq.getPageCode());\n        eventToggleReq.setType(KbEventMessageTypes.EVENT_PAGE_BROWSER);\n        // 创建页面浏览事件对象，包含租户ID、页面代码和用户代码\n        KbPageEventMessage event \u003d KbPageEventMessage.of(sysUserInfo, eventToggleReq);\n        // 将页面浏览事件信息发送到消息队列\n        rabbitMessageService.sendKbEventMessage(KbEventMessageCallbackDTO.of(KbEventMessageTypes.EVENT_PAGE_BROWSER, event));\n        // 返回成功结果\n        return Result.data(\"SUCCESS\");\n    }\n    \n    @Override\n    public Pagination\u003cPageEventNameInfo\u003e userEvent(Integer pageNo, Integer pageSize, List\u003cString\u003e eventTypes,Integer creator) {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        List\u003cPageEventNameInfo\u003e eventNameInfos;\n        long count;\n        try (Page\u003cPageEventNameInfo\u003e page \u003d PageHelper.startPage(pageNo, pageSize)) {\n            Date date \u003d Date.from(LocalDate.now().minusDays(7).atStartOfDay(ZoneId.systemDefault()).toInstant());\n            eventNameInfos \u003d kbPageEventMapper.listUserEvent(sysUserInfo.getTenantId(), sysUserInfo.getCode(), eventTypes, date,creator);\n            count \u003d page.getTotal();\n        }\n        return Pagination.pagination(eventNameInfos, count, pageNo, pageSize);\n    }\n    ",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 108
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/page/service/KbPageEventService.java",
      "timestamp": 1761533698143,
      "startOffset": 957,
      "endOffset": 2159,
      "codeContent": "dto.PageEventNameInfo;\nimport com.torchv.kb.page.model.event.KbPageEventMessage;\nimport com.torchv.kb.page.model.request.*;\nimport com.torchv.kb.page.model.response.KbPageFollowResp;\nimport com.torchv.kb.page.model.response.SpaceFollowInfoResp;\nimport com.torchv.repository.kb.page.dto.PageEventUserInfo;\nimport com.torchv.repository.kb.page.entity.KbPageEvent;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 页面事件模块-业务Service\n * @since torchv_server kb-v0.0.1\n * @author \u003ca href\u003d\"mailto:xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/10/30 20:30\n */\npublic interface KbPageEventService extends IService\u003cKbPageEvent\u003e {\n\n    /**\n     * 关注/编辑/评论用户列表\n     * @param pageCode 页面编码\n     * @return 关注用户列表\n     */\n    Pagination\u003cPageEventUserInfo\u003e eventUserList(String eventType, String pageCode, Integer pageNo, Integer pageSize);\n\n    /**\n     * 浏览知识页面\n     * @param traceReq 浏览知识页面条件Vo\n     * @return 是否浏览成功\n     */\n    Result\u003cString\u003e trace(PageTraceReq traceReq);\n    \n    /**\n     * 浏览事件列表\n     * @param pageNo 页码\n     * @param pageSize 页码大小\n     * @return 浏览事件列表\n     */\n    Pagination\u003cPageEventNameInfo\u003e userEvent(Integer pageNo, Integer pageSize, List\u003cString\u003e eventTypes,Integer creator);",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 40
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/space/service/impl/SaasKnowledgeContainerPermissionServiceImpl.java",
      "timestamp": 1761533698260,
      "startOffset": 1222,
      "endOffset": 10553,
      "codeContent": "DepartmentTypes;\nimport com.torchv.common.constant.kb.KbKnowledgeBaseContainerMemberTypes;\nimport com.torchv.common.constant.kb.KbKnowledgeBaseContainerPermissionTypes;\nimport com.torchv.common.context.UserContextHolder;\nimport com.torchv.common.model.Pagination;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.kb.space.model.dto.SaasKnowledgeContainerPermissionResp;\nimport com.torchv.kb.space.model.request.KbKnowledgeBasePermissionReq;\nimport com.torchv.kb.space.model.vo.SaasKnowledgeContainerPermissionAddReq;\nimport com.torchv.kb.space.model.vo.SaasKnowledgeContainerPermissionQueryReq;\nimport com.torchv.kb.space.model.vo.SaasKnowledgeContainerPermissionUpdateReq;\nimport com.torchv.kb.space.service.SaasKnowledgeContainerPermissionService;\nimport com.torchv.repository.chat.dto.ElementSearchValueCondition;\nimport com.torchv.repository.chat.entity.SaasKnowledgeContainer;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeContainerMapper;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeElementMapper;\nimport com.torchv.repository.kb.department.dto.KbDepartmentUserTypeInfo;\nimport com.torchv.repository.kb.department.entity.KbDepartment;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentMapper;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentUserMapper;\nimport com.torchv.repository.kb.entity.SaasKnowledgeContainerPermission;\nimport com.torchv.repository.kb.mapper.SaasKnowledgeContainerPermissionMapper;\nimport com.torchv.repository.user.entity.SysUser;\nimport com.torchv.repository.user.mapper.SysUserMapper;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n/**\n * 知识库容器权限模块-业务Service实现\n * @since torchv_server v1.8.9.2\n * @author \u003ca href\u003d\"mailto:yixiaoshu88@163.com\"\u003eyixiaoshu88@163.com\u003c/a\u003e\n * 2025/06/12 18:34\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class SaasKnowledgeContainerPermissionServiceImpl extends ServiceImpl\u003cSaasKnowledgeContainerPermissionMapper, SaasKnowledgeContainerPermission\u003e implements SaasKnowledgeContainerPermissionService {\n    \n    final SaasKnowledgeContainerPermissionMapper saasKnowledgeContainerPermissionMapper;\n    final KbDepartmentMapper kbDepartmentMapper;\n    final SaasKnowledgeContainerMapper saasKnowledgeContainerMapper;\n    final KbDepartmentUserMapper kbDepartmentUserMapper;\n    final SysUserMapper sysUserMapper;\n    final SaasKnowledgeElementMapper saasKnowledgeElementMapper;\n\n    @Override\n    public List\u003cString\u003e getDataIds(Map\u003cString, String\u003e stringStringMap, SysUserInfo sysUserInfo,List\u003cString\u003e permissionCodes) {\n        //过滤得到没有权限的知识库id\n        if (CollUtil.isEmpty(stringStringMap) || sysUserInfo\u003d\u003dnull){\n            return List.of();\n        }\n        List\u003cString\u003e containerIds\u003dnew ArrayList\u003c\u003e();\n        for (Map.Entry\u003cString,String\u003e entry:stringStringMap.entrySet()){\n            if (StrUtil.equalsIgnoreCase(KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode(),entry.getValue())){\n                containerIds.add(entry.getKey());\n            }\n        }\n        if (CollUtil.isEmpty(containerIds)){\n            return List.of();\n        }\n        ElementSearchValueCondition condition\u003d ElementSearchValueCondition.from(sysUserInfo.getTenantId(),containerIds,permissionCodes);\n        return saasKnowledgeElementMapper.listVisibleSearchCodes(condition);\n    }\n\n    @Override\n    public Map\u003cString,String\u003e getHighestPermissions(List\u003cString\u003e getContainerId, SysUserInfo sysUserInfo) {\n        LambdaQueryWrapper\u003cSaasKnowledgeContainerPermission\u003e lambdaQueryWrapperInfo \u003d new LambdaQueryWrapper\u003c\u003e();\n        lambdaQueryWrapperInfo.in(SaasKnowledgeContainerPermission::getContainerId, getContainerId);\n        List\u003cSaasKnowledgeContainerPermission\u003e permissionList \u003d this.list(lambdaQueryWrapperInfo);\n        // 做groupby\n        Map\u003cString,String\u003e result\u003dnew HashMap\u003c\u003e();\n        if (CollUtil.isNotEmpty(permissionList)){\n            Map\u003cString,List\u003cSaasKnowledgeContainerPermission\u003e\u003e mapPermission\u003d permissionList.stream().collect(Collectors.groupingBy(SaasKnowledgeContainerPermission::getContainerId));\n            for (String s:getContainerId){\n                List\u003cSaasKnowledgeContainerPermission\u003e r\u003dmapPermission.get(s);\n                if (CollUtil.isNotEmpty(r)){\n                    result.put(s,getHighestPermission(r,sysUserInfo));\n                }else{\n                    result.put(s,KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode());\n                }\n            }\n        }else{\n            for (String s:getContainerId){\n                result.put(s,KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode());\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public String getHighestPermission(String getContainerId, SysUserInfo sysUserInfo) {\n        LambdaQueryWrapper\u003cSaasKnowledgeContainerPermission\u003e lambdaQueryWrapperInfo \u003d new LambdaQueryWrapper\u003c\u003e();\n        lambdaQueryWrapperInfo.eq(SaasKnowledgeContainerPermission::getContainerId, getContainerId);\n        List\u003cSaasKnowledgeContainerPermission\u003e permissionList \u003d this.list(lambdaQueryWrapperInfo);\n        return getHighestPermission(permissionList, sysUserInfo);\n    }\n\n    @Override\n    public String getHighestPermission(List\u003cSaasKnowledgeContainerPermission\u003e permissionList, SysUserInfo sysUserInfo) {\n        if (permissionList \u003d\u003d null || permissionList.isEmpty()) {\n            return KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode();\n        }\n        String currentUserCode \u003d sysUserInfo.getCode();\n        String tenantId \u003d sysUserInfo.getTenantId();\n        // 查询用户所在的列表\n        List\u003cKbDepartmentUserTypeInfo\u003e departmentUserTypeInfos\u003dkbDepartmentUserMapper.listDepartmentUsers(tenantId,currentUserCode);\n        // 获取用户的编码\n        List\u003cString\u003e teamCodes\u003dnew ArrayList\u003c\u003e();\n        // 获取组织的编码\n        List\u003cString\u003e organizationCodes \u003d new ArrayList\u003c\u003e();\n        if (CollUtil.isNotEmpty(departmentUserTypeInfos)){\n            for (KbDepartmentUserTypeInfo typeInfo:departmentUserTypeInfos){\n                if (StrUtil.equalsIgnoreCase(typeInfo.getType(), KbDepartmentTypes.TEAM.name())){\n                    teamCodes.add(typeInfo.getDepartmentCode());\n                }else{\n                    // 获取组织编码的fullPath\n                    organizationCodes.add(typeInfo.getFullPath());\n                }\n            }\n        }\n        return getHighestPermission(permissionList, organizationCodes, teamCodes, currentUserCode);\n    }\n\n    public String getHighestPermission(List\u003cSaasKnowledgeContainerPermission\u003e permissionList,List\u003cString\u003e organizationCodes, List\u003cString\u003e teamCodes,String currentUserCode){\n        if (permissionList \u003d\u003d null || permissionList.isEmpty()) {\n            return KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode();\n        }\n\n        // 定义权限优先级，数值越小优先级越高\n        Map\u003cString, Integer\u003e permissionPriority \u003d Map.of(\n                KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode(), 1,\n                KbKnowledgeBaseContainerPermissionTypes.EDIT.getCode(), 2,\n                KbKnowledgeBaseContainerPermissionTypes.VIEW_DOWNLOAD.getCode(), 3,\n                KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY.getCode(), 4);\n\n        String highestPermission \u003d KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode();\n        int highestPriority \u003d Integer.MAX_VALUE;\n\n        for (SaasKnowledgeContainerPermission permission : permissionList) {\n            String permissionType \u003d permission.getPermissionType();\n            String membershipType \u003d permission.getMembershipType();\n            String membershipCode \u003d permission.getMembershipCode();\n\n            boolean hasPermission \u003d false;\n\n            // 判断权限是否适用于当前用户\n            switch (membershipType) {\n                case \"USER\":\n                    // 如果是USER类型且membershipCode匹配当前用户\n                    hasPermission \u003d membershipCode.equalsIgnoreCase(currentUserCode);\n                    break;\n\n                case \"ORGANIZATION\":\n                    hasPermission\u003d organizationCodes.stream().anyMatch(s -\u003e StrUtil.contains(s, membershipCode));\n                    break;\n                case \"TEAM\":\n                    // 如果是ORGANIZATION或TEAM类型，检查当前用户是否属于该组织/团队\n                    hasPermission \u003d teamCodes.contains(membershipCode);\n                    break;\n\n                default:\n                    // 未知类型，跳过\n                    continue;\n            }\n\n            // 如果当前权限适用于用户，且优先级更高\n            if (hasPermission) {\n                Integer priority \u003d permissionPriority.get(permissionType);\n                if (priority !\u003d null \u0026\u0026 priority \u003c highestPriority) {\n                    highestPriority \u003d priority;\n                    highestPermission \u003d permissionType;\n\n                    // 如果已经是最高权限MANAGE，直接返回\n                    if (KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode().equals(permissionType)) {\n                        return permissionType;\n                    }\n                }\n            }\n        }\n        return highestPermission;\n    }",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 190
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/user/web/UserEventDataController.java",
      "timestamp": 1761533698366,
      "startOffset": 97,
      "endOffset": 2943,
      "codeContent": "common.constant.KbEventMessageTypes;\nimport com.torchv.kb.page.model.dto.PageEventNameInfo;\nimport com.torchv.kb.page.service.KbPageEventService;\nimport com.torchv.kb.space.model.request.KbSpaceQueryReq;\nimport com.torchv.kb.space.model.response.KbSpaceResp;\nimport com.torchv.kb.space.service.KbSpaceService;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.Parameters;\nimport io.swagger.v3.oas.annotations.enums.ParameterIn;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n/**\n * Copyright © 2025 integration-projects-maven. All rights reserved.\n * ClassName UserEventDataController.java\n * author 舒一笑\n * version 1.0.0\n * Description 知识库用户事件\n * createTime 2025年07月09日 17:40:48\n */\n@RestController\n@RequestMapping(\"/kb/user/event/data\")\n@AllArgsConstructor\n@Slf4j\n@Tag(name \u003d \"知识库用户事件\")\npublic class UserEventDataController {\n    \n    final KbSpaceService kbSpaceService;\n    final KbPageEventService kbPageEventService;\n    \n    \n    /**\n     * 分页查询知识库空间\n     * @param spaceQueryReq 查询条件vo\n     * @param pageNo 当前页码\n     * @param pageSize 页码大小\n     * @return 分页列表\n     */\n    @Operation(summary \u003d \"分页查询有权限的知识库空间\")\n    @Parameters({\n            @Parameter(name \u003d \"pageNo\", description \u003d \"当前页码,默认1\", required \u003d true, in \u003d ParameterIn.QUERY, example \u003d \"1\"),\n            @Parameter(name \u003d \"pageSize\", description \u003d \"页码大小,默认10\", required \u003d true, in \u003d ParameterIn.QUERY, example \u003d \"10\")\n    })\n    @GetMapping(\"/space/list\")\n    public Pagination\u003cKbSpaceResp\u003e spaceList(KbSpaceQueryReq spaceQueryReq,\n            @RequestParam(value \u003d \"pageNo\", defaultValue \u003d \"1\") Integer pageNo,\n            @RequestParam(value \u003d \"pageSize\", defaultValue \u003d \"10\") Integer pageSize) {\n        log.info(\"list user space,api:{}\", \"/kb/user/event/data/space/list\");\n        return kbSpaceService.list(spaceQueryReq, pageNo, pageSize);\n    }\n    \n    \n    /**\n     * 浏览知识页面页面\n     * @return 浏览知识页面页面\n     */\n    @Operation(summary \u003d \"浏览页面列表\")\n    @GetMapping(\"/tracing\")\n    public Pagination\u003cPageEventNameInfo\u003e tracing(@RequestParam(value \u003d \"pageNo\", defaultValue \u003d \"1\") Integer pageNo,\n            @RequestParam(value \u003d \"pageSize\", defaultValue \u003d \"10\") Integer pageSize,@RequestParam(value \u003d \"creator\" , required \u003d false) Integer creator) {\n        log.info(\"浏览知识页面页面,api:{}\", \"/kb/user/event/data/tracing\");\n        return kbPageEventService.userEvent(pageNo, pageSize, List.of(KbEventMessageTypes.EVENT_PAGE_BROWSER.name()), creator);\n    }\n    ",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 72
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761546299479,
      "startOffset": 1,
      "endOffset": 21,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761546299563,
      "startOffset": 2,
      "endOffset": 22,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761546301760,
      "startOffset": 21,
      "endOffset": 41,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761546303005,
      "startOffset": 31,
      "endOffset": 51,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761547038770,
      "startOffset": 1,
      "endOffset": 21,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761547039723,
      "startOffset": 17,
      "endOffset": 37,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761547041568,
      "startOffset": 21,
      "endOffset": 41,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761547043672,
      "startOffset": 20,
      "endOffset": 40,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761547048202,
      "startOffset": 27,
      "endOffset": 47,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/page/model/request/KnowledgeElementContentUpdateReq.java",
      "timestamp": 1761549019556,
      "startOffset": 2386,
      "endOffset": 2663,
      "codeContent": "// 如果contentMarked为空，则从content转换；如果contentMarked不为空，则保持原样\n            if (StrUtil.isBlank(this.getContentMarked())) {\n                this.setContentMarked(MarkdownUtils.html2Markdown(this.getContent()));\n            }\n            // 如果contentMarked已经有值，说明前端已经传递了处理好的内容，不需要再次转换",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 5
    },
    {
      "filePath": "/KnowledgeElementContentUpdateReq.java",
      "timestamp": 1761551637717,
      "startOffset": 2387,
      "endOffset": 2407,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/page/model/request/KnowledgeElementContentUpdateReq.java",
      "timestamp": 1761551648188,
      "startOffset": 2390,
      "endOffset": 2410,
      "codeContent": "cn.hutool.core.util.",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/page/model/request/KnowledgeElementContentUpdateReq.java",
      "timestamp": 1761551648197,
      "startOffset": 43,
      "endOffset": 81,
      "codeContent": "import cn.hutool.core.util.ObjectUtil;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/infra/common/utils/MarkdownUtils.java",
      "timestamp": 1761551948948,
      "startOffset": 10832,
      "endOffset": 10959,
      "codeContent": "使用正则表达式匹配所有\u003cu\u003e和\u003c/u\u003e标签（不区分大小写，包含属性），避免转换为++text++格式\n            html \u003d html.replaceAll(\"(?i)\u003c/?u\\\\b[^\u003e]*\u003e\", \"\");\n            // ",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3
    },
    {
      "filePath": "/AppInfoBindReq.java",
      "timestamp": 1761553840875,
      "startOffset": 1459,
      "endOffset": 1479,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/model/vo/AppInfoBindReq.java",
      "timestamp": 1761553846254,
      "startOffset": 1474,
      "endOffset": 1497,
      "codeContent": "isBindPersonalKnowledge",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/model/vo/AppInfoBindReq.java",
      "timestamp": 1761553851474,
      "startOffset": 1491,
      "endOffset": 1525,
      "codeContent": "@Schema(description \u003d \"是否绑定个人知识库\")",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761554190025,
      "startOffset": 30834,
      "endOffset": 30854,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761554207191,
      "startOffset": 30915,
      "endOffset": 31075,
      "codeContent": "List\u003cString\u003e personalKnowledgeContainerIds \u003d knowledgeContainerService.listPersonalKnowledgeContainerIds(UserContextHolder.getCurrentUser().getLoginUsername());",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761554236031,
      "startOffset": 3234,
      "endOffset": 3304,
      "codeContent": "import com.torchv.repository.chat.mapper.SaasKnowledgeContainerMapper;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/KnowledgeContainerService.java",
      "timestamp": 1761554278192,
      "startOffset": 2590,
      "endOffset": 2672,
      "codeContent": "/**\n     * 批量删除知识库容器\n     * @param ids 批量删除知识库容器主键id\n     * @return 是否删除成功\n     */",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 5
    },
    {
      "filePath": "/KnowledgeContainerService.java",
      "timestamp": 1761554291787,
      "startOffset": 2625,
      "endOffset": 2645,
      "codeContent": "IntellijIdeaRulezzz;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554327054,
      "startOffset": 35578,
      "endOffset": 35598,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554338601,
      "startOffset": 35577,
      "endOffset": 35690,
      "codeContent": "@Override\n    public Result\u003cKnowledgeContainerResp\u003e queryByUserCode(String userCode) {\n        return null;\n    }",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 4
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554363026,
      "startOffset": 35711,
      "endOffset": 35940,
      "codeContent": "lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class)\n                .eq(SaasKnowledgeContainer::getUserCode, userCode)\n                .eq(SaasKnowledgeContainer::getTenantId, UserContextHolder.getTenantId());",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554481966,
      "startOffset": 35948,
      "endOffset": 36076,
      "codeContent": "return Result.data(new SaasKnowledgeContainerApplyFunction().apply(saasKnowledgeContainerMapper.selectOne(lambdaQueryWrapper)));",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554501967,
      "startOffset": 35948,
      "endOffset": 36061,
      "codeContent": "SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectOne(lambdaQueryWrapper,false);",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554502581,
      "startOffset": 35948,
      "endOffset": 35970,
      "codeContent": "SaasKnowledgeContainer",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554502584,
      "startOffset": 35971,
      "endOffset": 35993,
      "codeContent": "saasKnowledgeContainer",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554504794,
      "startOffset": 36071,
      "endOffset": 36163,
      "codeContent": "return Result.data(new SaasKnowledgeContainerApplyFunction().apply(saasKnowledgeContainer));",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554541257,
      "startOffset": 36115,
      "endOffset": 36167,
      "codeContent": "saasKnowledgeContainer, KnowledgeContainerResp.class",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554559888,
      "startOffset": 36094,
      "endOffset": 36170,
      "codeContent": "knowledgeContainerResp \u003d BeanUtils.copyProperties(saasKnowledgeContainer, );",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761554563392,
      "startOffset": 36071,
      "endOffset": 36093,
      "codeContent": "KnowledgeContainerResp",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761554608539,
      "startOffset": 30904,
      "endOffset": 30934,
      "codeContent": "UIntellijIdeaRulezzz \n        ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761554614071,
      "startOffset": 30904,
      "endOffset": 30965,
      "codeContent": "SysUserInfo currentUser \u003d UserContextHolder.getCurrentUser();",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761554614646,
      "startOffset": 30904,
      "endOffset": 30965,
      "codeContent": "SysUserInfo currentUser \u003d UserContextHolder.getCurrentUser();",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761554623524,
      "startOffset": 31056,
      "endOffset": 31241,
      "codeContent": "Result\u003ccom.torchv.application.knowledge.model.response.knowledge.KnowledgeContainerResp\u003e knowledgeContainerRespResult \u003d knowledgeContainerService.queryByUserCode(currentUser.getCode());",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761554623528,
      "startOffset": 1469,
      "endOffset": 1557,
      "codeContent": "import com.torchv.application.knowledge.model.response.knowledge.KnowledgeContainerResp;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761554623989,
      "startOffset": 31056,
      "endOffset": 31241,
      "codeContent": "Result\u003ccom.torchv.application.knowledge.model.response.knowledge.KnowledgeContainerResp\u003e knowledgeContainerRespResult \u003d knowledgeContainerService.queryByUserCode(currentUser.getCode());",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761554624001,
      "startOffset": 1469,
      "endOffset": 1557,
      "codeContent": "import com.torchv.application.knowledge.model.response.knowledge.KnowledgeContainerResp;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761554624071,
      "startOffset": 31145,
      "endOffset": 31175,
      "codeContent": "Result\u003cKnowledgeContainerResp\u003e",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761554624073,
      "startOffset": 31176,
      "endOffset": 31204,
      "codeContent": "knowledgeContainerRespResult",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761554626933,
      "startOffset": 31285,
      "endOffset": 31347,
      "codeContent": "if (knowledgeContainerRespResult.isSuccess()) { \n            }",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761554631083,
      "startOffset": 30904,
      "endOffset": 30965,
      "codeContent": "SysUserInfo currentUser \u003d UserContextHolder.getCurrentUser();",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761554631084,
      "startOffset": 1468,
      "endOffset": 1557,
      "codeContent": "\nimport com.torchv.application.knowledge.model.response.knowledge.KnowledgeContainerResp;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761554708032,
      "startOffset": 31575,
      "endOffset": 31698,
      "codeContent": "List\u003cKnowledgeContainerResp\u003e knowledgeContainerRespList \u003d knowledgeContainerService.queryByUserCode(currentUser.getCode());",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/KnowledgeContainerService.java",
      "timestamp": 1761554795761,
      "startOffset": 2746,
      "endOffset": 2815,
      "codeContent": "    Result\u003cKnowledgeContainerResp\u003e queryByUserCode(String userCode);\n",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761555303200,
      "startOffset": 35964,
      "endOffset": 36069,
      "codeContent": "lambdaQueryWrapper.ne(SaasKnowledgeContainer::getType, KnowledgeContainerType.PERSONAL_KNOWLEDGE.name());",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761555308013,
      "startOffset": 36058,
      "endOffset": 36142,
      "codeContent": "(SaasKnowledgeContainer::getType, KnowledgeContainerType.PERSONAL_KNOWLEDGE.name());",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/KnowledgeContainerService.java",
      "timestamp": 1761555369705,
      "startOffset": 2767,
      "endOffset": 2855,
      "codeContent": "Result\u003cKnowledgeContainerResp\u003e queryUsersPersonalKnowledgeBase(SysUserInfo sysUserInfo);",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/KnowledgeContainerService.java",
      "timestamp": 1761555410681,
      "startOffset": 2957,
      "endOffset": 3003,
      "codeContent": "queryAuthorizedKnowledgeBaseCollectionUserCode",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/KnowledgeContainerService.java",
      "timestamp": 1761555411598,
      "startOffset": 2876,
      "endOffset": 2922,
      "codeContent": "queryAuthorizedKnowledgeBaseCollectionUserCode",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761555701215,
      "startOffset": 36522,
      "endOffset": 42585,
      "codeContent": "log.info(\"根据用户编码查询有权限的知识库集合,userCode:{}\", userCode);\n        \n        // 获取当前用户信息\n        SysUserInfo currentUser \u003d UserContextHolder.getCurrentUser();\n        String tenantId \u003d currentUser.getTenantId();\n        \n        // 获取用户的权限范围-组织\u0026团队编码\n        DepartmentUserOrgPermissions orgPermissions \u003d kbDepartmentUserService.listAccessibleDepartmentCodes(currentUser);\n        \n        // 获取用户的编码\n        List\u003cString\u003e teamCodes \u003d orgPermissions.getTeamCodes();\n        // 获取组织的编码\n        List\u003cString\u003e organizationCodes \u003d orgPermissions.getOrganizationCodes();\n        \n        // 构建查询条件\n        ContainerPermissionCondition condition \u003d ContainerPermissionCondition.of(\n                tenantId, \n                userCode, \n                teamCodes, \n                organizationCodes, \n                null, \n                null\n        );\n        \n        // 查询有权限的知识库列表\n        List\u003cSaasKnowledgeContainer\u003e containerList \u003d saasKnowledgeContainerMapper.listPermissionByCondition(condition);\n        \n        if (CollUtil.isEmpty(containerList)) {\n            log.info(\"用户{}没有权限访问任何知识库\", userCode);\n            return Result.data(null);\n        }\n        \n        // 获取容器下的标签\n        List\u003cString\u003e containerCodes \u003d containerList.stream()\n                .map(SaasKnowledgeContainer::getCode)\n                .collect(Collectors.toList());\n        Map\u003cString, List\u003cString\u003e\u003e tagMap \u003d knowledgeTagRelationService.listByContainerIds(containerCodes, tenantId);\n        \n        // 转换为响应对象\n        SaasKnowledgeContainerApplyFunction applyFunction \u003d new SaasKnowledgeContainerApplyFunction(tagMap);\n        KnowledgeContainerResp knowledgeContainerResp \u003d applyFunction.apply(containerList.get(0));\n        \n        // 查询分类名称\n        if (!StrUtil.equalsIgnoreCase(knowledgeContainerResp.getClassifyCode(), \"0\")) {\n            knowledgeCategoryService.queryByCode(knowledgeContainerResp.getClassifyCode(), tenantId)\n                    .ifPresent(knowledgeCategoryResp -\u003e {\n                        knowledgeContainerResp.setClassifyName(knowledgeCategoryResp.getName());\n                    });\n        }\n        \n        // 查询权限信息\n        LambdaQueryWrapper\u003cSaasKnowledgeContainerPermission\u003e permissionWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n        permissionWrapper.eq(SaasKnowledgeContainerPermission::getContainerId, knowledgeContainerResp.getCode());\n        List\u003cSaasKnowledgeContainerPermission\u003e permissionList \u003d saasKnowledgeContainerPermissionService.list(permissionWrapper);\n        \n        // 分离用户和其他类型的成员编码，并过滤空值\n        List\u003cString\u003e userCodeList \u003d new ArrayList\u003c\u003e();\n        List\u003cString\u003e departmentCodeList \u003d new ArrayList\u003c\u003e();\n        for (SaasKnowledgeContainerPermission permission : permissionList) {\n            if (permission !\u003d null \u0026\u0026 StrUtil.isNotBlank(permission.getMembershipCode())) {\n                if (KbKnowledgeBaseContainerMemberTypes.USER.name().equals(permission.getMembershipType())) {\n                    userCodeList.add(permission.getMembershipCode());\n                } else if (KbKnowledgeBaseContainerMemberTypes.ORGANIZATION.name().equals(permission.getMembershipType())\n                        || KbKnowledgeBaseContainerMemberTypes.TEAM.name().equals(permission.getMembershipType())) {\n                    departmentCodeList.add(permission.getMembershipCode());\n                }\n            }\n        }\n        \n        // 查询部门信息并构建名称映射\n        Map\u003cString, String\u003e departmentNameMap \u003d new HashMap\u003c\u003e();\n        if (CollectionUtil.isNotEmpty(departmentCodeList)) {\n            LambdaQueryWrapper\u003cKbDepartment\u003e departmentWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            departmentWrapper.eq(KbDepartment::getTenantId, tenantId)\n                    .in(KbDepartment::getCode, departmentCodeList);\n            \n            List\u003cKbDepartment\u003e departments \u003d kbDepartmentMapper.selectList(departmentWrapper);\n            departmentNameMap \u003d departments.stream()\n                    .collect(Collectors.toMap(KbDepartment::getCode, KbDepartment::getName));\n        }\n        \n        // 查询用户信息并构建名称映射\n        Map\u003cString, String\u003e userNameMap \u003d new HashMap\u003c\u003e();\n        if (CollectionUtil.isNotEmpty(userCodeList)) {\n            LambdaQueryWrapper\u003cSysUser\u003e userWrapper \u003d new LambdaQueryWrapper\u003c\u003e();\n            userWrapper.eq(SysUser::getTenantId, tenantId)\n                    .in(SysUser::getCode, userCodeList);\n            \n            List\u003cSysUser\u003e users \u003d sysUserMapper.selectList(userWrapper);\n            userNameMap \u003d users.stream()\n                    .collect(Collectors.toMap(SysUser::getCode, SysUser::getLoginUsername));\n        }\n        \n        // 构建权限响应列表\n        List\u003cKbKnowledgeBasePermissionReq\u003e permissionReqList \u003d new ArrayList\u003c\u003e();\n        for (SaasKnowledgeContainerPermission permission : permissionList) {\n            String membershipName \u003d \"\";\n            if (KbKnowledgeBaseContainerMemberTypes.USER.name().equals(permission.getMembershipType())) {\n                membershipName \u003d userNameMap.getOrDefault(permission.getMembershipCode(), permission.getMembershipCode());\n            } else if (KbKnowledgeBaseContainerMemberTypes.ORGANIZATION.name().equals(permission.getMembershipType())\n                    || KbKnowledgeBaseContainerMemberTypes.TEAM.name().equals(permission.getMembershipType())) {\n                membershipName \u003d departmentNameMap.getOrDefault(permission.getMembershipCode(), permission.getMembershipCode());\n            }\n            \n            permissionReqList.add(KbKnowledgeBasePermissionReq.builder()\n                    .membershipCode(permission.getMembershipCode())\n                    .membershipName(membershipName)\n                    .membershipType(permission.getMembershipType())\n                    .permissionType(permission.getPermissionType())\n                    .owner(permission.getOwner())\n                    .build());\n        }\n        \n        knowledgeContainerResp.setKbKnowledgeBasePermissionReqList(permissionReqList);\n        \n        log.info(\"成功查询到用户{}有权限的知识库，数量:{}\", userCode, containerList.size());\n        return Result.data(knowledgeContainerResp)",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 117
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761556252332,
      "startOffset": 31277,
      "endOffset": 31297,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761556284431,
      "startOffset": 35726,
      "endOffset": 35746,
      "codeContent": "IntellijIdeaRulezzz;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761556494486,
      "startOffset": 31638,
      "endOffset": 31759,
      "codeContent": "Result\u003cKnowledgeContainerResp\u003e knowledgeContainerRespResult \u003d knowledgeContainerService.queryAuthKnowledgeBaseUserCode();",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556495008,
      "startOffset": 31638,
      "endOffset": 31668,
      "codeContent": "Result\u003cKnowledgeContainerResp\u003e",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556495011,
      "startOffset": 31669,
      "endOffset": 31697,
      "codeContent": "knowledgeContainerRespResult",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556499187,
      "startOffset": 31772,
      "endOffset": 31960,
      "codeContent": "if (ObjectUtil.isNotEmpty(knowledgeContainerRespResult.getData())){\n                appInfoBindReq.getContainerIds().addAll(knowledgeContainerRespResult.getData().getCode());\n            }",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761556503808,
      "startOffset": 31624,
      "endOffset": 31743,
      "codeContent": "Result\u003cKnowledgeContainerResp\u003e knowledgeContainerRespResult \u003d knowledgeContainerService.queryAuthKnowledgeBaseUserCode(",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761556503808,
      "startOffset": 31232,
      "endOffset": 31253,
      "codeContent": "\n                    ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556511373,
      "startOffset": 31856,
      "endOffset": 31894,
      "codeContent": "knowledgeContainerRespResult.getData()",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761556512612,
      "startOffset": 31856,
      "endOffset": 31925,
      "codeContent": "KnowledgeContainerResp data \u003d knowledgeContainerRespResult.getData();",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556513503,
      "startOffset": 31856,
      "endOffset": 31925,
      "codeContent": "KnowledgeContainerResp data \u003d knowledgeContainerRespResult.getData();",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556513553,
      "startOffset": 31856,
      "endOffset": 31878,
      "codeContent": "KnowledgeContainerResp",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761556682662,
      "startOffset": 31638,
      "endOffset": 31752,
      "codeContent": "List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainers \u003d knowledgeContainerService.queryAuthKnowledgeBaseUserCode();",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556683431,
      "startOffset": 31638,
      "endOffset": 31666,
      "codeContent": "List\u003cSaasKnowledgeContainer\u003e",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556683434,
      "startOffset": 31667,
      "endOffset": 31690,
      "codeContent": "saasKnowledgeContainers",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556805845,
      "startOffset": 31995,
      "endOffset": 32015,
      "codeContent": "                    ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556805847,
      "startOffset": 32250,
      "endOffset": 32270,
      "codeContent": "                    ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556805846,
      "startOffset": 32203,
      "endOffset": 32227,
      "codeContent": "                        ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556805845,
      "startOffset": 32066,
      "endOffset": 32090,
      "codeContent": "                        ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761556925219,
      "startOffset": 31816,
      "endOffset": 32028,
      "codeContent": " {\n                codes \u003d saasKnowledgeContainers.stream()\n                        .map(SaasKnowledgeContainer::getCode)\n                        .distinct()\n                        .collect(Collectors.toList());",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 5
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761556925222,
      "startOffset": 31765,
      "endOffset": 31823,
      "codeContent": "List\u003cString\u003e codes \u003d Collections.emptyList();\n            ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761556929473,
      "startOffset": 32113,
      "endOffset": 32174,
      "codeContent": "List\u003cString\u003e containerIds \u003d appInfoBindReq.getContainerIds();",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761556933766,
      "startOffset": 32187,
      "endOffset": 32336,
      "codeContent": "appInfoBindReq.setContainerIds(containerIds.stream()\n                    .filter(codes::contains)\n                    .collect(Collectors.toList()));",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761557005199,
      "startOffset": 32227,
      "endOffset": 32360,
      "codeContent": "containerIds \u003d containerIds.stream()\n                           .distinct()\n                           .collect(Collectors.toList());",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761557013719,
      "startOffset": 32359,
      "endOffset": 32404,
      "codeContent": "appInfoBindReq.setContainerIds(containerIds);",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/store/entity/AppContainer.java",
      "timestamp": 1761559445969,
      "startOffset": 1684,
      "endOffset": 1911,
      "codeContent": "    /**\n     * 是否绑定个人知识库\n     */\n    @Schema(description \u003d \"是否绑定个人知识库\")\n    private boolean bindPersonalKb \u003d false;\n\n    /**\n     * 绑定团队知识库范围\n     */\n    @Schema(description \u003d \"绑定团队知识库范围\")\n    private boolean bindAllKb \u003d false;",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 11
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/store/entity/AppContainer.java",
      "timestamp": 1761559445998,
      "startOffset": 783,
      "endOffset": 833,
      "codeContent": "import io.swagger.v3.oas.annotations.media.Schema;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/store/entity/AppContainer.java",
      "timestamp": 1761559445988,
      "startOffset": 1722,
      "endOffset": 1758,
      "codeContent": "io.swagger.v3.oas.annotations.media.",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/store/entity/AppContainer.java",
      "timestamp": 1761559479963,
      "startOffset": 3371,
      "endOffset": 3470,
      "codeContent": "public void setBindPersonalKb(boolean bindPersonalKb) {\n    this.bindPersonalKb \u003d bindPersonalKb;\n}",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/store/entity/AppContainer.java",
      "timestamp": 1761559479967,
      "startOffset": 3470,
      "endOffset": 3524,
      "codeContent": "public boolean isBindAllKb() {\n    return bindAllKb;\n}",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/store/entity/AppContainer.java",
      "timestamp": 1761559479970,
      "startOffset": 3524,
      "endOffset": 3603,
      "codeContent": "public void setBindAllKb(boolean bindAllKb) {\n    this.bindAllKb \u003d bindAllKb;\n}",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/store/entity/AppContainer.java",
      "timestamp": 1761559486622,
      "startOffset": 3655,
      "endOffset": 4210,
      "codeContent": "public java.lang.String toString() {\n    return \"AppContainer{\" +\n            \"id\u003d\" + id +\n            \", creator\u003d\u0027\" + creator + \u0027\\\u0027\u0027 +\n            \", createTime\u003d\" + createTime +\n            \", modifier\u003d\u0027\" + modifier + \u0027\\\u0027\u0027 +\n            \", modifierTime\u003d\" + modifierTime +\n            \", sort\u003d\" + sort +\n            \", tenantId\u003d\u0027\" + tenantId + \u0027\\\u0027\u0027 +\n            \", containerId\u003d\u0027\" + containerId + \u0027\\\u0027\u0027 +\n            \", appId\u003d\u0027\" + appId + \u0027\\\u0027\u0027 +\n            \", bindPersonalKb\u003d\" + bindPersonalKb +\n            \", bindAllKb\u003d\" + bindAllKb +\n            \u0027}\u0027;\n}",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 15
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppContainerServiceImpl.java",
      "timestamp": 1761559537926,
      "startOffset": 2718,
      "endOffset": 2773,
      "codeContent": "                appContainer.setModifierTime(nowTime);\n",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppContainerServiceImpl.java",
      "timestamp": 1761559538062,
      "startOffset": 2773,
      "endOffset": 2828,
      "codeContent": "                appContainer.setModifierTime(nowTime);\n",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/AppContainerServiceImpl.java",
      "timestamp": 1761559539349,
      "startOffset": 2748,
      "endOffset": 2768,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/model/dto/AppContainerResp.java",
      "timestamp": 1761559771458,
      "startOffset": 1097,
      "endOffset": 1324,
      "codeContent": "    /**\n     * 是否绑定个人知识库\n     */\n    @Schema(description \u003d \"是否绑定个人知识库\")\n    private boolean bindPersonalKb \u003d false;\n\n    /**\n     * 绑定团队知识库范围\n     */\n    @Schema(description \u003d \"绑定团队知识库范围\")\n    private boolean bindAllKb \u003d false;",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 11
    },
    {
      "filePath": "/_Dummy_.java",
      "timestamp": 1761560202406,
      "startOffset": 65,
      "endOffset": 116,
      "codeContent": "(SaasKnowledgeContainerPermission::getContainerId);",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/_Dummy_.java",
      "timestamp": 1761560202409,
      "startOffset": 0,
      "endOffset": 72,
      "codeContent": "import com.torchv.repository.kb.entity.SaasKnowledgeContainerPermission;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/_Dummy_.java",
      "timestamp": 1761560202408,
      "startOffset": 66,
      "endOffset": 98,
      "codeContent": "com.torchv.repository.kb.entity.",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232769,
      "startOffset": 9176,
      "endOffset": 9196,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232769,
      "startOffset": 9211,
      "endOffset": 9231,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232770,
      "startOffset": 9970,
      "endOffset": 9990,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232770,
      "startOffset": 10010,
      "endOffset": 10030,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232771,
      "startOffset": 10821,
      "endOffset": 10841,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232771,
      "startOffset": 10861,
      "endOffset": 10881,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232774,
      "startOffset": 12189,
      "endOffset": 12213,
      "codeContent": "\n                       ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232774,
      "startOffset": 12300,
      "endOffset": 12324,
      "codeContent": "\n                       ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232775,
      "startOffset": 13435,
      "endOffset": 13459,
      "codeContent": "\n                       ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232776,
      "startOffset": 13546,
      "endOffset": 13570,
      "codeContent": "\n                       ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232804,
      "startOffset": 88779,
      "endOffset": 88799,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232803,
      "startOffset": 88745,
      "endOffset": 88765,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232803,
      "startOffset": 87835,
      "endOffset": 87855,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232803,
      "startOffset": 87801,
      "endOffset": 87821,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232802,
      "startOffset": 86901,
      "endOffset": 86921,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232802,
      "startOffset": 86867,
      "endOffset": 86887,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232797,
      "startOffset": 42354,
      "endOffset": 42374,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232797,
      "startOffset": 42305,
      "endOffset": 42325,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232796,
      "startOffset": 42198,
      "endOffset": 42218,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232795,
      "startOffset": 40029,
      "endOffset": 40049,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232795,
      "startOffset": 39975,
      "endOffset": 39995,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232794,
      "startOffset": 37824,
      "endOffset": 37844,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232794,
      "startOffset": 37775,
      "endOffset": 37795,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232794,
      "startOffset": 37682,
      "endOffset": 37702,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232793,
      "startOffset": 36328,
      "endOffset": 36348,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232793,
      "startOffset": 36063,
      "endOffset": 36083,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232793,
      "startOffset": 36035,
      "endOffset": 36055,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232792,
      "startOffset": 35986,
      "endOffset": 36006,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232792,
      "startOffset": 35928,
      "endOffset": 35948,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232791,
      "startOffset": 34108,
      "endOffset": 34128,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232791,
      "startOffset": 34074,
      "endOffset": 34094,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232790,
      "startOffset": 34040,
      "endOffset": 34060,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232790,
      "startOffset": 33965,
      "endOffset": 33985,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232789,
      "startOffset": 33914,
      "endOffset": 33934,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232789,
      "startOffset": 33158,
      "endOffset": 33178,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232788,
      "startOffset": 33124,
      "endOffset": 33144,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232788,
      "startOffset": 33090,
      "endOffset": 33110,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232788,
      "startOffset": 33015,
      "endOffset": 33035,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232787,
      "startOffset": 32965,
      "endOffset": 32985,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232786,
      "startOffset": 30641,
      "endOffset": 30661,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232785,
      "startOffset": 30454,
      "endOffset": 30474,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232784,
      "startOffset": 28951,
      "endOffset": 28971,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232784,
      "startOffset": 28917,
      "endOffset": 28937,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232783,
      "startOffset": 28819,
      "endOffset": 28839,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232783,
      "startOffset": 28137,
      "endOffset": 28157,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232782,
      "startOffset": 28103,
      "endOffset": 28123,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232782,
      "startOffset": 28006,
      "endOffset": 28026,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232777,
      "startOffset": 14248,
      "endOffset": 14268,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/Collectors.java",
      "timestamp": 1761560232777,
      "startOffset": 14213,
      "endOffset": 14233,
      "codeContent": "\n                   ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "/AppContainer.java",
      "timestamp": 1761560355975,
      "startOffset": 1782,
      "endOffset": 1802,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/AppInfoResp.java",
      "timestamp": 1761560852909,
      "startOffset": 2786,
      "endOffset": 2806,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/model/dto/AppInfoResp.java",
      "timestamp": 1761560862728,
      "startOffset": 2786,
      "endOffset": 2935,
      "codeContent": "    /**\n     * 是否绑定个人知识库：0-否，1-是\n     */\n    private boolean bindPersonalKb;\n\n    /**\n     * 是否绑定全部知识库：0-否，1-是\n     */\n    private boolean bindAllKb;",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 9
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/model/dto/AppInfoResp.java",
      "timestamp": 1761560865516,
      "startOffset": 2785,
      "endOffset": 2934,
      "codeContent": "    /**\n     * 是否绑定个人知识库：0-否，1-是\n     */\n    private boolean bindPersonalKb;\n\n    /**\n     * 是否绑定全部知识库：0-否，1-是\n     */\n    private boolean bindAllKb;",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 9
    },
    {
      "filePath": "/AppInfoResp.java",
      "timestamp": 1761560883081,
      "startOffset": 2818,
      "endOffset": 2844,
      "codeContent": "@IntellijIdeaRulezzz \n    ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/store/entity/AppInfo.java",
      "timestamp": 1761568515636,
      "startOffset": 2584,
      "endOffset": 2733,
      "codeContent": "    /**\n     * 是否绑定个人知识库：0-否，1-是\n     */\n    private boolean bindPersonalKb;\n\n    /**\n     * 是否绑定全部知识库：0-否，1-是\n     */\n    private boolean bindAllKb;",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 9
    },
    {
      "filePath": "/AppInfoServiceImpl.java",
      "timestamp": 1761568760378,
      "startOffset": 30691,
      "endOffset": 30711,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761568763160,
      "startOffset": 30708,
      "endOffset": 30824,
      "codeContent": "\u003cAppInfo\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppInfo.class).eq(AppInfo::getAppid, appInfoBindReq.getAppid());",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/PagePermissionServiceImpl.java",
      "timestamp": 1761620717385,
      "startOffset": 7611,
      "endOffset": 7631,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/page/service/impl/PagePermissionServiceImpl.java",
      "timestamp": 1761621245195,
      "startOffset": 7602,
      "endOffset": 8107,
      "codeContent": "        // 为USER类型的权限设置owner标志\n        for (SaasKnowledgeElementPermissionResp resp : result) {\n            if (StrUtil.equalsIgnoreCase(resp.getMembershipType(), KbKnowledgeBaseContainerMemberTypes.USER.name())) {\n                // 如果membershipCode与文档创建人creator匹配，则设置为owner\n                if (StrUtil.isNotBlank(record.getCreator()) \u0026\u0026 StrUtil.equalsIgnoreCase(resp.getMembershipCode(), record.getCreator())) {\n                    resp.setOwner(true);\n                }\n            }\n        }\n        ",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 10
    },
    {
      "filePath": "/PagePermissionServiceImpl.java",
      "timestamp": 1761621280034,
      "startOffset": 8075,
      "endOffset": 8095,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/chat/mapper/SaasKnowledgeTagRelationMapper.java",
      "timestamp": 1761621676913,
      "startOffset": 1536,
      "endOffset": 1832,
      "codeContent": "\n    /**\n     * 根据多个标签(匹配全部)查询容器ID\n     * @param tenantId 租户id\n     * @param names 标签名称列表\n     * @param tagCount 标签数量\n     * @return 容器ID列表\n     */\n    List\u003cString\u003e listContainerIdsMatchAll(@Param(\"tenantId\") String tenantId, @Param(\"names\") List\u003cString\u003e names, @Param(\"tagCount\") int tagCount);\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 10
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/tag/service/impl/TagRelationServiceImpl.java",
      "timestamp": 1761621676958,
      "startOffset": 9177,
      "endOffset": 9227,
      "codeContent": "Transactional(rollbackFor \u003d Exception.class)\n    @",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeTagRelationServiceImpl.java",
      "timestamp": 1761621676931,
      "startOffset": 6149,
      "endOffset": 6481,
      "codeContent": "\n    @Override\n    public List\u003cString\u003e listContainerIdsMatchAll(String tenantId, List\u003cString\u003e names){\n        if (CollUtil.isEmpty(names) || StrUtil.isBlank(tenantId)){\n            return Collections.emptyList();\n        }\n        return saasKnowledgeTagRelationMapper.listContainerIdsMatchAll(tenantId, names, names.size());\n    }\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 9
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761621676925,
      "startOffset": 9660,
      "endOffset": 14971,
      "codeContent": "\n        List\u003cString\u003e matchAllTagNames \u003d Collections.emptyList();\n        if (StrUtil.isNotBlank(knowledgeContainerQueryReq.getTag())) {\n            matchAllTagNames \u003d Arrays.stream(knowledgeContainerQueryReq.getTag().split(\",\"))\n                    .map(String::trim)\n                    .filter(StrUtil::isNotBlank)\n                    .distinct()\n                    .toList();\n        }\n        List\u003cString\u003e filterContainerCodes \u003d null;\n        if (CollUtil.isNotEmpty(matchAllTagNames)) {\n            // 查询包含全部标签的容器id集合\n            filterContainerCodes \u003d knowledgeTagRelationService.listContainerIdsMatchAll(tenantId, matchAllTagNames);\n            if (CollUtil.isEmpty(filterContainerCodes)) {\n                return Pagination.pagination(Collections.emptyList(),0,pageNo,pageSize);\n            }\n        }\n        // 我的知识库\n        if (knowledgeContainerQueryReq.getCreator()!\u003d null \u0026\u0026 knowledgeContainerQueryReq.getCreator()){\n            // 如果是标签非空的查询，那么首先需要查询标签关联表\n            List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos;\n            long count;\n            try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.selectList(Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getTenantId, tenantId)\n                        .eq(SaasKnowledgeContainer::getCreator, code)\n                                .like(StrUtil.isNotBlank(knowledgeContainerQueryReq.getName()), SaasKnowledgeContainer::getName, knowledgeContainerQueryReq.getName())\n                        .eq(StrUtil.isNotEmpty(knowledgeContainerQueryReq.getClassifyCode()),SaasKnowledgeContainer::getClassifyCode, knowledgeContainerQueryReq.getClassifyCode())\n                        .in(ObjectUtil.isNotEmpty(filterContainerCodes),SaasKnowledgeContainer::getCode, filterContainerCodes)\n                        .orderByDesc(SaasKnowledgeContainer::getCreateTime));\n                count \u003d saasKnowledgeContainerPageNo.getTotal();\n            }\n            if (CollectionUtil.isNotEmpty(saasKnowledgeContainerInfos)) {\n                // 获取知识库容器列表\n                List\u003cString\u003e containerId \u003d saasKnowledgeContainerInfos.stream().map(SaasKnowledgeContainer::getCode).toList();\n                // 获取容器下的标签\n                Map\u003cString, List\u003cString\u003e\u003e tagMap \u003d knowledgeTagRelationService.listByContainerIds(containerId, tenantId);\n                Map\u003cString, UniversalEmbeddingConfig\u003e embeddingConfigMap\u003dknowledgeElementEmbeddingQueryService.listEmbeddingModelsByContainerId(containerId);\n                for (SaasKnowledgeContainer container:saasKnowledgeContainerInfos){\n                    KnowledgeContainerResp containerResp\u003d new SaasKnowledgeContainerApplyFunction(tagMap).apply(container);\n                    // 创建者默认就是manage\n                    containerResp.setPermissionType(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode());\n                    containerResp.applyEmbedding(embeddingConfigMap.get(container.getCode()));\n                    knowledgeContainerRespInfos.add(containerResp);\n                }\n            }\n            return Pagination.pagination(knowledgeContainerRespInfos, count, pageNo, pageSize);\n        }else{\n            List\u003cString\u003e teamCodes \u003d new ArrayList\u003c\u003e();\n            List\u003cString\u003e organizationCodes\u003dnew ArrayList\u003c\u003e();\n            // 开始查询\n            List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos;\n            long count;\n            boolean manageKnowledge\u003dsecureConfig.isManageKnowledge() \u0026\u0026 StpUtil.hasRole(Cns.CLI_ADMIN_ROLE);\n            // 启用超管账号，能够看到所有的知识\n            if (manageKnowledge){\n                // 单独查询\n                try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                    LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e wrapper \u003d getWrapper(knowledgeContainerQueryReq,sysUserInfo);\n                    if (CollUtil.isNotEmpty(filterContainerCodes)) {\n                        wrapper.in(SaasKnowledgeContainer::getCode, filterContainerCodes);\n                    }\n                    saasKnowledgeContainerInfos\u003d saasKnowledgeContainerMapper.selectList(wrapper);\n                    count \u003d saasKnowledgeContainerPageNo.getTotal();\n                }\n            }else{\n                // 查询全部列表的\n                DepartmentUserOrgPermissions orgPermissions\u003dkbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n                organizationCodes\u003dorgPermissions.getOrganizationCodes();\n                teamCodes\u003dorgPermissions.getTeamCodes();\n                try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                    //List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByCondition(ContainerPermissionCondition.of(tenantId,code,teamCodes,processedOrgCodes,knowledgeContainerQueryReq.getName(),null));\n                    saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByConditionV1(ContainerPermissionConditionV1.of(tenantId, orgPermissions.permissionCodesToList(), knowledgeContainerQueryReq.getName(), null, knowledgeContainerQueryReq.getClassifyCode(), filterContainerCodes",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 72
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/KnowledgeTagRelationService.java",
      "timestamp": 1761621676919,
      "startOffset": 2272,
      "endOffset": 2469,
      "codeContent": "\n    /**\n     * 查询包含所有指定标签的容器id\n     * @param tenantId 租户id\n     * @param names 标签名称列表\n     * @return 容器id列表\n     */\n    List\u003cString\u003e listContainerIdsMatchAll(String tenantId, List\u003cString\u003e names);\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 9
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/KnowledgeContainerService.java",
      "timestamp": 1761621693760,
      "startOffset": 2599,
      "endOffset": 2942,
      "codeContent": "用户编码查询用户个人知识库\n     * @param code 知识库容器code\n     * @return 知识库容器详情\n     */\n    Result\u003cKnowledgeContainerResp\u003e queryUsersPersonalKnowledgeBase(String tenantId,String userCode);\n\n    /**\n     * 根据用户编码查询有权限的知识库集合\n     * @param sysUserInfo\n     * @return\n     */\n    List\u003cSaasKnowledgeContainer\u003e queryAuthKnowledgeBaseUserCode();\n\n    /**\n     * 根据",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 15
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/model/dto/AppInfoResp.java",
      "timestamp": 1761621693770,
      "startOffset": 2771,
      "endOffset": 3034,
      "codeContent": "\n\n    /**\n     * 是否绑定个人知识库：0-否，1-是\n     */\n    @Schema(description \u003d \"是否绑定个人知识库：0-否，1-是\")\n    private boolean bindPersonalKb \u003d false;\n\n    /**\n     * 是否绑定全部知识库：0-否，1-是\n     */\n    @Schema(description \u003d \"是否绑定全部知识库：0-否，1-是\")\n    private boolean bindAllKb \u003d  false;\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 14
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/model/vo/AppInfoBindReq.java",
      "timestamp": 1761621693773,
      "startOffset": 1449,
      "endOffset": 1678,
      "codeContent": "\n    /**\n     * 是否绑定个人知识库\n     */\n    @Schema(description \u003d \"是否绑定个人知识库\")\n    private boolean bindPersonalKb \u003d false;\n\n    /**\n     * 绑定团队知识库范围\n     */\n    @Schema(description \u003d \"绑定团队知识库范围\")\n    private boolean bindAllKb \u003d false;\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 13
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761621693769,
      "startOffset": 4258,
      "endOffset": 37572,
      "codeContent": ";\nimport com.torchv.repository.chat.dto.ContainerPermissionConditionV1;\nimport com.torchv.repository.chat.entity.SaasKnowledgeContainer;\nimport com.torchv.repository.chat.entity.SaasKnowledgeElementPermission;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeContainerMapper;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeElementPermissionMapper;\nimport com.torchv.repository.kb.department.dto.KbDepartmentUserTypeInfo;\nimport com.torchv.repository.kb.department.entity.KbDepartment;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentMapper;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentUserMapper;\nimport com.torchv.repository.kb.entity.SaasKnowledgeConfigContainer;\nimport com.torchv.repository.kb.entity.SaasKnowledgeConfigElement;\nimport com.torchv.repository.kb.entity.SaasKnowledgeContainerPermission;\nimport com.torchv.repository.kb.space.entity.KbSpaceFollowing;\nimport com.torchv.repository.kb.system.entity.KbDashboardComponent;\nimport com.torchv.repository.tenant.entity.SaasTenantInfo;\nimport com.torchv.repository.user.entity.SysUser;\nimport com.torchv.repository.user.mapper.SysUserMapper;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * 知识库容器模块-业务Service实现\n * @since torchv_server v0.1-beta.1\n * @author \u003ca href\u003d\"mailto:xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/01/02 19:54\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class KnowledgeContainerServiceImpl implements KnowledgeContainerService {\n\n    final SaasKnowledgeContainerMapper saasKnowledgeContainerMapper;\n    final KnowledgeElementService knowledgeElementService;\n    final PlatformKeyContainerService platformKeyContainerService;\n    final SaasKnowledgeContainerPermissionService saasKnowledgeContainerPermissionService;\n    final SaasKnowledgeConfigContainerService saasKnowledgeConfigContainerService;\n    final SaasKnowledgeConfigElementService saasKnowledgeConfigElementService;\n    final I18nMessage i18nMessage;\n    final KnowledgeTagRelationService knowledgeTagRelationService;\n    final KnowledgeCategoryService knowledgeCategoryService;\n    final KbDepartmentUserMapper kbDepartmentUserMapper;\n    final KbDepartmentUserService kbDepartmentUserService;\n    final KbDepartmentMapper kbDepartmentMapper;\n    final SysUserMapper sysUserMapper;\n    final VectorIndexDelegate vectorDatabaseDelegate;\n    final TenantInfoService tenantInfoService;\n    final ModelProviderService modelProviderService;\n    final KbDashboardComponentService kbDashboardComponentService;\n    final KnowledgeContainerDataService knowledgeContainerDataService;\n    final KnowledgeElementEmbeddingQueryService knowledgeElementEmbeddingQueryService;\n    final KnowledgeElementDataService knowledgeElementDataService;\n    final KbSpaceFollowService kbSpaceFollowService;\n    final PagePermissionService pagePermissionService;\n    final SecureConfig secureConfig;\n\n    private LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e getWrapper(KnowledgeContainerQueryReq knowledgeContainerQueryReq,SysUserInfo sysUserInfo) {\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getTenantId());\n        lambdaQueryWrapper.like(StrUtil.isNotBlank(knowledgeContainerQueryReq.getName()), SaasKnowledgeContainer::getName, knowledgeContainerQueryReq.getName());\n        lambdaQueryWrapper.ne(SaasKnowledgeContainer::getType, KnowledgeContainerType.PERSONAL_KNOWLEDGE.name());\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeContainerQueryReq.getCategory()), SaasKnowledgeContainer::getCategory, knowledgeContainerQueryReq.getCategory());\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeContainerQueryReq.getType()), SaasKnowledgeContainer::getType, knowledgeContainerQueryReq.getType());\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(knowledgeContainerQueryReq.getClassifyCode()), SaasKnowledgeContainer::getClassifyCode, knowledgeContainerQueryReq.getClassifyCode());\n\n        if (StrUtil.isNotBlank(knowledgeContainerQueryReq.getParentCode())) {\n            lambdaQueryWrapper.eq(SaasKnowledgeContainer::getParentCode, knowledgeContainerQueryReq.getParentCode());\n        } else {\n            lambdaQueryWrapper.eq(SaasKnowledgeContainer::getParentCode, \"0\");\n        }\n        // 时间倒叙\n        lambdaQueryWrapper.orderByDesc(SaasKnowledgeContainer::getCreateTime);\n        return lambdaQueryWrapper;\n    }\n\n    /**\n     * 分页查询-知识库容器列表数据\n     * @param knowledgeContainerQueryReq 查询条件Vo\n     * @param pageNo 当前页码\n     * @param pageSize 每页页码大小\n     * @return 知识库容器列表\n     */\n    @Override\n    public Pagination\u003cKnowledgeContainerResp\u003e list(KnowledgeContainerQueryReq knowledgeContainerQueryReq, Integer pageNo, Integer pageSize) {\n        log.info(\"分页查询知识库容器列表,pageNo:{},pageSize:{}\", pageNo, pageSize);\n        log.info(\"分页QueryReq:{}\", knowledgeContainerQueryReq.toString());\n        // 权限增强获取知识库容器列表\n        SysUserInfo sysUserInfo\u003dUserContextHolder.getCurrentUser();\n        String code \u003d sysUserInfo.getCode();\n        String tenantId \u003d sysUserInfo.getTenantId();\n        List\u003cKnowledgeContainerResp\u003e knowledgeContainerRespInfos \u003d new ArrayList\u003c\u003e();\n        // 我的知识库\n        if (knowledgeContainerQueryReq.getCreator()!\u003d null \u0026\u0026 knowledgeContainerQueryReq.getCreator()){\n            // 如果是标签非空的查询，那么首先需要查询标签关联表\n            List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos;\n            long count;\n            try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.selectList(Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getTenantId, tenantId)\n                        .eq(SaasKnowledgeContainer::getCreator, code)\n                                .like(StrUtil.isNotBlank(knowledgeContainerQueryReq.getName()), SaasKnowledgeContainer::getName, knowledgeContainerQueryReq.getName())\n                        .eq(StrUtil.isNotEmpty(knowledgeContainerQueryReq.getClassifyCode()),SaasKnowledgeContainer::getClassifyCode, knowledgeContainerQueryReq.getClassifyCode())\n                        .orderByDesc(SaasKnowledgeContainer::getCreateTime));\n                count \u003d saasKnowledgeContainerPageNo.getTotal();\n            }\n            if (CollectionUtil.isNotEmpty(saasKnowledgeContainerInfos)) {\n                // 获取知识库容器列表\n                List\u003cString\u003e containerId \u003d saasKnowledgeContainerInfos.stream().map(SaasKnowledgeContainer::getCode).toList();\n                // 获取容器下的标签\n                Map\u003cString, List\u003cString\u003e\u003e tagMap \u003d knowledgeTagRelationService.listByContainerIds(containerId, tenantId);\n                Map\u003cString, UniversalEmbeddingConfig\u003e embeddingConfigMap\u003dknowledgeElementEmbeddingQueryService.listEmbeddingModelsByContainerId(containerId);\n                for (SaasKnowledgeContainer container:saasKnowledgeContainerInfos){\n                    KnowledgeContainerResp containerResp\u003d new SaasKnowledgeContainerApplyFunction(tagMap).apply(container);\n                    // 创建者默认就是manage\n                    containerResp.setPermissionType(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode());\n                    containerResp.applyEmbedding(embeddingConfigMap.get(container.getCode()));\n                    knowledgeContainerRespInfos.add(containerResp);\n                }\n            }\n            return Pagination.pagination(knowledgeContainerRespInfos, count, pageNo, pageSize);\n        }else{\n            List\u003cString\u003e teamCodes \u003d new ArrayList\u003c\u003e();\n            List\u003cString\u003e organizationCodes\u003dnew ArrayList\u003c\u003e();\n            // 开始查询\n            List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos;\n            long count;\n            boolean manageKnowledge\u003dsecureConfig.isManageKnowledge() \u0026\u0026 StpUtil.hasRole(Cns.CLI_ADMIN_ROLE);\n            // 启用超管账号，能够看到所有的知识\n            if (manageKnowledge){\n                // 单独查询\n                try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                    //List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByCondition(ContainerPermissionCondition.of(tenantId,code,teamCodes,processedOrgCodes,knowledgeContainerQueryReq.getName(),null));\n                    saasKnowledgeContainerInfos\u003d saasKnowledgeContainerMapper.selectList(getWrapper(knowledgeContainerQueryReq,sysUserInfo));\n                    count \u003d saasKnowledgeContainerPageNo.getTotal();\n                }\n            }else{\n                // 查询全部列表的\n                DepartmentUserOrgPermissions orgPermissions\u003dkbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n                organizationCodes\u003dorgPermissions.getOrganizationCodes();\n                teamCodes\u003dorgPermissions.getTeamCodes();\n                try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                    //List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByCondition(ContainerPermissionCondition.of(tenantId,code,teamCodes,processedOrgCodes,knowledgeContainerQueryReq.getName(),null));\n                    saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByConditionV1(ContainerPermissionConditionV1.of(tenantId, orgPermissions.permissionCodesToList(), knowledgeContainerQueryReq.getName(), null, knowledgeContainerQueryReq.getClassifyCode()));\n                    count \u003d saasKnowledgeContainerPageNo.getTotal();\n                }\n            }\n            if (CollectionUtil.isNotEmpty(saasKnowledgeContainerInfos)) {\n                // 获取知识库容器列表\n                List\u003cString\u003e containerId \u003d saasKnowledgeContainerInfos.stream().map(SaasKnowledgeContainer::getCode).toList();\n                // 批量查询创建者名字\n                Map\u003cString, CreatorInfo\u003e creatorInfoMap \u003d batchQueryCreatorInfo(saasKnowledgeContainerInfos, tenantId);\n                // 查询用户容器的权限列表\n                Map\u003cString,List\u003cSaasKnowledgeContainerPermission\u003e\u003e containerPermissionMap \u003d saasKnowledgeContainerPermissionService.listByContainerId(containerId, tenantId);\n                // 获取容器下的标签\n                Map\u003cString, List\u003cString\u003e\u003e tagMap \u003d knowledgeTagRelationService.listByContainerIds(containerId, tenantId);\n                Map\u003cString, UniversalEmbeddingConfig\u003e embeddingConfigMap\u003dknowledgeElementEmbeddingQueryService.listEmbeddingModelsByContainerId(containerId);\n                for (SaasKnowledgeContainer container:saasKnowledgeContainerInfos){\n                    KnowledgeContainerResp containerResp\u003d new SaasKnowledgeContainerApplyFunction(tagMap).apply(container);\n                    // 设置创建者名字\n                    CreatorInfo creatorInfo \u003d creatorInfoMap.get(container.getCreator());\n                    if (creatorInfo !\u003d null) {\n                        containerResp.setCreatorName(creatorInfo.getName());\n                        containerResp.setCreatorAvatar(creatorInfo.getAvatar());\n                    }\n                    // 判断用户的角色\n                    if (manageKnowledge){\n                        // 默认就是超管\n                        containerResp.setPermissionType(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode());\n                    }else {\n                        // 创建者默认就是manage\n                        containerResp.setPermissionType(getHighestPermission(containerPermissionMap.get(container.getCode()),organizationCodes,teamCodes,code));\n                    }\n                    containerResp.applyEmbedding(embeddingConfigMap.get(container.getCode()));\n                    knowledgeContainerRespInfos.add(containerResp);\n                }\n            }\n            return Pagination.pagination(knowledgeContainerRespInfos, count, pageNo, pageSize);\n        }\n    }\n\n    /**\n     * 创建知识库容器权限对象\n     * @param containerId 容器ID\n     * @param sysUserInfo 用户信息\n     * @param permissionType 权限类型\n     * @param membershipType 成员类型\n     * @param membershipCode 成员编码\n     * @param owner 是否所有者\n     * @return 权限对象\n     */\n    private SaasKnowledgeContainerPermission createContainerPermission(\n                                                                       String containerId,\n                                                                       String visibilityRange,\n                                                                       SysUserInfo sysUserInfo,\n                                                                       String permissionType,\n                                                                       String membershipType,\n                                                                       String membershipCode,\n                                                                       boolean owner) {\n        return SaasKnowledgeContainerPermission.builder()\n                .containerId(containerId)\n                .creator(sysUserInfo.getCode())\n                .createTime(LocalDateTime.now())\n                .modifier(sysUserInfo.getCode())\n                .modifierTime(LocalDateTime.now())\n                .tenantId(sysUserInfo.getTenantId())\n                .permissionType(permissionType)\n                .membershipType(membershipType)\n                .membershipCode(membershipCode)\n                .owner(owner)\n                .build();\n    }\n\n    /**\n     * 设置知识库容器权限\n     * @param containerId 容器ID\n     * @param sysUserInfo 用户信息\n     * @param permissionReqList 权限请求列表\n     */\n    private void setupContainerPermissions(\n                                           String containerId,\n                                           String visibilityRange,\n                                           SysUserInfo sysUserInfo,\n                                           List\u003cKbKnowledgeBasePermissionReq\u003e permissionReqList) {\n        List\u003cSaasKnowledgeContainerPermission\u003e permissionList \u003d new ArrayList\u003c\u003e();\n\n        // 添加用户自定义权限\n        // 过滤用户自己的权限\n        permissionReqList \u003d permissionReqList.stream().filter(kbKnowledgeBasePermissionReq -\u003e !kbKnowledgeBasePermissionReq.getOwner()).toList();\n        if (CollUtil.isNotEmpty(permissionReqList)) {\n            permissionReqList.forEach(req -\u003e {\n                if (req.getPermissionType() \u003d\u003d null \u0026\u0026 req.getMembershipType() \u003d\u003d null \u0026\u0026 req.getMembershipCode() \u003d\u003d null) {\n                    return;\n                }\n                permissionList.add(createContainerPermission(\n                        containerId,\n                        visibilityRange,\n                        sysUserInfo,\n                        req.getPermissionType(),\n                        req.getMembershipType(),\n                        req.getMembershipCode(),\n                        false));\n            });\n        }\n\n        // 添加创建者权限\n        permissionList.add(createContainerPermission(\n                containerId,\n                visibilityRange,\n                sysUserInfo,\n                KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode(),\n                KbKnowledgeBaseContainerMemberTypes.USER.getCode(),\n                sysUserInfo.getCode(),\n                true));\n\n        saasKnowledgeContainerPermissionService.saveBatch(permissionList);\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e add(KnowledgeContainerAddReq knowledgeContainerAddReq) {\n        log.info(\"新增知识库容器数据,Vo:{}\", knowledgeContainerAddReq.toString());\n        // 校验tags的长度\n        knowledgeContainerAddReq.validateTagLength();\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        if (StrUtil.equalsIgnoreCase(knowledgeContainerAddReq.getType(), KnowledgeContainerType.PERSONAL_KNOWLEDGE.name())) {\n            // 校验个人知识库\n            knowledgeContainerDataService.checkExists(sysUserInfo, true);\n        }\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d new SaasKnowledgeContainer();\n        BeanUtils.copyProperties(knowledgeContainerAddReq, saasKnowledgeContainer);\n        // 服务端生成唯一编码\n        saasKnowledgeContainer.setCode(IdUtil.getSnowflakeNextIdStr());\n        saasKnowledgeContainer.setCreator(sysUserInfo.getCode());\n        saasKnowledgeContainer.setCreateTime(LocalDateTime.now());\n        saasKnowledgeContainer.setModifier(sysUserInfo.getCode());\n        saasKnowledgeContainer.setModifierTime(LocalDateTime.now());\n        // 设置租户\n        saasKnowledgeContainer.setTenantId(sysUserInfo.getTenantId());\n        // 知识容器的可见性类型\n        saasKnowledgeContainer.setVisibilityRange(knowledgeContainerAddReq.getVisibilityRange());\n        int ret \u003d saasKnowledgeContainerMapper.insert(saasKnowledgeContainer);\n        if (ret \u003e 0) {\n            // 新增标签关联\n            knowledgeTagRelationService.addTags(saasKnowledgeContainer.getCode(), sysUserInfo, knowledgeContainerAddReq.getTag());\n\n            // 设置知识库配置\n            SaasKnowledgeConfigContainer saasKnowledgeConfigContainer \u003d buildKnowledgeConfigContainer(\n                    saasKnowledgeContainer.getCode(),\n                    sysUserInfo,\n                    knowledgeContainerAddReq);\n            saasKnowledgeConfigContainerService.save(saasKnowledgeConfigContainer);\n            log.info(\"知识库配置信息保存成功\");\n            // 设置容器权限\n            setupContainerPermissions(\n                    saasKnowledgeContainer.getCode(),\n                    knowledgeContainerAddReq.getVisibilityRange(),\n                    sysUserInfo,\n                    knowledgeContainerAddReq.getKbKnowledgeBasePermissionReqList());\n\n            Optional\u003cSaasTenantInfo\u003e saasTenantInfo \u003d tenantInfoService.queryByCode(sysUserInfo.getTenantId());\n            if (saasTenantInfo.isEmpty()) {\n                throw new IllegalArgumentException(\"The tenant account does not exist.\");\n            }\n            Optional\u003cUniversalEmbeddingConfig\u003e embeddingConfigOptional\u003dmodelProviderService.loadEmbedding(saasKnowledgeConfigContainer.getEmbeddingModel());\n            if (embeddingConfigOptional.isEmpty()) {\n                throw new IllegalArgumentException(\"The embedding model does not exist.\");\n            }\n\n\n            // 初始化向量数据库\n            VectorIndexCreateReq createReq \u003d\n                    VectorIndexCreateReq.builder().containerId(saasKnowledgeContainer.getCode())\n                            .tenantId(saasKnowledgeContainer.getTenantId())\n                            .embeddingModels(embeddingConfigOptional.get())\n                            .dbTypes(VectorDBTypes.of(saasTenantInfo.get().getDbType())).build();\n            vectorDatabaseDelegate.createIndex(createReq);\n\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.add.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.add.fail\"));\n    }\n\n    /**\n     * 添加个人知识库\n     * \u003cp\u003e\n     * 该方法用于为当前用户创建一个个人知识库容器。会自动设置知识库的基本配置信息，\n     * 包括名称、类型、分类、分析引擎等参数，并将当前用户设置为知识库的管理者。\n     *\n     * @return Result\u003cString\u003e 操作结果，包含创建的知识库ID或错误信息\n     */\n    @Override\n    public Result\u003cString\u003e addPersonal() {\n        // 获取当前登录用户信息\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n\n        // 根据租户ID获取租户信息，用于获取嵌入模型配置\n        SaasTenantInfoCacheResp tenantInfo \u003d tenantInfoService.getByCode(sysUserInfo.getTenantId());\n\n        // 构建知识库权限列表，将当前用户设置为知识库的拥有者和管理者\n        List\u003cKbKnowledgeBasePermissionReq\u003e permissionReqList \u003d new ArrayList\u003c\u003e();\n        permissionReqList.add(KbKnowledgeBasePermissionReq.builder()\n                .membershipCode(sysUserInfo.getCode())\n                .membershipName(sysUserInfo.getLoginUsername())\n                .membershipType(KbKnowledgeBaseContainerMemberTypes.USER.getCode())\n                .permissionType(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode())\n                .owner(true)\n                .build());\n\n        // 构建知识库添加请求参数\n        KnowledgeContainerAddReq knowledgeContainerAddReq \u003d new KnowledgeContainerAddReq();\n        knowledgeContainerAddReq.setName(sysUserInfo.showName() + \"的个人知识库\");\n        knowledgeContainerAddReq.setType(KnowledgeContainerType.PERSONAL_KNOWLEDGE.name());\n        knowledgeContainerAddReq.setCategory(KnowledgeCategory.COMMON.name());\n        knowledgeContainerAddReq.setAnalysisEngine(AnalysisEngineEnum.DEFAULT.name());\n        knowledgeContainerAddReq.setAnalysisMode(AnalysisModeEnum.FAST_MODE.name());\n        knowledgeContainerAddReq.setEmbeddingModel(tenantInfo.getEmbeddingModel());\n        knowledgeContainerAddReq.setImageOcr(false);\n        knowledgeContainerAddReq.setMaxChunkLength(1024);\n        knowledgeContainerAddReq.setMaxChunkSize(1024);\n        knowledgeContainerAddReq.setOverlapSize(128);\n        knowledgeContainerAddReq.setSplitMode(SplitTypes.SEMANTIC.name());\n        knowledgeContainerAddReq.setVisibilityRange(KbKnowledgeBaseContainerVisibilityRange.MEMBERS_ONLY.getCode());\n        knowledgeContainerAddReq.setKbKnowledgeBasePermissionReqList(permissionReqList);\n\n        // 调用添加知识库方法\n        return this.add(knowledgeContainerAddReq);\n    }\n\n\n    @Override\n    public Result\u003cString\u003e move(KnowledgeContainerMoveReq moveReq) {\n        log.info(\"移动知识库容器,Vo:{}\", moveReq.toString());\n        String tenantId \u003d UserContextHolder.getTenantId();\n        if (!StrUtil.equalsIgnoreCase(moveReq.getParentCode(), \"0\")) {\n            // 校验父id是否存在\n            SaasKnowledgeContainer parentContainer \u003d saasKnowledgeContainerMapper.selectOne(Wrappers.lambdaQuery(SaasKnowledgeContainer.class)\n                    .eq(SaasKnowledgeContainer::getCode, moveReq.getParentCode())\n                    .eq(SaasKnowledgeContainer::getTenantId, tenantId), false);\n            Assert.isTrue(StrUtil.equalsIgnoreCase(KnowledgeContainerType.DIRECTORY.getName(), Objects.requireNonNull(parentContainer, \"knowledge.move.validation.code\").getType()),\n                    \"knowledge.move.validation.dir\");\n        }\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class)\n                .eq(SaasKnowledgeContainer::getId, moveReq.getId())\n                .eq(SaasKnowledgeContainer::getTenantId, tenantId);\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d new SaasKnowledgeContainer();\n        saasKnowledgeContainer.setParentCode(moveReq.getParentCode());\n        saasKnowledgeContainer.setModifierTime(LocalDateTime.now());\n        int ret \u003d saasKnowledgeContainerMapper.update(saasKnowledgeContainer, lambdaQueryWrapper);\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n\n    /**\n     * 更新知识库容器记录\n     * @param knowledgeContainerUpdateReq 更新知识库容器条件Vo\n     * @return 是否更新成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e update(KnowledgeContainerUpdateReq knowledgeContainerUpdateReq) {\n        log.info(\"根据主键id修改知识库容器数据,Vo:{}\", knowledgeContainerUpdateReq.toString());\n        // 校验tags的长度\n        knowledgeContainerUpdateReq.validateTagLength();\n        SaasKnowledgeContainer record \u003d saasKnowledgeContainerMapper.selectById(knowledgeContainerUpdateReq.getId());\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getId, knowledgeContainerUpdateReq.getId())\n                .eq(SaasKnowledgeContainer::getTenantId, sysUserInfo.getTenantId());\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d new SaasKnowledgeContainer();\n        BeanUtils.copyProperties(knowledgeContainerUpdateReq, saasKnowledgeContainer);\n        saasKnowledgeContainer.setModifierTime(LocalDateTime.now());\n        int ret \u003d saasKnowledgeContainerMapper.update(saasKnowledgeContainer, lambdaQueryWrapper);\n        if (ret \u003e 0) {\n            // 先删除\n            knowledgeTagRelationService.deleteByContainerId(record.getCode(), sysUserInfo.getTenantId());\n            // 更新标签关联\n            knowledgeTagRelationService.addTags(record.getCode(), sysUserInfo, knowledgeContainerUpdateReq.getTag());\n        }\n        // 更新配置信息\n\n        SaasKnowledgeConfigContainer request \u003d new SaasKnowledgeConfigContainer();\n        BeanUtil.copyProperties(knowledgeContainerUpdateReq, request);\n        request.setSplitDelimiters(knowledgeContainerUpdateReq.delimitersToJson());\n\n        saasKnowledgeConfigContainerService.updateById(request);\n        // 更新权限信息\n        SaasKnowledgeContainerPermissionUpdateReq saasKnowledgeContainerPermissionUpdateReq \u003d new SaasKnowledgeContainerPermissionUpdateReq();\n        saasKnowledgeContainerPermissionUpdateReq.setContainerId(record.getCode());\n        saasKnowledgeContainerPermissionUpdateReq.setVisibilityRange(knowledgeContainerUpdateReq.getVisibilityRange());\n        saasKnowledgeContainerPermissionUpdateReq.setKbKnowledgeBasePermissionReqList(knowledgeContainerUpdateReq.getKbKnowledgeBasePermissionReqList());\n        Result\u003cString\u003e update \u003d saasKnowledgeContainerPermissionService.update(saasKnowledgeContainerPermissionUpdateReq);\n        if (\"更新成功\".equals(update.getMessage())) {\n            ret \u003d 1;\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n\n    /**\n     * 根据id查询知识库容器详情\n     * @param id 知识库容器主键id\n     * @return 知识库容器详情\n     */\n    @Override\n    public Result\u003cKnowledgeContainerResp\u003e queryById(Integer id) {\n        log.info(\"根据主键id查询知识库容器详情,Id:{}\", id);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectById(id);\n        Assert.notNull(saasKnowledgeContainer, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getTenantId(), tenantId), \"system.common.request.invalid\");\n        KnowledgeContainerResp knowledgeContainerResp \u003d new KnowledgeContainerResp();\n        BeanUtils.copyProperties(saasKnowledgeContainer, knowledgeContainerResp);\n        // 查询分类名称\n        if (!StrUtil.equalsIgnoreCase(saasKnowledgeContainer.getClassifyCode(), \"0\")) {\n            // 查询分类\n            knowledgeCategoryService.queryByCode(saasKnowledgeContainer.getClassifyCode(), tenantId).ifPresent(knowledgeCategoryResp -\u003e {\n                knowledgeContainerResp.setClassifyName(knowledgeCategoryResp.getName());\n            });\n        }\n        // 查询标签\n        knowledgeContainerResp.setTag(knowledgeTagRelationService.listByContainerId(saasKnowledgeContainer.getCode(), tenantId));\n        // 查询配置\n        Optional\u003cSaasKnowledgeConfigContainer\u003e saasKnowledgeConfigContainer \u003d saasKnowledgeConfigContainerService.queryInfoByContainerId(saasKnowledgeContainer.getCode());\n        saasKnowledgeConfigContainer.ifPresent(knowledgeConfigContainer -\u003e {\n            BeanUtil.copyProperties(knowledgeConfigContainer, knowledgeContainerResp);\n            knowledgeContainerResp.setSplitDelimiters(JSONArray.parseArray(saasKnowledgeConfigContainer.get().getSplitDelimiters(), String.class));\n        });\n\n        return Result.data(knowledgeContainerResp);\n    }\n\n    @Override\n    public Pagination\u003cKnowledgeContainerTagResp\u003e listTag(String name, Integer pageNo, Integer pageSize) {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        log.info(\"统计标签信息,tenant:{}\", tenantId);\n        return knowledgeTagRelationService.listByTenantId(tenantId, name, pageNo, pageSize);\n    }\n\n    @Override\n    public Result\u003cString\u003e queryPermissionByCode(String code) {\n        boolean manageKnowledge\u003dsecureConfig.isManageKnowledge() \u0026\u0026 StpUtil.hasRole(Cns.CLI_ADMIN_ROLE);\n        if (manageKnowledge){\n            return Result.data(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode());\n        }\n        return queryPermissionByCode(code,null);\n    }\n\n    @Override\n    public Result\u003cString\u003e queryPermissionByCode(String code, String elementCode) {\n        // 当前用户权限粒度返回 KbKnowledgeBaseContainerPermissionTypes\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        String permissionType \u003d saasKnowledgeContainerPermissionService.getHighestPermission(code,sysUserInfo);\n        KbKnowledgeBaseContainerPermissionTypes permissionTypes\u003dKbKnowledgeBaseContainerPermissionTypes.parse(permissionType);\n        // 如果\n        boolean manageKnowledge\u003dsecureConfig.isManageKnowledge() \u0026\u0026 StpUtil.hasRole(Cns.CLI_ADMIN_ROLE);\n        log.info(\"当前用户对知识库code:{}的最高权限是:{},是否超级管理员:{}\", code, permissionType,permissionType);\n        // 启用超管账号，能够看到所有的知识\n        if (manageKnowledge){\n           permissionType \u003d KbKnowledgeBaseContainerPermissionTypes.MANAGE.name();\n        }else {\n            // 如果是没权限的角色，那么需要判断当前的知识库是否设置为公开，如果是公开的情况下，那么给予只读角色\n            Optional\u003cSaasKnowledgeContainer\u003e containerOptional \u003d this.queryInfoByCode(code);\n            if (containerOptional.isEmpty()) {\n                return Result.data(KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode());\n            }\n            SaasKnowledgeContainer saasKnowledgeContainer \u003d containerOptional.get();\n            if (KbKnowledgeBaseContainerVisibilityRange.publicRead(saasKnowledgeContainer.getVisibilityRange())) {\n                log.info(\"知识库是公开的，给予只读权限，知识库code:{}\", code);\n                // 如果是公开的，那么给予只读权限\n                // 如果这个人本身在知识库是没有权限的，但是知识库是公开的，那么给予只读权限\n                // 不降权\n                if (permissionTypes\u003d\u003dKbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION) {\n                    permissionType \u003d KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY.getCode();\n                }\n                // 判断文档\n                if (StrUtil.isNotBlank(elementCode)){\n                    // 获取文档的权限列表\n                    List\u003cSaasKnowledgeElementPermissionResp\u003e elementPermissions \u003d pagePermissionService.listPagePermission(elementCode);\n                    if (CollUtil.isNotEmpty(elementPermissions)) {\n                        // 获取当前用户对文档的最低权限（最严格的限制）\n                        String elePermissionType \u003d getHighElementPermission(elementPermissions, sysUserInfo);\n                        if (!StrUtil.equalsIgnoreCase(elePermissionType, KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION.getCode())) {\n                            // 如果文档不是没有权限的，那么就赋予他这个人在这个文档的权限，否则保持知识库的只读权限\n                            permissionType \u003d elePermissionType;\n                        }\n\n                    }\n                }\n            }else{\n                // 如果不是公开的，并且传递了文档code，看这个人在文档code下是否有权限\n                if (StrUtil.isNotBlank(elementCode)){\n                    // 获取文档的权限列表\n                    List\u003cSaasKnowledgeElementPermissionResp\u003e elementPermissions \u003d pagePermissionService.listPagePermission(elementCode);\n                    if (CollUtil.isNotEmpty(elementPermissions)) {\n                        // 获取当前用户对文档的最低权限（最严格的限制）\n                        permissionType \u003d getHighElementPermission(elementPermissions, sysUserInfo);\n                    }\n                }\n            }\n        }\n        return Result.data(permissionType);\n    }\n\n    @Override\n    public Result\u003cKnowledgeContainerResp\u003e queryUsersPersonalKnowledgeBase(String tenantId,String userCode) {\n        LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(SaasKnowledgeContainer.class)\n                .eq(SaasKnowledgeContainer::getCreator, userCode)\n                .eq(SaasKnowledgeContainer::getTenantId, tenantId)\n                .eq(SaasKnowledgeContainer::getType, KnowledgeContainerType.PERSONAL_KNOWLEDGE.name());\n        SaasKnowledgeContainer saasKnowledgeContainer \u003d saasKnowledgeContainerMapper.selectOne(lambdaQueryWrapper, false);\n        KnowledgeContainerResp knowledgeContainerResp \u003d new KnowledgeContainerResp();\n        BeanUtils.copyProperties(saasKnowledgeContainer,knowledgeContainerResp);\n        return Result.data(knowledgeContainerResp);\n    }\n\n    @Override\n    public List\u003cSaasKnowledgeContainer\u003e queryAuthKnowledgeBaseUserCode() {\n        // 获取当前用户信息\n        SysUserInfo currentUser \u003d UserContextHolder.getCurrentUser();\n        String tenantId \u003d currentUser.getTenantId();\n        log.info(\"根据用户编码查询有权限的知识库集合,userCode:{}\", currentUser.getCode());\n        // 获取用户的权限范围-组织\u0026团队编码\n        DepartmentUserOrgPermissions orgPermissions \u003d kbDepartmentUserService.listAccessibleDepartmentCodes(currentUser);\n        // 获取用户的编码\n        List\u003cString\u003e teamCodes \u003d orgPermissions.getTeamCodes();\n        // 获取组织的编码\n        List\u003cString\u003e organizationCodes \u003d orgPermissions.getOrganizationCodes();\n        // 构建查询条件\n        ContainerPermissionCondition condition \u003d ContainerPermissionCondition.of(\n                tenantId,\n                currentUser.getCode(),\n                teamCodes, \n                organizationCodes, \n                null, \n                null\n        );\n        \n        // 查询有权限的知识库列表\n        List\u003cSaasKnowledgeContainer\u003e containerList \u003d saasKnowledgeContainerMapper.listPermissionByCondition(condition);\n        return containerList",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 581
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/store/service/impl/AppInfoServiceImpl.java",
      "timestamp": 1761621693776,
      "startOffset": 1499,
      "endOffset": 41958,
      "codeContent": "knowledge.model.response.knowledge.KnowledgeContainerResp;\nimport com.torchv.application.store.domain.completion.AppChatDebugCompletion;\nimport com.torchv.application.store.model.dto.AppContainerResp;\nimport com.torchv.application.store.model.dto.AppInfoResp;\nimport com.torchv.application.store.model.dto.AppSettingsResp;\nimport com.torchv.application.store.model.dto.AppThemeResp;\nimport com.torchv.application.store.model.req.AppPromptStepAddReq;\nimport com.torchv.application.store.model.vo.*;\nimport com.torchv.application.store.service.*;\nimport com.torchv.application.user.service.UserService;\nimport com.torchv.common.constant.AppTypes;\nimport com.torchv.common.constant.Cns;\nimport com.torchv.common.constant.SystemRoles;\nimport com.torchv.common.constant.billing.ProductBotPrices;\nimport com.torchv.common.constant.enums.ErrorCodeEnum;\nimport com.torchv.common.constant.kb.KbKnowledgeBaseContainerMemberTypes;\nimport com.torchv.common.constant.kb.KbKnowledgeBaseContainerPermissionTypes;\nimport com.torchv.common.constant.kb.KbKnowledgeBaseContainerVisibilityRange;\nimport com.torchv.common.constant.kb.KbSpaceSearchTypes;\nimport com.torchv.common.context.UserContextHolder;\nimport com.torchv.infra.common.extra.log.LogContext;\nimport com.torchv.common.model.Pagination;\nimport com.torchv.common.model.Result;\nimport com.torchv.common.model.session.SysUserInfo;\nimport com.torchv.kb.admin.model.dto.DepartmentUserOrgPermissions;\nimport com.torchv.kb.admin.service.KbDepartmentUserService;\nimport com.torchv.kb.common.constant.PlatFormTypes;\nimport com.torchv.kb.space.service.KnowledgeEmbeddingChangeService;\nimport com.torchv.repository.application.entity.AppInfoPermission;\nimport com.torchv.repository.application.mapper.AppInfoPermissionMapper;\nimport com.torchv.repository.chat.entity.SaasKnowledgeContainer;\nimport com.torchv.repository.chat.mapper.SaasKnowledgeContainerMapper;\nimport com.torchv.repository.kb.department.entity.KbDepartment;\nimport com.torchv.repository.kb.department.entity.KbDepartmentUser;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentMapper;\nimport com.torchv.repository.kb.department.mapper.KbDepartmentUserMapper;\nimport com.torchv.repository.store.entity.AppInfo;\nimport com.torchv.repository.store.entity.AppPrompt;\nimport com.torchv.repository.store.entity.AppSettings;\nimport com.torchv.repository.store.entity.AppTheme;\nimport com.torchv.repository.store.mapper.AppInfoMapper;\nimport com.torchv.repository.store.mapper.AppPromptMapper;\nimport com.torchv.repository.store.mapper.AppSettingsMapper;\nimport com.torchv.repository.store.mapper.AppThemeMapper;\nimport com.torchv.infra.web.spring.properties.ChatBotConfig;\nimport com.torchv.infra.web.i18n.I18nMessage;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.redisson.api.RLock;\nimport org.redisson.api.RedissonClient;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static com.torchv.kb.common.constant.KbAppStatusTypes.*;\n\n/**\n * 应用信息模块-业务Service实现\n * @since torchv_server v0.1-beta.1.6\n * @author \u003ca href\u003d\"mailto:xiaoymin@foxmail.com\"\u003exiaoymin@foxmail.com\u003c/a\u003e\n * 2024/03/19 15:05\n */\n@Slf4j\n@AllArgsConstructor\n@Service\npublic class AppInfoServiceImpl extends ServiceImpl\u003cAppInfoMapper, AppInfo\u003e implements AppInfoService {\n    \n    final AppInfoMapper appInfoMapper;\n    final AppContainerService appContainerService;\n    final I18nMessage i18nMessage;\n    final RedissonClient redissonClient;\n    final AppPromptService appPromptService;\n    final AppInfoPermissionMapper appInfoPermissionMapper;\n    final AppSettingsService appSettingsService;\n    final AppThemeService appThemeService;\n    final KnowledgeContainerService knowledgeContainerService;\n    final ChatBotConfig chatBotConfig;\n    final AppTagService appTagService;\n    final AppDestroyService appDestroyService;\n    final KbDepartmentUserMapper kbDepartmentUserMapper;\n    final KbDepartmentUserService kbDepartmentUserService;\n    final KbDepartmentMapper kbDepartmentMapper;\n    final AppPromptMapper appPromptMapper;\n    final AppSettingsMapper appSettingsMapper;\n    final AppThemeMapper appThemeMapper;\n    final UserService userService;\n    final KnowledgeEmbeddingChangeService knowledgeEmbeddingChangeService;\n\n\n    @Override\n    public Result\u003cString\u003e publishApp(String appid,String status) {\n        //String[] split \u003d appid.split(\",\");\n        //QueryWrapper\u003cAppInfo\u003e queryWrapper \u003d new QueryWrapper\u003cAppInfo\u003e().in(\"appid\", split);\n        LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d  Wrappers.lambdaQuery(AppInfo.class).in(AppInfo::getAppid, StrUtil.split(appid,StrUtil.COMMA));\n        AppInfo appInfo \u003d new AppInfo();\n        appInfo.setStatus(status);\n        int update \u003d baseMapper.update(appInfo, lambdaQueryWrapper);\n        return update \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n\n    }\n\n    @Override\n    public Map\u003cString, AppInfoResp\u003e listByAppid(List\u003cString\u003e appid, String tenantId) {\n        LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppInfo.class).eq(AppInfo::getTenantId, tenantId);\n        lambdaQueryWrapper.in(AppInfo::getAppid, appid);\n        List\u003cAppInfo\u003e appInfoInfos \u003d appInfoMapper.selectList(lambdaQueryWrapper);\n        if (CollectionUtil.isNotEmpty(appInfoInfos)) {\n            Map\u003cString, List\u003cString\u003e\u003e appInfos \u003d appTagService.listByAppIds(appid, tenantId);\n            List\u003cAppInfoResp\u003e appInfoRespInfos \u003d new ArrayList\u003c\u003e(appInfoInfos.stream().map(new AppInfoApplyFunction(chatBotConfig, appInfos)).toList());\n            return appInfoRespInfos.stream().collect(Collectors.toMap(AppInfoResp::getAppid, Function.identity()));\n        }\n        return Map.of();\n    }\n\n\n    @Override\n    @Transactional(rollbackFor \u003d Exception.class)\n    public Result storeToMyApp(String appid) {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        String lockKey \u003d Cns.LOCK_APP_ADD + sysUserInfo.getTenantId();\n        RLock rLock \u003d redissonClient.getLock(lockKey);\n        try {\n            if (rLock.tryLock(10L, 10L, TimeUnit.SECONDS)) {\n                // 创建应用\n                List\u003cAppInfo\u003e appInfos \u003d baseMapper.selectList(new QueryWrapper\u003cAppInfo\u003e().eq(\"appid\", appid));\n                Assert.notEmpty(appInfos, \"app.add.copy.null\");\n                AppInfo appInfo \u003d appInfos.get(0);\n\n                Long num \u003d baseMapper.selectCount(new QueryWrapper\u003cAppInfo\u003e().eq(\"copy_to_app\", appid).eq(\"creator\", sysUserInfo.getCode()));// 检查是否从模板市场添加过\n                if (num !\u003d null \u0026\u0026 num \u003e 0) {\n                    appInfo.setName(appInfo.getName() + \"(\" + (num + 1L) + \")\");\n                }\n                appInfo.setId(null);\n                appInfo.setCreateTime(LocalDateTime.now());\n                appInfo.setModifierTime(LocalDateTime.now());\n                appInfo.setCreator(sysUserInfo.getCode());\n                appInfo.setModifier(sysUserInfo.getCode());\n                String tenantId \u003d appInfo.getTenantId();\n                appInfo.setTenantId(sysUserInfo.getTenantId());\n                appInfo.setCopyToApp(appid);// 存放原始appid\n                appInfo.setStatus(DRAFT.name());\n                // 2.1 新增的三个属性\n                String appCode \u003d IdUtil.getSnowflakeNextIdStr();\n                appInfo.setCode(appCode);\n                // 生成appid和secret\n                String newAppid \u003d Cns.APP_PREFIX + IdUtil.fastSimpleUUID();\n                appInfo.setAppid(newAppid);\n                appInfo.setSecret(RandomUtil.randomString(32));\n                // 生成accessToken\n                String accessToken \u003d Cns.APP_TOKEN_PREFIX + DigestUtil.sha256Hex(appInfo.getAppid() + appInfo.getSecret().toLowerCase());\n                appInfo.setAccessToken(accessToken);\n                int ret \u003d appInfoMapper.insert(appInfo);\n                if (ret \u003e 0) {\n                    // 复制标签\n                    List\u003cString\u003e tags \u003d appTagService.listByAppId(appid, tenantId);\n                    appTagService.addTags(appInfo, sysUserInfo, tags);\n                    // 复制Prompt\n                    AppPrompt appPrompt \u003d appPromptMapper.selectOne(new QueryWrapper\u003cAppPrompt\u003e().eq(\"appid\", appid));\n                    appPrompt.setId(null);\n                    appPrompt.setAppid(appInfo.getAppid());\n                    appPrompt.setTenantId(sysUserInfo.getTenantId());\n                    appPrompt.setCode(IdUtil.getSnowflakeNextIdStr());\n                    appPromptMapper.insert(appPrompt);\n                    // 复制配置信息\n                    AppSettings appSettings \u003d appSettingsService.queryByAppId(appid, tenantId).get();\n                    appSettings.setId(null);\n                    appSettings.setAppid(appInfo.getAppid());\n                    appSettings.setTenantId(sysUserInfo.getTenantId());\n                    appSettingsMapper.insert(appSettings);\n                    // 复制Theme信息\n                    AppTheme appTheme \u003d appThemeService.queryByAppId(tenantId, appid).get();\n                    appTheme.setId(null);\n                    appTheme.setAppid(appInfo.getAppid());\n                    appTheme.setTenantId(sysUserInfo.getTenantId());\n                    appThemeMapper.insert(appTheme);\n                    // 创建者自身,保存到权限表\n                    AppInfoPermission appInfoPermission \u003d new AppInfoPermission();\n                    BeanUtils.copyProperties(appInfo, appInfoPermission);\n                    appInfoPermission.setAppInfoId(appInfo.getAppid());\n                    appInfoPermission.setMembershipCode(sysUserInfo.getCode());\n                    appInfoPermission.setMembershipType(KbKnowledgeBaseContainerMemberTypes.USER.name());\n                    appInfoPermission.setOwner(true);\n                    appInfoPermissionMapper.insert(appInfoPermission);\n                }\n                return ret \u003e 0 ? Result.success(newAppid) : Result.error(i18nMessage.resolveMessage(\"system.common.save.fail\"));\n            }\n        } catch (InterruptedException e) {\n            log.error(e.getMessage(), e);\n            throw new RuntimeException(\"system.common.save.fail\");\n        } finally {\n            if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                rLock.unlock();\n            }\n        }\n        return Result.error(i18nMessage.resolveMessage(\"system.common.save.fail\"));\n    }\n    \n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e applySettings(AppChatDebugCompletion debugReq) {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        Optional\u003cAppInfo\u003e appInfoOptional \u003d this.querySingleByAppId(debugReq.getAppid());\n        if (appInfoOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        AppInfo appInfo \u003d appInfoOptional.get();\n        Assert.isTrue(StrUtil.equalsIgnoreCase(appInfo.getTenantId(), sysUserInfo.getTenantId()), \"system.common.request.invalid\");\n        AppTypes appTypes \u003d AppTypes.of(appInfo.getCategory());\n        // 校验大模型配置的Prompt\n        debugReq.validatePrompt(appTypes);\n        // 当前应用绑定知识库id\n        appContainerService.bind(AppInfoBindReq.of(debugReq.getAppid(), debugReq.getContainerId()), appInfo);\n        // 更新Prompt配置信息\\大模型配置信息\n        Result\u003cString\u003e result \u003d appSettingsService.update(debugReq.toSettingUpdateModel());\n        //chatbot需要更新user类型prompt\n        if (appTypes \u003d\u003d AppTypes.DEFAULT) {\n            AppPromptStepAddReq addReq \u003d new AppPromptStepAddReq();\n            addReq.setAppid(debugReq.getAppid());\n            addReq.setType(\"USER\");\n            addReq.setPrompt(debugReq.getPrompt());\n            appPromptService.addStepPrompt(addReq);\n        }\n        Assert.isTrue(Objects.equals(result.getCode(), ErrorCodeEnum.SUCCESS.getCode()), \"app.debug.setting.message.fail\");\n        return Result.success(i18nMessage.resolveMessage(\"app.debug.setting.message.success\"));\n    }\n    \n    /**\n     * 分页查询-应用信息列表数据\n     * @param appInfoQueryReq 查询条件Vo\n     * @param pageNo 当前页码\n     * @param pageSize 每页页码大小\n     * @return 应用信息列表\n     */\n    @Override\n    public Pagination\u003cAppInfoResp\u003e list(AppInfoQueryReq appInfoQueryReq, Integer pageNo, Integer pageSize) {\n        log.info(\"分页查询应用信息列表,pageNo:{},pageSize:{}\", pageNo, pageSize);\n        log.info(\"分页QueryReq:{}\", appInfoQueryReq.toString());\n        Page\u003cAppInfo\u003e appInfoPageNo \u003d PageHelper.startPage(pageNo, pageSize);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppInfo.class).eq(AppInfo::getTenantId, tenantId);\n        lambdaQueryWrapper.like(StrUtil.isNotBlank(appInfoQueryReq.getName()), AppInfo::getName, appInfoQueryReq.getName());\n        lambdaQueryWrapper.eq(StrUtil.isNotBlank(appInfoQueryReq.getCategory()), AppInfo::getCategory, appInfoQueryReq.getCategory());\n        lambdaQueryWrapper.orderByDesc(AppInfo::getCreateTime);\n        List\u003cAppInfo\u003e appInfoInfos \u003d appInfoMapper.selectList(lambdaQueryWrapper);\n        List\u003cAppInfoResp\u003e appInfoRespInfos \u003d new ArrayList\u003c\u003e();\n        long count \u003d appInfoPageNo.getTotal();\n        if (CollectionUtil.isNotEmpty(appInfoInfos)) {\n            List\u003cString\u003e appid \u003d appInfoInfos.stream().map(AppInfo::getAppid).toList();\n            Map\u003cString, List\u003cString\u003e\u003e appInfos \u003d appTagService.listByAppIds(appid, tenantId);\n            appInfoRespInfos.addAll(appInfoInfos.stream().map(new AppInfoApplyFunction(chatBotConfig, appInfos)).toList());\n            // 创建人名称翻译\n            Set\u003cString\u003e creatorSet \u003d appInfoRespInfos.stream().map(AppInfoResp::getCreator)\n                    .filter(creator -\u003e ObjectUtil.isNotNull(creator) \u0026\u0026 !creator.trim().isEmpty())\n                    .collect(Collectors.toSet());\n            if (!creatorSet.isEmpty()){\n                Map\u003cString, String\u003e userNicknameMap \u003d userService.selectByCode(tenantId,CollUtil.newArrayList(creatorSet));\n                // 创建人部门信息翻译\n                LambdaQueryWrapper\u003cKbDepartmentUser\u003e kbDepartmentUserLambdaQueryWrapper \u003d Wrappers.lambdaQuery(KbDepartmentUser.class)\n                        .eq(KbDepartmentUser::getTenantId, tenantId)\n                        .in(KbDepartmentUser::getUserCode, creatorSet);\n                List\u003cKbDepartmentUser\u003e kbDepartmentUsers \u003d kbDepartmentUserMapper.selectList(kbDepartmentUserLambdaQueryWrapper);\n                Map\u003cString, String\u003e departmentCodeMap \u003d kbDepartmentUsers.stream().collect(Collectors.toMap(KbDepartmentUser::getUserCode, KbDepartmentUser::getDepartmentCode));\n                Set\u003cString\u003e departmentCode \u003d kbDepartmentUsers.stream().map(KbDepartmentUser::getDepartmentCode).collect(Collectors.toSet());\n                LambdaQueryWrapper\u003cKbDepartment\u003e kbDepartmentLambdaQueryWrapper \u003d Wrappers.lambdaQuery(KbDepartment.class)\n                        .eq(KbDepartment::getTenantId, tenantId)\n                        .in(KbDepartment::getCode, departmentCode);\n                List\u003cKbDepartment\u003e kbDepartments \u003d kbDepartmentMapper.selectList(kbDepartmentLambdaQueryWrapper);\n                Map\u003cString, String\u003e departmentNameMap \u003d kbDepartments.stream().collect(Collectors.toMap(KbDepartment::getCode, KbDepartment::getName));\n                appInfoRespInfos.forEach(appInfoRespInfo -\u003e {\n                    appInfoRespInfo.setCreatorName(userNicknameMap.get(appInfoRespInfo.getCreator()));\n                    appInfoRespInfo.setCreatorDepartName(departmentNameMap.get(departmentCodeMap.get(appInfoRespInfo.getCreator())));\n                });\n            }\n        }\n        return Pagination.pagination(appInfoRespInfos, count, pageNo, pageSize);\n    }\n\n    @Override\n    public Pagination\u003cAppInfoResp\u003e listV2(AppInfoQueryReq appInfoQueryReq, Integer pageNo, Integer pageSize) {\n        log.info(\"分页查询应用信息列表V2,pageNo:{},pageSize:{}\", pageNo, pageSize);\n        // 设置默认搜索类型\n        if (appInfoQueryReq.getSearchType() \u003d\u003d null) {\n            appInfoQueryReq.setSearchType(KbSpaceSearchTypes.ALL);\n        }\n\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 判断是否为超级管理员\n        boolean superAdmin \u003d StpUtil.hasRole(SystemRoles.SYS_ROLE_CLI_ADMIN.getCode());\n\n        List\u003cAppInfo\u003e appInfos;\n        List\u003cAppInfoResp\u003e appInfoRespList;\n        long count;\n        // 1. 构建基础查询条件(租户Id、分类)\n        LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppInfo.class)\n                .eq(AppInfo::getTenantId, sysUserInfo.getTenantId())\n                .eq(AppInfo::getPlatform, PlatFormTypes.AIS.name())\n                .like(StrUtil.isNotBlank(appInfoQueryReq.getName()), AppInfo::getName, appInfoQueryReq.getName())\n                .eq(StrUtil.isNotBlank(appInfoQueryReq.getCategory()), AppInfo::getCategory, appInfoQueryReq.getCategory());\n\n        KbSpaceSearchTypes searchType \u003d appInfoQueryReq.getSearchType();\n        // 2. 根据搜索类型添加条件\n        if (searchType \u003d\u003d KbSpaceSearchTypes.CREATOR) {\n            // 我创建的\n            lambdaQueryWrapper.eq(AppInfo::getCreator, sysUserInfo.getCode())\n                    .orderByDesc(AppInfo::getSort,AppInfo::getModifierTime).ne(AppInfo::getStatus, TEMPLATE.name());\n        } else if (searchType \u003d\u003d KbSpaceSearchTypes.ALL) {\n            lambdaQueryWrapper.eq(AppInfo::getStatus, PUBLISHED.name()).orderByDesc(AppInfo::getCreateTime);\n        } else if (searchType \u003d\u003d KbSpaceSearchTypes.TEMPLATE){\n            lambdaQueryWrapper.eq(AppInfo::getStatus, TEMPLATE.name()).orderByDesc(AppInfo::getCreateTime);\n        }\n        // 非超级管理员需要进行权限过滤-获取可见的应用列表\n        if (searchType !\u003d KbSpaceSearchTypes.CREATOR \u0026\u0026 !superAdmin){\n            // 查询具体有权限内容\n            // 查询全部列表的\n            // 当前知识库是完全公开的\n            // 当前知识库是有权限访问的。\n            // 获取用户的权限范围-组织\u0026团队编码\n            DepartmentUserOrgPermissions orgPermissions\u003dkbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n            // 获取用户的编码\n            List\u003cString\u003e teamCodes\u003dorgPermissions.getTeamCodes();\n            // 获取组织的编码\n            List\u003cString\u003e organizationCodes \u003d orgPermissions.getOrganizationCodes();\n            // 获取应用id集合\n            List\u003cString\u003e appidList \u003d appInfoMapper.listPermissionByCondition(\n                    AppInfoQueryReq.of(sysUserInfo.getTenantId(), sysUserInfo.getCode(),\n                            teamCodes, organizationCodes, appInfoQueryReq.getName(),appInfoQueryReq.getSearchType().name()));\n\n            // 构建查询条件：公开可见 OR 有权限访问的应用\n            lambdaQueryWrapper.eq(AppInfo::getVisibilityRange,\n                            KbKnowledgeBaseContainerVisibilityRange.ENTERPRISE_PUBLIC.name())\n                    .orderByDesc(AppInfo::getCreateTime);\n\n            // 如果有权限的应用列表不为空，添加OR条件\n            if (CollUtil.isNotEmpty(appidList)) {\n                lambdaQueryWrapper.or().in(AppInfo::getAppid, appidList);\n            }\n        }\n        try (Page\u003cAppInfo\u003e appInfoPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n\n            appInfos \u003d appInfoMapper.selectList(lambdaQueryWrapper);\n            count \u003d appInfoPageNo.getTotal();\n        }\n\n        // 转换为响应对象\n        appInfoRespList \u003d new ArrayList\u003c\u003e();\n        if (CollUtil.isNotEmpty(appInfos)) {\n            List\u003cString\u003e appIds \u003d appInfos.stream().map(AppInfo::getAppid).toList();\n            Map\u003cString, List\u003cString\u003e\u003e appTags \u003d appTagService.listByAppIds(appIds, sysUserInfo.getTenantId());\n\n            appInfoRespList.addAll(appInfos.stream()\n                    .map(appInfo -\u003e {\n                        AppInfoResp resp \u003d new AppInfoResp();\n                        BeanUtils.copyProperties(appInfo, resp);\n                        resp.setTag(appTags.get(appInfo.getAppid()));\n                        resp.setAppUrl(chatBotConfig.getAppUrl());\n                        return resp;\n                    })\n                    .toList());\n            // 创建人名称翻译\n            Set\u003cString\u003e creatorSet \u003d appInfoRespList.stream().map(AppInfoResp::getCreator)\n                    .filter(creator -\u003e ObjectUtil.isNotNull(creator) \u0026\u0026 !creator.trim().isEmpty())\n                    .collect(Collectors.toSet());\n            if (!creatorSet.isEmpty()){\n                Map\u003cString, String\u003e userNicknameMap \u003d userService.selectByCode(sysUserInfo.getTenantId(),CollUtil.newArrayList(creatorSet));\n                appInfoRespList.forEach(appInfoRespInfo -\u003e {\n                    appInfoRespInfo.setCreatorName(userNicknameMap.get(appInfoRespInfo.getCreator()));\n                });\n            }\n        }\n\n        return Pagination.pagination(appInfoRespList, count, pageNo, pageSize);\n    }\n\n    @Override\n    public Pagination\u003cAppInfoResp\u003e listFilter(AppInfoQueryReq appInfoQueryReq, Integer pageNo, Integer pageSize) {\n        log.info(\"分页查询应用信息列表-未上架的,pageNo:{},pageSize:{}\", pageNo, pageSize);\n        Page\u003cAppInfo\u003e appInfoPageNo \u003d PageHelper.startPage(pageNo, pageSize);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        List\u003cAppInfo\u003e appInfoInfos \u003d appInfoMapper.listByFilter(appInfoQueryReq.toSearch(tenantId));\n        List\u003cAppInfoResp\u003e appInfoRespInfos \u003d new ArrayList\u003c\u003e();\n        long count \u003d appInfoPageNo.getTotal();\n        if (CollectionUtil.isNotEmpty(appInfoInfos)) {\n            List\u003cString\u003e appid \u003d appInfoInfos.stream().map(AppInfo::getAppid).toList();\n            Map\u003cString, List\u003cString\u003e\u003e appInfos \u003d appTagService.listByAppIds(appid, tenantId);\n            appInfoRespInfos.addAll(appInfoInfos.stream().map(new AppInfoApplyFunction(chatBotConfig, appInfos)).toList());\n        }\n        return Pagination.pagination(appInfoRespInfos, count, pageNo, pageSize);\n    }\n    \n    /**\n     * 新增应用信息记录\n     * @param appInfoAddReq 新增应用信息条件Vo\n     * @return 是否新增成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e add(AppInfoAddReq appInfoAddReq) {\n        log.info(\"新增应用信息数据,Vo:{}\", appInfoAddReq.toString());\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        ProductBotPrices botPrices \u003d ProductBotPrices.parse(sysUserInfo.getPriceLevel());\n        appInfoAddReq.validateTagLength();\n        Assert.notNull(botPrices, \"system.common.request.invalid\");\n        AppTypes appTypes \u003d AppTypes.of(appInfoAddReq.getCategory());\n        Assert.notNull(appTypes, \"system.common.request.invalid\");\n        String lockKey \u003d Cns.LOCK_APP_ADD + sysUserInfo.getTenantId();\n        RLock rLock \u003d redissonClient.getLock(lockKey);\n        try {\n            /*int maxSize \u003d botPrices.getMaxAppSize();\n            // 西安线上的客户，暂时放开\n            if (StrUtil.equalsIgnoreCase(sysUserInfo.getTenantId(), \"1740554795355340800\")) {\n                maxSize \u003d 300;\n            }*/\n            if (rLock.tryLock(10L, 10L, TimeUnit.SECONDS)) {\n                log.info(\"priceLevel:{}\", sysUserInfo.getPriceLevel());\n                // 统计当前租户下的应用数量\n                /**LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppInfo.class).eq(AppInfo::getTenantId, sysUserInfo.getTenantId());\n                long count \u003d appInfoMapper.selectCount(lambdaQueryWrapper);\n                Assert.isTrue(count \u003c maxSize, \"app.add.size.count\");**/\n                AppInfo appInfo \u003d new AppInfo();\n                BeanUtils.copyProperties(appInfoAddReq, appInfo);\n                appInfo.setCreateTime(LocalDateTime.now());\n                appInfo.setCreator(sysUserInfo.getCode());\n                appInfo.setModifier(sysUserInfo.getCode());\n                appInfo.setModifierTime(LocalDateTime.now());\n                appInfo.setCode(IdUtil.fastSimpleUUID());\n                appInfo.setCategory(Objects.requireNonNull(appTypes).getCode());\n                appInfo.setTenantId(sysUserInfo.getTenantId());\n                // 生成appid和secret\n                appInfo.setAppid(Cns.APP_PREFIX + IdUtil.fastSimpleUUID());\n                appInfo.setSecret(RandomUtil.randomString(32));\n                // 生成accessToken\n                String accessToken \u003d Cns.APP_TOKEN_PREFIX + DigestUtil.sha256Hex(appInfo.getAppid() + appInfo.getSecret().toLowerCase());\n                appInfo.setAccessToken(accessToken);\n                // 可见性范围\n                appInfo.setVisibilityRange(appInfoAddReq.getVisibilityRange());\n                int ret \u003d appInfoMapper.insert(appInfo);\n                if (ret \u003e 0) {\n                    // 新增标签\n                    appTagService.addTags(appInfo, sysUserInfo, appInfoAddReq.getTag());\n                    // 新增默认的Prompt\n                    appPromptService.addDefault(appInfo.getAppid(), sysUserInfo.getTenantId(), appTypes);\n                    // 新增默认的配置信息\n                    appSettingsService.addDefaultSettings(appInfo.getAppid(), sysUserInfo.getTenantId(), appTypes);\n                    // 新增默认的Theme信息\n                    appThemeService.addDefaultTheme(appInfo, appTypes);\n                    // 新增权限信息\n                    AppInfoPermission appInfoPermission \u003d new AppInfoPermission();\n                    BeanUtils.copyProperties(appInfo, appInfoPermission);\n                    appInfoPermission.setAppInfoId(appInfo.getAppid());\n                    appInfoPermission.setMembershipCode(sysUserInfo.getCode());\n                    appInfoPermission.setMembershipType(KbKnowledgeBaseContainerMemberTypes.USER.name());\n                    appInfoPermission.setOwner(true);\n                    appInfoPermissionMapper.insert(appInfoPermission);\n                }\n                return ret \u003e 0 ? Result.data(accessToken) : Result.error(i18nMessage.resolveMessage(\"system.common.save.fail\"));\n            }\n        } catch (InterruptedException e) {\n            log.error(e.getMessage(), e);\n            throw new RuntimeException(\"system.common.save.fail\");\n        } finally {\n            if (rLock !\u003d null \u0026\u0026 rLock.isLocked()) {\n                rLock.unlock();\n            }\n        }\n        return Result.error(i18nMessage.resolveMessage(\"system.common.save.fail\"));\n    }\n    \n    @Override\n    public Result\u003cString\u003e refreshToken(AppInfoRefreshTokenReq refreshTokenReq) {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        // 统计当前租户下的应用数量\n        LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppInfo.class).eq(AppInfo::getTenantId, sysUserInfo.getTenantId())\n                .eq(AppInfo::getAppid, refreshTokenReq.getAppid());\n        AppInfo appInfo \u003d appInfoMapper.selectOne(lambdaQueryWrapper, false);\n        Assert.notNull(appInfo, \"system.common.request.invalid\");\n        LogContext.putVariable(\"name\", appInfo.getName());\n        // 生成accessToken\n        AppInfo record \u003d new AppInfo();\n        record.setModifierTime(LocalDateTime.now());\n        record.setModifier(sysUserInfo.getLoginUsername());\n        String accessToken \u003d Cns.APP_TOKEN_PREFIX + DigestUtil.sha256Hex(appInfo.getAppid() + appInfo.getSecret() + IdUtil.fastSimpleUUID());\n        record.setAccessToken(accessToken);\n        int ret \u003d appInfoMapper.update(record, lambdaQueryWrapper);\n        return ret \u003e 0 ? Result.defaultSuccess(accessToken) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n    \n    /**\n     * 更新应用信息记录\n     * @param appInfoUpdateReq 更新应用信息条件Vo\n     * @return 是否更新成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e update(AppInfoUpdateReq appInfoUpdateReq) {\n        log.info(\"根据主键id修改应用信息数据,Vo:{}\", appInfoUpdateReq.toString());\n        AppInfo record \u003d appInfoMapper.selectById(appInfoUpdateReq.getId());\n        appInfoUpdateReq.validateTagLength();\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        Assert.notNull(record, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(record.getTenantId(), sysUserInfo.getTenantId()), \"system.common.request.invalid\");\n        AppInfo appInfo \u003d new AppInfo();\n        // 应用类型不可修改\n        AppTypes appTypes \u003d AppTypes.of(appInfoUpdateReq.getCategory());\n        Assert.notNull(appTypes, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(appInfoUpdateReq.getCategory(), record.getCategory()), \"app.add.category.unset\");\n        BeanUtils.copyProperties(appInfoUpdateReq, appInfo);\n        appInfo.setModifierTime(LocalDateTime.now());\n        int ret \u003d appInfoMapper.updateById(appInfo);\n        if (ret \u003e 0) {\n            // 更新标签\n            appTagService.updateTags(record, sysUserInfo, appInfoUpdateReq.getTag());\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n    \n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e bind(AppInfoBindReq appInfoBindReq) {\n        log.info(\"绑定知识库给应用\");\n        Optional\u003cAppInfo\u003e appinfoOptional \u003d this.queryInfoByAppId(appInfoBindReq.getAppid());\n        if (appinfoOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        AppInfo record \u003d appinfoOptional.get();\n        // 修改应用信息\n        LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppInfo.class).eq(AppInfo::getAppid, appInfoBindReq.getAppid());\n        // 更新应用信息中的绑定设置\n        AppInfo updateAppInfo \u003d new AppInfo();\n        updateAppInfo.setBindPersonalKb(appInfoBindReq.isBindPersonalKb());\n        updateAppInfo.setBindAllKb(appInfoBindReq.isBindAllKb());\n        updateAppInfo.setModifierTime(LocalDateTime.now());\n        updateAppInfo.setModifier(UserContextHolder.getCurrentUser().getCode());\n        int updateResult \u003d appInfoMapper.update(updateAppInfo, lambdaQueryWrapper);\n        // 日志上下文\n        LogContext.putVariable(\"size\", CollUtil.size(appInfoBindReq.getContainerIds()));\n        LogContext.putVariable(\"name\", record.getName());\n        // 校验绑定的知识库是否embedding模型一致\n        knowledgeEmbeddingChangeService.checkKnowledgeConsistency(appInfoBindReq.getContainerIds());\n        appContainerService.bind(appInfoBindReq, record);\n        return Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.save.success\"));\n    }\n    \n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e bindUpdate(AppInfoBindUpdateReq bindUpdateReq) {\n        log.info(\"绑定知识库给应用并更新基础内容\");\n        Optional\u003cAppInfo\u003e appinfoOptional \u003d this.queryInfoByAppId(bindUpdateReq.getAppid());\n        if (appinfoOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        bindUpdateReq.validateTagLength();\n        AppInfo record \u003d appinfoOptional.get();\n        // 日志上下文\n        LogContext.putVariable(\"size\", CollUtil.size(bindUpdateReq.getContainerIds()));\n        LogContext.putVariable(\"name\", record.getName());\n        AppInfoBindReq bindReq \u003d AppInfoBindReq.of(bindUpdateReq.getAppid(), bindUpdateReq.getContainerIds());\n        appContainerService.bind(bindReq, record);\n        // 更新基础内容\n        AppInfo appInfo \u003d bindUpdateReq.of();\n        appInfo.setId(record.getId());\n        int ret \u003d appInfoMapper.updateById(appInfo);\n        if (ret \u003e 0) {\n            appTagService.updateTags(record, UserContextHolder.getCurrentUser(), bindUpdateReq.getTag());\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.update.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.update.fail\"));\n    }\n    \n    /**\n     * 根据id查询应用信息详情\n     * @param id 应用信息主键id\n     * @return 应用信息详情\n     */\n    @Override\n    public Result\u003cAppInfoResp\u003e queryById(Integer id) {\n        log.info(\"根据主键id查询应用信息详情,Id:{}\", id);\n        AppInfo appInfo \u003d appInfoMapper.selectById(id);\n        Assert.notNull(appInfo, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(appInfo.getTenantId(), UserContextHolder.getTenantId()), \"system.common.request.invalid\");\n        AppInfoResp appInfoResp \u003d new AppInfoResp();\n        BeanUtils.copyProperties(appInfo, appInfoResp);\n        appInfoResp.setTag(appTagService.listByAppId(appInfo.getAppid(), appInfo.getTenantId()));\n        return Result.data(appInfoResp);\n    }\n    \n    @Override\n    public Result\u003cAppInfoResp\u003e queryByAppId(String appid) {\n        log.info(\"根据appid查询应用信息详情,appid:{}\", appid);\n        SysUserInfo sysUserInfo\u003d UserContextHolder.getCurrentUser();\n        Optional\u003cAppInfo\u003e appinfoOptional \u003d this.queryInfoByAppId(appid,sysUserInfo.getTenantId());\n        if (appinfoOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        AppInfoResp appInfoResp \u003d new AppInfoResp();\n        AppInfo appInfo \u003d appinfoOptional.get();\n        BeanUtils.copyProperties(appInfo, appInfoResp);\n        appInfoResp.setTag(appTagService.listByAppId(appInfo.getAppid(), appInfo.getTenantId()));\n        // 判断是否为应用的拥有者\n        appInfoResp.setOwner(StrUtil.equalsIgnoreCase(appInfo.getCreator(), sysUserInfo.getCode()));\n        return Result.data(appInfoResp);\n    }\n    \n    @Override\n    public List\u003cString\u003e listContainers(Integer id) {\n        AppInfo appInfo \u003d appInfoMapper.selectById(id);\n        Assert.notNull(appInfo, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(appInfo.getTenantId(), UserContextHolder.getTenantId()), \"system.common.request.invalid\");\n        return appContainerService.listContainers(appInfo);\n    }\n    \n    @Override\n    public List\u003cAppContainerResp\u003e listContainersByName(Integer id) {\n        List\u003cString\u003e containerIds \u003d this.listContainers(id);\n        if (CollUtil.isEmpty(containerIds)) {\n            return new ArrayList\u003c\u003e();\n        }\n        // 查询知识库名称\n        List\u003cSaasKnowledgeContainer\u003e containers \u003d knowledgeContainerService.listByCodes(containerIds, UserContextHolder.getTenantId());\n        if (CollUtil.isNotEmpty(containers)) {\n            return containers.stream().map(s -\u003e {\n                AppContainerResp appContainerResp \u003d new AppContainerResp();\n                appContainerResp.setCode(s.getCode());\n                appContainerResp.setName(s.getName());\n                return appContainerResp;\n            }).collect(Collectors.toList());\n        }\n        \n        return new ArrayList\u003c\u003e();\n    }\n    \n    /**\n     * 根据主键id删除应用信息\n     * @param id 主键id\n     * @return 是否删除成功\n     */\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e delete(Integer id) {\n        log.info(\"根据主键id删除应用信息,id:{}\", id);\n        AppInfo appInfo \u003d appInfoMapper.selectById(id);\n        Assert.notNull(appInfo, \"system.common.request.invalid\");\n        Assert.isTrue(StrUtil.equalsIgnoreCase(appInfo.getTenantId(), UserContextHolder.getTenantId()), \"system.common.request.invalid\");\n        LogContext.putVariable(\"name\", appInfo.getName());\n        int ret \u003d appInfoMapper.deleteById(id);\n        if (ret \u003e 0) {\n            appDestroyService.destroyApp(appInfo);\n            // 删除权限表\n            appInfoPermissionMapper.delete(new QueryWrapper\u003cAppInfoPermission\u003e().eq(\"app_info_id\", appInfo.getAppid()));\n        }\n        return ret \u003e 0 ? Result.defaultSuccess(i18nMessage.resolveMessage(\"system.common.delete.success\")) : Result.error(i18nMessage.resolveMessage(\"system.common.delete.fail\"));\n    }\n    \n    /**\n     * 根据id查询应用信息实体详情\n     * @param id 主键id\n     * @return 应用信息的Optional\n     */\n    @Override\n    public Optional\u003cAppInfo\u003e queryInfoById(Integer id) {\n        log.info(\"根据请求id查询应用信息实体详情,id:{}\", id);\n        AppInfo appInfo \u003d appInfoMapper.selectById(id);\n        if (appInfo !\u003d null) {\n            return Optional.of(appInfo);\n        }\n        return Optional.empty();\n    }\n    \n    @Override\n    public Optional\u003cAppInfo\u003e queryInfoByAppId(String appid) {\n        log.info(\"根据appid查询应用信息实体详情,appid:{}\", appid);\n        return this.queryInfoByAppId(appid, UserContextHolder.getTenantId());\n    }\n    \n    @Override\n    public Optional\u003cAppInfo\u003e queryInfoByAppId(String appid, String tenantId) {\n        LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppInfo.class).eq(AppInfo::getAppid, appid).eq(AppInfo::getTenantId, tenantId);\n        AppInfo appInfo \u003d appInfoMapper.selectOne(lambdaQueryWrapper, false);\n        return Optional.ofNullable(appInfo);\n    }\n    \n    @Override\n    public Optional\u003cAppInfo\u003e querySingleByAppId(String appid) {\n        log.info(\"根据appid查询应用信息实体详情,NoTenant,appid:{}\", appid);\n        LambdaQueryWrapper\u003cAppInfo\u003e lambdaQueryWrapper \u003d Wrappers.lambdaQuery(AppInfo.class).eq(AppInfo::getAppid, appid);\n        AppInfo appInfo \u003d appInfoMapper.selectOne(lambdaQueryWrapper, false);\n        return Optional.ofNullable(appInfo);\n    }\n    \n    /**\n     * 校验请求id是否非法\n     * @param id 主键id\n     * @return 是否存在\n     */\n    @Override\n    public boolean checkIdExists(Integer id) {\n        log.info(\"校验请求Id是否存在,id:{}\", id);\n        return appInfoMapper.selectById(id) !\u003d null;\n    }\n    \n    @Override\n    public Result\u003cAppThemeResp\u003e queryThemeByAppId(String appid) {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        Optional\u003cAppInfo\u003e appInfoOptional \u003d this.querySingleByAppId(appid);\n        if (appInfoOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        Optional\u003cAppTheme\u003e themeOptional \u003d appThemeService.queryByAppId(tenantId, appid);\n        AppThemeResp themeResp \u003d new AppThemeResp();\n        themeOptional.ifPresent(appTheme -\u003e BeanUtils.copyProperties(appTheme, themeResp));\n        themeResp.setAppid(appid);\n        themeResp.setAppUrl(chatBotConfig.getAppUrl());\n        themeResp.setCategory(appInfoOptional.get().getCategory());\n        return Result.data(themeResp);\n    }\n    \n    @Override\n    public Result\u003cAppSettingsResp\u003e querySettingByAppId(String appId) {\n        log.info(\"根据appid查询应用配置详情,appId:{}\", appId);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        Optional\u003cAppInfo\u003e appInfoOptional \u003d this.querySingleByAppId(appId);\n        if (appInfoOptional.isEmpty()) {\n            throw new IllegalArgumentException(\"system.common.request.invalid\");\n        }\n        AppInfo appInfo \u003dappInfoOptional.get();\n        AppSettingsResp appSettingsResp \u003d appSettingsService.querySettingsByAppId(appId,tenantId,AppTypes.of(appInfo.getCategory()));\n        return Result.data(appSettingsResp);\n    }\n\n    @Override\n    public Result\u003cKbKnowledgeBaseContainerPermissionTypes\u003e checkAppPermission(String appid) {\n        SysUserInfo sysUserInfo \u003d UserContextHolder.getCurrentUser();\n        Optional\u003cAppInfo\u003e appInfoOptional \u003d this.querySingleByAppId(appid);\n        if (appInfoOptional.isEmpty()) {\n            return Result.error(i18nMessage.resolveMessage(\"system.common.request.invalid\"));\n        }\n        \n        AppInfo appInfo \u003d appInfoOptional.get();\n        \n        // 应用创建者，返回MANAGE权限\n        if (StrUtil.equalsIgnoreCase(appInfo.getCreator(), sysUserInfo.getCode())) {\n            return Result.data(KbKnowledgeBaseContainerPermissionTypes.MANAGE);\n        }\n        \n        // 如果应用是公开的，返回VIEW_ONLY权限\n        if (StrUtil.equalsIgnoreCase(appInfo.getVisibilityRange(),\n                KbKnowledgeBaseContainerVisibilityRange.ENTERPRISE_PUBLIC.name())) {\n            return Result.data(KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY);\n        }\n        \n        // 如果是超级管理员但不是创建者，返回VIEW_ONLY权限\n        boolean superAdmin \u003d StpUtil.hasRole(SystemRoles.SYS_ROLE_CLI_ADMIN.getCode());\n        if (superAdmin) {\n            return Result.data(KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY);\n        }\n        \n        DepartmentUserOrgPermissions orgPermissions \u003d kbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n        List\u003cString\u003e teamCodes \u003d orgPermissions.getTeamCodes();\n        List\u003cString\u003e organizationCodes \u003d orgPermissions.getOrganizationCodes();\n        \n        // 查询用户是否有权限访问该应用\n        List\u003cString\u003e appidList \u003d appInfoMapper.listPermissionByConditionCheck(\n                AppInfoQueryReq.checkOf(sysUserInfo.getTenantId(), sysUserInfo.getCode(), teamCodes, organizationCodes, appid));\n        \n        if (CollUtil.isNotEmpty(appidList)) {\n            return Result.data(KbKnowledgeBaseContainerPermissionTypes.VIEW_ONLY);\n        } else {\n            return Result.data(KbKnowledgeBaseContainerPermissionTypes.NO_PERMISSION);\n        }\n    }\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 775
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/page/service/impl/PagePermissionServiceImpl.java",
      "timestamp": 1761621693779,
      "startOffset": 7591,
      "endOffset": 8163,
      "codeContent": "// 为USER类型的权限设置owner标志\n        for (SaasKnowledgeElementPermissionResp resp : result) {\n            if (StrUtil.equalsIgnoreCase(resp.getMembershipType(), KbKnowledgeBaseContainerMemberTypes.USER.name())) {\n                // 如果membershipCode与文档创建人creator匹配，则设置为owner\n                if (StrUtil.isNotBlank(record.getCreator()) \u0026\u0026 StrUtil.equalsIgnoreCase(resp.getMembershipCode(), record.getCreator())) {\n                    resp.setOwner(true);\n                }else {\n                    resp.setOwner(false);\n                }\n            }\n        }\n        \n        ",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 13
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/store/entity/AppInfo.java",
      "timestamp": 1761621693786,
      "startOffset": 2580,
      "endOffset": 2731,
      "codeContent": "\n    /**\n     * 是否绑定个人知识库：0-否，1-是\n     */\n    private boolean bindPersonalKb;\n\n    /**\n     * 是否绑定全部知识库：0-否，1-是\n     */\n    private boolean bindAllKb;\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 11
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/knowledge/impl/KnowledgeContainerServiceImpl.java",
      "timestamp": 1761621708874,
      "startOffset": 9728,
      "endOffset": 15039,
      "codeContent": "\n        List\u003cString\u003e matchAllTagNames \u003d Collections.emptyList();\n        if (StrUtil.isNotBlank(knowledgeContainerQueryReq.getTag())) {\n            matchAllTagNames \u003d Arrays.stream(knowledgeContainerQueryReq.getTag().split(\",\"))\n                    .map(String::trim)\n                    .filter(StrUtil::isNotBlank)\n                    .distinct()\n                    .toList();\n        }\n        List\u003cString\u003e filterContainerCodes \u003d null;\n        if (CollUtil.isNotEmpty(matchAllTagNames)) {\n            // 查询包含全部标签的容器id集合\n            filterContainerCodes \u003d knowledgeTagRelationService.listContainerIdsMatchAll(tenantId, matchAllTagNames);\n            if (CollUtil.isEmpty(filterContainerCodes)) {\n                return Pagination.pagination(Collections.emptyList(),0,pageNo,pageSize);\n            }\n        }\n        // 我的知识库\n        if (knowledgeContainerQueryReq.getCreator()!\u003d null \u0026\u0026 knowledgeContainerQueryReq.getCreator()){\n            // 如果是标签非空的查询，那么首先需要查询标签关联表\n            List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos;\n            long count;\n            try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.selectList(Wrappers.lambdaQuery(SaasKnowledgeContainer.class).eq(SaasKnowledgeContainer::getTenantId, tenantId)\n                        .eq(SaasKnowledgeContainer::getCreator, code)\n                                .like(StrUtil.isNotBlank(knowledgeContainerQueryReq.getName()), SaasKnowledgeContainer::getName, knowledgeContainerQueryReq.getName())\n                        .eq(StrUtil.isNotEmpty(knowledgeContainerQueryReq.getClassifyCode()),SaasKnowledgeContainer::getClassifyCode, knowledgeContainerQueryReq.getClassifyCode())\n                        .in(ObjectUtil.isNotEmpty(filterContainerCodes),SaasKnowledgeContainer::getCode, filterContainerCodes)\n                        .orderByDesc(SaasKnowledgeContainer::getCreateTime));\n                count \u003d saasKnowledgeContainerPageNo.getTotal();\n            }\n            if (CollectionUtil.isNotEmpty(saasKnowledgeContainerInfos)) {\n                // 获取知识库容器列表\n                List\u003cString\u003e containerId \u003d saasKnowledgeContainerInfos.stream().map(SaasKnowledgeContainer::getCode).toList();\n                // 获取容器下的标签\n                Map\u003cString, List\u003cString\u003e\u003e tagMap \u003d knowledgeTagRelationService.listByContainerIds(containerId, tenantId);\n                Map\u003cString, UniversalEmbeddingConfig\u003e embeddingConfigMap\u003dknowledgeElementEmbeddingQueryService.listEmbeddingModelsByContainerId(containerId);\n                for (SaasKnowledgeContainer container:saasKnowledgeContainerInfos){\n                    KnowledgeContainerResp containerResp\u003d new SaasKnowledgeContainerApplyFunction(tagMap).apply(container);\n                    // 创建者默认就是manage\n                    containerResp.setPermissionType(KbKnowledgeBaseContainerPermissionTypes.MANAGE.getCode());\n                    containerResp.applyEmbedding(embeddingConfigMap.get(container.getCode()));\n                    knowledgeContainerRespInfos.add(containerResp);\n                }\n            }\n            return Pagination.pagination(knowledgeContainerRespInfos, count, pageNo, pageSize);\n        }else{\n            List\u003cString\u003e teamCodes \u003d new ArrayList\u003c\u003e();\n            List\u003cString\u003e organizationCodes\u003dnew ArrayList\u003c\u003e();\n            // 开始查询\n            List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos;\n            long count;\n            boolean manageKnowledge\u003dsecureConfig.isManageKnowledge() \u0026\u0026 StpUtil.hasRole(Cns.CLI_ADMIN_ROLE);\n            // 启用超管账号，能够看到所有的知识\n            if (manageKnowledge){\n                // 单独查询\n                try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                    LambdaQueryWrapper\u003cSaasKnowledgeContainer\u003e wrapper \u003d getWrapper(knowledgeContainerQueryReq,sysUserInfo);\n                    if (CollUtil.isNotEmpty(filterContainerCodes)) {\n                        wrapper.in(SaasKnowledgeContainer::getCode, filterContainerCodes);\n                    }\n                    saasKnowledgeContainerInfos\u003d saasKnowledgeContainerMapper.selectList(wrapper);\n                    count \u003d saasKnowledgeContainerPageNo.getTotal();\n                }\n            }else{\n                // 查询全部列表的\n                DepartmentUserOrgPermissions orgPermissions\u003dkbDepartmentUserService.listAccessibleDepartmentCodes(sysUserInfo);\n                organizationCodes\u003dorgPermissions.getOrganizationCodes();\n                teamCodes\u003dorgPermissions.getTeamCodes();\n                try (Page\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerPageNo \u003d PageHelper.startPage(pageNo, pageSize)) {\n                    //List\u003cSaasKnowledgeContainer\u003e saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByCondition(ContainerPermissionCondition.of(tenantId,code,teamCodes,processedOrgCodes,knowledgeContainerQueryReq.getName(),null));\n                    saasKnowledgeContainerInfos \u003d saasKnowledgeContainerMapper.listPermissionAllByConditionV1(ContainerPermissionConditionV1.of(tenantId, orgPermissions.permissionCodesToList(), knowledgeContainerQueryReq.getName(), null, knowledgeContainerQueryReq.getClassifyCode(), filterContainerCodes",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 72
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/web/BusinessDataSourceController.java",
      "timestamp": 1761632645300,
      "startOffset": 6113,
      "endOffset": 6709,
      "codeContent": "    /**\n     * 根据containerCode查询数据源详情\n     * @param containerCode 容器编码\n     * @return 数据源详情列表\n     */\n    @Operation(summary \u003d \"根据containerCode查询数据源详情\")\n    @Parameter(name \u003d \"containerCode\", description \u003d \"容器编码\", required \u003d true, in \u003d ParameterIn.QUERY)\n    @GetMapping(\"/queryById\")\n    public Result\u003cList\u003cBusinessDataSourceResp\u003e\u003e queryById(@RequestParam(value \u003d \"containerCode\") String containerCode) {\n        log.info(\"根据containerCode查询数据源详情,API:{},containerCode:{}\", \"/kl/api/saas/database/queryById\", containerCode);\n        return businessDataSourceService.queryById(containerCode);\n    }",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 12
    },
    {
      "filePath": "/BusinessDataSourceController.java",
      "timestamp": 1761633203119,
      "startOffset": 5874,
      "endOffset": 5894,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/BusinessDataSourceServiceImpl.java",
      "timestamp": 1761633228819,
      "startOffset": 12528,
      "endOffset": 12548,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/database/impl/BusinessDataSourceServiceImpl.java",
      "timestamp": 1761634405408,
      "startOffset": 12672,
      "endOffset": 12712,
      "codeContent": "respList \u003d new BusinessDataSourceResp();",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/BusinessDataSourceServiceImpl.java",
      "timestamp": 1761634414363,
      "startOffset": 12561,
      "endOffset": 12582,
      "codeContent": "usinessDataSourceList",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/BusinessDataSourceServiceImpl.java",
      "timestamp": 1761634414368,
      "startOffset": 12561,
      "endOffset": 12582,
      "codeContent": "usinessDataSourceList",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/BusinessDataSourceServiceImpl.java",
      "timestamp": 1761634414370,
      "startOffset": 12561,
      "endOffset": 12582,
      "codeContent": "usinessDataSourceList",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/database/impl/BusinessDataSourceServiceImpl.java",
      "timestamp": 1761634436029,
      "startOffset": 817,
      "endOffset": 855,
      "codeContent": "import cn.hutool.core.util.ObjectUtil;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/SessionConversation.java",
      "timestamp": 1761642503947,
      "startOffset": 2874,
      "endOffset": 2894,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/SessionConversation.java",
      "timestamp": 1761642630614,
      "startOffset": 3943,
      "endOffset": 3995,
      "codeContent": "saasConversationTopic.setAppid(this.appId);\n        ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/infra/rag/memory/model/SessionConversation.java",
      "timestamp": 1761642639421,
      "startOffset": 680,
      "endOffset": 718,
      "codeContent": "import cn.hutool.core.util.ObjectUtil;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/SessionConversation.java",
      "timestamp": 1761642660712,
      "startOffset": 3877,
      "endOffset": 4048,
      "codeContent": "sNotEmpty(this.containerId)){\n            saasConversationTopic.sIntellijIdeaRulezzz;(this.containerId);\n        }\n        saasConversationTopic.setTenantId(this.tenantId)",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 4
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/infra/rag/memory/model/SessionConversation.java",
      "timestamp": 1761642926762,
      "startOffset": 3900,
      "endOffset": 3920,
      "codeContent": "cn.hutool.core.util.",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/infra/rag/memory/model/SessionConversation.java",
      "timestamp": 1761642926771,
      "startOffset": 680,
      "endOffset": 718,
      "codeContent": "import cn.hutool.core.util.ObjectUtil;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/repository/chat/mapper/SaasConversationTopicMapper.java",
      "timestamp": 1761643261108,
      "startOffset": 800,
      "endOffset": 1072,
      "codeContent": "import java.util.List;\n\n/**\n * \u003cp\u003e\n * 问答记录明细分组标题表 Mapper 接口\n * \u003c/p\u003e\n *\n * @author xiaoymin@foxmail.com\n * @since 2024-11-14\n */\npublic interface SaasConversationTopicMapper extends BaseMapper\u003cSaasConversationTopic\u003e {\n\n    int insertBatch(List\u003cSaasConversationTopic\u003e list);",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 13
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/search/service/impl/ConversationTopicServiceImpl.java",
      "timestamp": 1761643306372,
      "startOffset": 2400,
      "endOffset": 4230,
      "codeContent": "// 如果 appid 包含多个（逗号分隔），按\",\"分割并去重，批量保存\n            if (conversationTopic !\u003d null \u0026\u0026 StrUtil.isNotBlank(conversationTopic.getAppid()) \u0026\u0026 StrUtil.contains(conversationTopic.getAppid(), \",\")) {\n                String[] ids \u003d StrUtil.splitToArray(conversationTopic.getAppid(), \u0027,\u0027);\n                java.util.LinkedHashSet\u003cString\u003e uniqueIds \u003d new java.util.LinkedHashSet\u003c\u003e();\n                for (String id : ids) {\n                    if (StrUtil.isNotBlank(id)) {\n                        uniqueIds.add(StrUtil.trim(id));\n                    }\n                }\n                if (!uniqueIds.isEmpty()) {\n                    List\u003cSaasConversationTopic\u003e batch \u003d new java.util.ArrayList\u003c\u003e(uniqueIds.size());\n                    for (String id : uniqueIds) {\n                        SaasConversationTopic item \u003d new SaasConversationTopic();\n                        item.setCreator(conversationTopic.getCreator());\n                        item.setAppid(id);\n                        item.setCreateTime(conversationTopic.getCreateTime());\n                        item.setModifier(conversationTopic.getModifier());\n                        item.setModifierTime(conversationTopic.getModifierTime());\n                        item.setSort(conversationTopic.getSort());\n                        item.setTenantId(conversationTopic.getTenantId());\n                        item.setUserCode(conversationTopic.getUserCode());\n                        item.setConversationId(conversationTopic.getConversationId());\n                        item.setTopic(conversationTopic.getTopic());\n                        batch.add(item);\n                    }\n                    // 批量插入，不使用循环 insert\n                    this.saasConversationTopicMapper.insertBatch(batch);\n                    return;\n                }\n            }\n            // 单条保存\n            ",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 32
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/storage/impl/ConversationStoreServiceImpl.java",
      "timestamp": 1761643724567,
      "startOffset": 2184,
      "endOffset": 7538,
      "codeContent": "if (cn.hutool.core.util.ObjectUtil.isNotEmpty(sessionConversation.getContainerId())) {\n            String[] ids \u003d cn.hutool.core.util.StrUtil.splitToArray(String.join(\",\", sessionConversation.getContainerId()), \u0027,\u0027);\n            java.util.LinkedHashSet\u003cString\u003e uniqueIds \u003d new java.util.LinkedHashSet\u003c\u003e();\n            for (String id : ids) {\n                if (cn.hutool.core.util.StrUtil.isNotBlank(id)) {\n                    uniqueIds.add(cn.hutool.core.util.StrUtil.trim(id));\n                }\n            }\n            for (String appId : uniqueIds) {\n                SaasConversationInfo conversationRecord \u003d new SaasConversationInfo();\n                // 消息 id 手动生成\n                conversationRecord.setMessageId(sessionConversation.getMessageId());\n                conversationRecord.setConversationId(sessionConversation.getConversationId());\n                conversationRecord.setMessageType(ChatMessageTypeEnum.ANSWER.getCode());\n                conversationRecord.setUserId(sessionConversation.getUserId());\n                conversationRecord.setCreator(sessionConversation.getUserId());\n                conversationRecord.setCreateTime(LocalDateTime.now());\n                // 初始化时，截取长度，不能超过2048\n                conversationRecord.setQuestion(StrUtil.sub(sessionConversation.getQuestion(), 0, 2048));\n                // 保存大模型修订后的问题\n                conversationRecord.setReviseQuestion(StrUtil.sub(sessionConversation.getReviseQuestion(), 0, 2048));\n                conversationRecord.setFileSource(sessionConversation.getFileSource());\n                conversationRecord.setStartTime(sessionConversation.getStartTime());\n                conversationRecord.setModelName(sessionConversation.getModelName());\n                conversationRecord.setOriginalData(sessionConversation.getOriginalData());\n                conversationRecord.setApiType(sessionConversation.getApiType());\n                conversationRecord.setContent(sessionConversation.getAnswer());\n                conversationRecord.setIp(sessionConversation.getIp());\n                conversationRecord.setTenantId(sessionConversation.getTenantId());\n                conversationRecord.setStatus(sessionConversation.getMessageStatus().getCode());\n                conversationRecord.setModifierTime(LocalDateTime.now());\n                conversationRecord.setModifier(sessionConversation.getUserId());\n                conversationRecord.setCostTime(sessionConversation.getCostTime());\n                // 平台\n                conversationRecord.setPlatform(sessionConversation.getPlatform());\n                // 过程调用消耗日志\n                conversationRecord.setTimeLogs(sessionConversation.getTimeLogs());\n                // 设置应用id\n                conversationRecord.setAppId(appId);\n                log.info(\"ConversationStoreServiceImpl.saveMessage: 保存appId到数据库, appId\u003d{}, messageId\u003d{}\", appId, sessionConversation.getMessageId());\n                saasConversationInfoMapper.insert(conversationRecord);\n            }\n        } else {\n            SaasConversationInfo conversationRecord \u003d new SaasConversationInfo();\n            // 消息 id 手动生成\n            conversationRecord.setMessageId(sessionConversation.getMessageId());\n            conversationRecord.setConversationId(sessionConversation.getConversationId());\n            conversationRecord.setMessageType(ChatMessageTypeEnum.ANSWER.getCode());\n            conversationRecord.setUserId(sessionConversation.getUserId());\n            conversationRecord.setCreator(sessionConversation.getUserId());\n            conversationRecord.setCreateTime(LocalDateTime.now());\n            // 初始化时，截取长度，不能超过2048\n            conversationRecord.setQuestion(StrUtil.sub(sessionConversation.getQuestion(), 0, 2048));\n            // 保存大模型修订后的问题\n            conversationRecord.setReviseQuestion(StrUtil.sub(sessionConversation.getReviseQuestion(), 0, 2048));\n            conversationRecord.setFileSource(sessionConversation.getFileSource());\n            conversationRecord.setStartTime(sessionConversation.getStartTime());\n            conversationRecord.setModelName(sessionConversation.getModelName());\n            conversationRecord.setOriginalData(sessionConversation.getOriginalData());\n            conversationRecord.setApiType(sessionConversation.getApiType());\n            conversationRecord.setContent(sessionConversation.getAnswer());\n            conversationRecord.setIp(sessionConversation.getIp());\n            conversationRecord.setTenantId(sessionConversation.getTenantId());\n            conversationRecord.setStatus(sessionConversation.getMessageStatus().getCode());\n            conversationRecord.setModifierTime(LocalDateTime.now());\n            conversationRecord.setModifier(sessionConversation.getUserId());\n            conversationRecord.setCostTime(sessionConversation.getCostTime());\n            // 平台\n            conversationRecord.setPlatform(sessionConversation.getPlatform());\n            // 过程调用消耗日志\n            conversationRecord.setTimeLogs(sessionConversation.getTimeLogs());\n            // 设置应用id\n            conversationRecord.setAppId(sessionConversation.getAppId());\n            log.info(\"ConversationStoreServiceImpl.saveMessage: 保存appId到数据库, appId\u003d{}, messageId\u003d{}\", sessionConversation.getAppId(), sessionConversation.getMessageId());\n            saasConversationInfoMapper.insert(conversationRecord);\n        }",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 76
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/knowledge/domain/storage/impl/ConversationStoreServiceImpl.java",
      "timestamp": 1761643750258,
      "startOffset": 699,
      "endOffset": 737,
      "codeContent": "import cn.hutool.core.util.ObjectUtil;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/infra/rag/chain/model/ChainContext.java",
      "timestamp": 1761645070658,
      "startOffset": 9484,
      "endOffset": 9546,
      "codeContent": "conversation.setQuestion(this.getChatRequest().getQuestion());",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/ChainContext.java",
      "timestamp": 1761645072439,
      "startOffset": 9536,
      "endOffset": 9574,
      "codeContent": "(this.getChatRequest().getQuestion());",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/infra/rag/chain/model/ChainRequest.java",
      "timestamp": 1761645163533,
      "startOffset": 2123,
      "endOffset": 2191,
      "codeContent": "    /**\n     * 知识库Id集合\n     */\n    private List\u003cString\u003e containerId;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 4
    },
    {
      "filePath": "/FeedMessageServiceImpl.java",
      "timestamp": 1761725269321,
      "startOffset": 1872,
      "endOffset": 1892,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/FeedMessageServiceImpl.java",
      "timestamp": 1761725413508,
      "startOffset": 1820,
      "endOffset": 1840,
      "codeContent": "IntellijIdeaRulezzz ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "/FeedMessageServiceImpl.java",
      "timestamp": 1761725414148,
      "startOffset": 1821,
      "endOffset": 2326,
      "codeContent": " (StrUtil.isNotBlank(submitMessage.getAppid()) \u0026\u0026 submitMessage.getAppid().startsWith(\"tv_\")) {\n            Optional\u003cAppInfo\u003e appInfoOptional \u003d appInfoService.querySingleByAppId(submitMessage.getAppid());\n            if (appInfoOptional.isEmpty()) {\n                return true;\n            }\n            AppInfo appInfo \u003d appInfoOptional.get();\n            feedbackData.setTenantId(appInfo.getTenantId());\n        } else {\n            log.info(\"处理问答反馈板块MQ消息，appid为空\");\n            return false;\n        }",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 11
    },
    {
      "filePath": "/FeedMessageServiceImpl.java",
      "timestamp": 1761725414149,
      "startOffset": 1819,
      "endOffset": 1849,
      "codeContent": "ifIntellijIdeaRulezzz\n        ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 2
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/operation/service/impl/FeedMessageServiceImpl.java",
      "timestamp": 1761725427900,
      "startOffset": 1184,
      "endOffset": 1208,
      "codeContent": "import org.docx4j.wml.P;",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/operation/service/impl/FeedMessageServiceImpl.java",
      "timestamp": 1761725437345,
      "startOffset": 2036,
      "endOffset": 2633,
      "codeContent": " if (StrUtil.isNotBlank(submitMessage.getAppid())) {\n            Optional\u003cAppInfo\u003e appInfoOptional \u003d appInfoService.querySingleByAppId(submitMessage.getAppid());\n            if (appInfoOptional.isEmpty()) {\n                return true;\n            }\n            AppInfo appInfo \u003d appInfoOptional.get();\n            feedbackData.setTenantId(appInfo.getTenantId());\n        } else {\n            log.info(\"处理问答反馈板块MQ消息，appid为空\");\n            return false;\n        }\n        int ret \u003d saasFeedbackDataMapper.insert(feedbackData);\n        log.info(\"处理问答反馈板块的MQ消息，提交结果:{}\", ret);\n        return ret \u003e 0;",
      "aiProbability": 70,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 14
    },
    {
      "filePath": "/fragment.java",
      "timestamp": 1761729705569,
      "startOffset": 0,
      "endOffset": 37,
      "codeContent": "com.torchv.TorchVBotServerApplication",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 1
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/TestHtmlMarkdownFix.java",
      "timestamp": 1761730728852,
      "startOffset": 0,
      "endOffset": 1046,
      "codeContent": "import com.torchv.infra.common.utils.MarkdownUtils;\n\npublic class TestHtmlMarkdownFix {\n    public static void main(String[] args) {\n        // 测试用例：包含\u003cu\u003e标签的链接\n        String html \u003d \"\u003cp\u003e\u003cspan\u003e不秃头的链接\u003c/span\u003e\u003c/p\u003e\u003cp style\u003d\\\"text-align: start; line-height: var(--text-line-height);\\\"\u003e\u003ca target\u003d\\\"_blank\\\" rel\u003d\\\"noopener noreferrer nofollow\\\" href\u003d\\\"https://www.shuyixiao.cn/\\\"\u003e\u003cspan\u003e\u003cu\u003ehttps://www.shuyixiao.cn/\u003c/u\u003e\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\";\n        \n        System.out.println(\"原始 HTML:\");\n        System.out.println(html);\n        System.out.println(\"\\n转换后的 Markdown:\");\n        \n        String markdown \u003d MarkdownUtils.html2Markdown(html);\n        System.out.println(markdown);\n        \n        System.out.println(\"\\n期望输出：\");\n        System.out.println(\"不秃头的链接\\n\\n[https://www.shuyixiao.cn/](https://www.shuyixiao.cn/)\");\n        \n        // 验证结果\n        boolean correct \u003d !markdown.contains(\"++\") \u0026\u0026 markdown.contains(\"[https://www.shuyixiao.cn/](https://www.shuyixiao.cn/)\");\n        System.out.println(\"\\n测试结果: \" + (correct ? \"✓ 通过\" : \"✗ 失败\"));\n    }\n}\n\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 24
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/test_html_conversion.java",
      "timestamp": 1761730728887,
      "startOffset": 0,
      "endOffset": 1343,
      "codeContent": "// 测试HTML到Markdown转换修复效果\npublic class TestHtmlConversion {\n    public static void main(String[] args) {\n        // 模拟前端传递的数据\n        String frontendHtml \u003d \"\u003cp\u003e不秃头的链接\u003c/p\u003e\u003cp\u003e\u003ca target\u003d\\\"_blank\\\" rel\u003d\\\"noopener noreferrer nofollow\\\" href\u003d\\\"https://www.shuyixiao.cn/\\\"\u003e\u003cu\u003ehttps://www.shuyixiao.cn/\u003c/u\u003e\u003c/a\u003e\u003c/p\u003e\";\n        \n        // 模拟KnowledgeElementContentUpdateReq对象\n        TestReq req \u003d new TestReq();\n        req.setContent(\"原始内容\");\n        req.setContentMarked(frontendHtml); // 前端传递的HTML内容\n        \n        System.out.println(\"修复前的问题：\");\n        System.out.println(\"前端传递: \" + frontendHtml);\n        System.out.println(\"后端错误转换后: 不秃头的链接\\n\\n[++https://www.shuyixiao.cn/++](https://www.shuyixiao.cn/)\");\n        \n        System.out.println(\"\\n修复后的逻辑：\");\n        System.out.println(\"前端传递: \" + frontendHtml);\n        System.out.println(\"后端保持原样: \" + frontendHtml);\n        System.out.println(\"说明：由于contentMarked已有值，不会被错误转换\");\n    }\n    \n    static class TestReq {\n        private String content;\n        private String contentMarked;\n        \n        public void setContent(String content) { this.content \u003d content; }\n        public void setContentMarked(String contentMarked) { this.contentMarked \u003d contentMarked; }\n        public String getContent() { return content; }\n        public String getContentMarked() { return contentMarked; }\n    }\n}\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 32
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/TestHtmlConversion.java",
      "timestamp": 1761730728894,
      "startOffset": 0,
      "endOffset": 1343,
      "codeContent": "// 测试HTML到Markdown转换修复效果\npublic class TestHtmlConversion {\n    public static void main(String[] args) {\n        // 模拟前端传递的数据\n        String frontendHtml \u003d \"\u003cp\u003e不秃头的链接\u003c/p\u003e\u003cp\u003e\u003ca target\u003d\\\"_blank\\\" rel\u003d\\\"noopener noreferrer nofollow\\\" href\u003d\\\"https://www.shuyixiao.cn/\\\"\u003e\u003cu\u003ehttps://www.shuyixiao.cn/\u003c/u\u003e\u003c/a\u003e\u003c/p\u003e\";\n        \n        // 模拟KnowledgeElementContentUpdateReq对象\n        TestReq req \u003d new TestReq();\n        req.setContent(\"原始内容\");\n        req.setContentMarked(frontendHtml); // 前端传递的HTML内容\n        \n        System.out.println(\"修复前的问题：\");\n        System.out.println(\"前端传递: \" + frontendHtml);\n        System.out.println(\"后端错误转换后: 不秃头的链接\\n\\n[++https://www.shuyixiao.cn/++](https://www.shuyixiao.cn/)\");\n        \n        System.out.println(\"\\n修复后的逻辑：\");\n        System.out.println(\"前端传递: \" + frontendHtml);\n        System.out.println(\"后端保持原样: \" + frontendHtml);\n        System.out.println(\"说明：由于contentMarked已有值，不会被错误转换\");\n    }\n    \n    static class TestReq {\n        private String content;\n        private String contentMarked;\n        \n        public void setContent(String content) { this.content \u003d content; }\n        public void setContentMarked(String contentMarked) { this.contentMarked \u003d contentMarked; }\n        public String getContent() { return content; }\n        public String getContentMarked() { return contentMarked; }\n    }\n}\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 32
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/test_html_markdown_fix.java",
      "timestamp": 1761730728905,
      "startOffset": 0,
      "endOffset": 1046,
      "codeContent": "import com.torchv.infra.common.utils.MarkdownUtils;\n\npublic class TestHtmlMarkdownFix {\n    public static void main(String[] args) {\n        // 测试用例：包含\u003cu\u003e标签的链接\n        String html \u003d \"\u003cp\u003e\u003cspan\u003e不秃头的链接\u003c/span\u003e\u003c/p\u003e\u003cp style\u003d\\\"text-align: start; line-height: var(--text-line-height);\\\"\u003e\u003ca target\u003d\\\"_blank\\\" rel\u003d\\\"noopener noreferrer nofollow\\\" href\u003d\\\"https://www.shuyixiao.cn/\\\"\u003e\u003cspan\u003e\u003cu\u003ehttps://www.shuyixiao.cn/\u003c/u\u003e\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\";\n        \n        System.out.println(\"原始 HTML:\");\n        System.out.println(html);\n        System.out.println(\"\\n转换后的 Markdown:\");\n        \n        String markdown \u003d MarkdownUtils.html2Markdown(html);\n        System.out.println(markdown);\n        \n        System.out.println(\"\\n期望输出：\");\n        System.out.println(\"不秃头的链接\\n\\n[https://www.shuyixiao.cn/](https://www.shuyixiao.cn/)\");\n        \n        // 验证结果\n        boolean correct \u003d !markdown.contains(\"++\") \u0026\u0026 markdown.contains(\"[https://www.shuyixiao.cn/](https://www.shuyixiao.cn/)\");\n        System.out.println(\"\\n测试结果: \" + (correct ? \"✓ 通过\" : \"✗ 失败\"));\n    }\n}\n\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 24
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/infra/rag/chain/model/ChainContext.java",
      "timestamp": 1761730731844,
      "startOffset": 9484,
      "endOffset": 9580,
      "codeContent": "// 设置知识库id\n        conversation.setContainerId(this.getChatRequest().getContainerId());\n        ",
      "aiProbability": 90,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 3
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/application/operation/service/impl/FeedMessageServiceImpl.java",
      "timestamp": 1761730736352,
      "startOffset": 1765,
      "endOffset": 2615,
      "codeContent": "String appid \u003d submitMessage.getAppid();\n        \n        // appid为空，直接返回失败\n        if (StrUtil.isBlank(appid)) {\n            log.info(\"处理问答反馈板块MQ消息，appid为空\");\n            return false;\n        }\n        \n        // 如果appid以tv_开头（应用id），需要查询AppInfo获取tenantId\n        if (appid.startsWith(\"tv_\")) {\n            Optional\u003cAppInfo\u003e appInfoOptional \u003d appInfoService.querySingleByAppId(appid);\n            if (appInfoOptional.isEmpty()) {\n                log.warn(\"处理问答反馈板块MQ消息，未找到对应的应用信息，appid:{}\", appid);\n                return true;\n            }\n            AppInfo appInfo \u003d appInfoOptional.get();\n            feedbackData.setTenantId(appInfo.getTenantId());\n        }\n        // 否则为空间id（纯数字），直接使用submittedMessage中的tenantId，无需额外查询\n        int ret \u003d saasFeedbackDataMapper.insert(feedbackData);\n        log.info(\"处理问答反馈板块的MQ消息，appid:{}, 提交结果:{}\", appid",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 21
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/src/main/java/com/torchv/kb/dictionary/service/impl/KbDictionaryServiceImpl.java",
      "timestamp": 1761730754210,
      "startOffset": 2813,
      "endOffset": 7421,
      "codeContent": "Code()), KbDirectory::getCode, kbDictionaryQueryReq.getCode())\n                .like(StrUtil.isNotBlank(kbDictionaryQueryReq.getLabel()), KbDirectory::getLabel, kbDictionaryQueryReq.getLabel())\n                .like(StrUtil.isNotBlank(kbDictionaryQueryReq.getValue()), KbDirectory::getValue, kbDictionaryQueryReq.getValue())\n                .like(StrUtil.isNotBlank(kbDictionaryQueryReq.getDescription()), KbDirectory::getDescription, kbDictionaryQueryReq.getDescription())\n                .orderByAsc(KbDirectory::getSort);\n\n        Page\u003cKbDirectory\u003e page \u003d kbDirectoryMapper.selectPage(new Page\u003c\u003e(pageNo, pageSize), wrapper);\n\n        List\u003cKbDictionaryResp\u003e respList \u003d page.getRecords().stream()\n                .map(this::convertToResp)\n                .collect(Collectors.toList());\n\n        return Pagination.pagination(respList, page.getTotal(), pageNo, pageSize);\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e add(KbDictionaryAddReq kbDictionaryAddReq) {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        log.info(\"新增字典配置信息,租户ID:{}\", tenantId);\n\n        // 检查同一租户下是否存在相同的code\n        KbDirectory existRecord \u003d kbDirectoryMapper.selectOne(Wrappers.lambdaQuery(KbDirectory.class)\n                .eq(KbDirectory::getTenantId, tenantId)\n                .eq(KbDirectory::getCategory, kbDictionaryAddReq.getCategory())\n                .eq(KbDirectory::getCode, kbDictionaryAddReq.getCode()));\n        Assert.isNull(existRecord, \"字典编码已存在\");\n\n        KbDirectory kbDirectory \u003d new KbDirectory();\n        BeanUtils.copyProperties(kbDictionaryAddReq, kbDirectory);\n        kbDirectory.setTenantId(tenantId);\n        kbDirectory.setCreator(UserContextHolder.getCurrentUser().getCode());\n        kbDirectory.setCreateTime(LocalDateTime.now());\n\n        int ret \u003d kbDirectoryMapper.insert(kbDirectory);\n        if (ret \u003e 0) {\n            LogContext.putVariable(\"category\", kbDictionaryAddReq.getCategory());\n            LogContext.putVariable(\"code\", kbDictionaryAddReq.getCode());\n            return Result.data(\"SUCCESS\");\n        }\n        return Result.error(\"新增失败\");\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e update(KbDictionaryUpdateReq kbDictionaryUpdateReq) {\n        String tenantId \u003d UserContextHolder.getTenantId();\n        log.info(\"更新字典配置信息,租户ID:{},ID:{}\", tenantId, kbDictionaryUpdateReq.getId());\n\n        // 根据ID和租户ID查找现有记录\n        KbDirectory existRecord \u003d kbDirectoryMapper.selectOne(Wrappers.lambdaQuery(KbDirectory.class)\n                .eq(KbDirectory::getId, kbDictionaryUpdateReq.getId())\n                .eq(KbDirectory::getTenantId, tenantId));\n        Assert.notNull(existRecord, \"字典配置信息不存在\");\n\n        // 如果修改了code字段，则检查同一租户下是否存在相同的code\n        if (StrUtil.isNotBlank(kbDictionaryUpdateReq.getCode()) \u0026\u0026\n            !kbDictionaryUpdateReq.getCode().equals(existRecord.getCode())) {\n            KbDirectory hasRecord \u003d kbDirectoryMapper.selectOne(Wrappers.lambdaQuery(KbDirectory.class)\n                    .eq(KbDirectory::getTenantId, tenantId)\n                    .eq(KbDirectory::getCategory, kbDictionaryUpdateReq.getCategory())\n                    .eq(KbDirectory::getCode, kbDictionaryUpdateReq.getCode()));\n            Assert.isNull(hasRecord, \"字典编码已存在\");\n        }\n\n        KbDirectory kbDirectory \u003d new KbDirectory();\n        BeanUtils.copyProperties(kbDictionaryUpdateReq, kbDirectory);\n        kbDirectory.setModifier(UserContextHolder.getCurrentUser().getCode());\n        kbDirectory.setModifierTime(LocalDateTime.now());\n\n        int ret \u003d kbDirectoryMapper.updateById(kbDirectory);\n        if (ret \u003e 0) {\n            LogContext.putVariable(\"category\", kbDictionaryUpdateReq.getCategory());\n            LogContext.putVariable(\"id\", kbDictionaryUpdateReq.getId());\n            return Result.data(\"SUCCESS\");\n        }\n        return Result.error(\"更新失败\");\n    }\n\n    @Override\n    public Result\u003cKbDictionaryResp\u003e queryByCode(String code) {\n        log.info(\"根据code查询字典配置信息详情,code:{}\", code);\n        String tenantId \u003d UserContextHolder.getTenantId();\n        KbDirectory kbDirectory \u003d kbDirectoryMapper.selectOne(Wrappers.lambdaQuery(KbDirectory.class)\n                .eq(KbDirectory::getCode, code)\n                .eq(KbDirectory::getTenantId, tenantId));\n        Assert.notNull(kbDirectory, \"字典配置信息不存在\");\n\n        KbDictionaryResp resp \u003d convertToResp(kbDirectory);\n        return Result.data(resp);\n    }\n\n    @Transactional(rollbackFor \u003d Exception.class)\n    @Override\n    public Result\u003cString\u003e delete(String code) {\n        log.info(\"删除字典配置信息,c",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 96
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/TestHtmlConversion.java",
      "timestamp": 1761730754520,
      "startOffset": 0,
      "endOffset": 1343,
      "codeContent": "// 测试HTML到Markdown转换修复效果\npublic class TestHtmlConversion {\n    public static void main(String[] args) {\n        // 模拟前端传递的数据\n        String frontendHtml \u003d \"\u003cp\u003e不秃头的链接\u003c/p\u003e\u003cp\u003e\u003ca target\u003d\\\"_blank\\\" rel\u003d\\\"noopener noreferrer nofollow\\\" href\u003d\\\"https://www.shuyixiao.cn/\\\"\u003e\u003cu\u003ehttps://www.shuyixiao.cn/\u003c/u\u003e\u003c/a\u003e\u003c/p\u003e\";\n        \n        // 模拟KnowledgeElementContentUpdateReq对象\n        TestReq req \u003d new TestReq();\n        req.setContent(\"原始内容\");\n        req.setContentMarked(frontendHtml); // 前端传递的HTML内容\n        \n        System.out.println(\"修复前的问题：\");\n        System.out.println(\"前端传递: \" + frontendHtml);\n        System.out.println(\"后端错误转换后: 不秃头的链接\\n\\n[++https://www.shuyixiao.cn/++](https://www.shuyixiao.cn/)\");\n        \n        System.out.println(\"\\n修复后的逻辑：\");\n        System.out.println(\"前端传递: \" + frontendHtml);\n        System.out.println(\"后端保持原样: \" + frontendHtml);\n        System.out.println(\"说明：由于contentMarked已有值，不会被错误转换\");\n    }\n    \n    static class TestReq {\n        private String content;\n        private String contentMarked;\n        \n        public void setContent(String content) { this.content \u003d content; }\n        public void setContentMarked(String contentMarked) { this.contentMarked \u003d contentMarked; }\n        public String getContent() { return content; }\n        public String getContentMarked() { return contentMarked; }\n    }\n}\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 32
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/test_html_conversion.java",
      "timestamp": 1761730754524,
      "startOffset": 0,
      "endOffset": 1343,
      "codeContent": "// 测试HTML到Markdown转换修复效果\npublic class TestHtmlConversion {\n    public static void main(String[] args) {\n        // 模拟前端传递的数据\n        String frontendHtml \u003d \"\u003cp\u003e不秃头的链接\u003c/p\u003e\u003cp\u003e\u003ca target\u003d\\\"_blank\\\" rel\u003d\\\"noopener noreferrer nofollow\\\" href\u003d\\\"https://www.shuyixiao.cn/\\\"\u003e\u003cu\u003ehttps://www.shuyixiao.cn/\u003c/u\u003e\u003c/a\u003e\u003c/p\u003e\";\n        \n        // 模拟KnowledgeElementContentUpdateReq对象\n        TestReq req \u003d new TestReq();\n        req.setContent(\"原始内容\");\n        req.setContentMarked(frontendHtml); // 前端传递的HTML内容\n        \n        System.out.println(\"修复前的问题：\");\n        System.out.println(\"前端传递: \" + frontendHtml);\n        System.out.println(\"后端错误转换后: 不秃头的链接\\n\\n[++https://www.shuyixiao.cn/++](https://www.shuyixiao.cn/)\");\n        \n        System.out.println(\"\\n修复后的逻辑：\");\n        System.out.println(\"前端传递: \" + frontendHtml);\n        System.out.println(\"后端保持原样: \" + frontendHtml);\n        System.out.println(\"说明：由于contentMarked已有值，不会被错误转换\");\n    }\n    \n    static class TestReq {\n        private String content;\n        private String contentMarked;\n        \n        public void setContent(String content) { this.content \u003d content; }\n        public void setContentMarked(String contentMarked) { this.contentMarked \u003d contentMarked; }\n        public String getContent() { return content; }\n        public String getContentMarked() { return contentMarked; }\n    }\n}\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 32
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/TestHtmlMarkdownFix.java",
      "timestamp": 1761730754559,
      "startOffset": 0,
      "endOffset": 1046,
      "codeContent": "import com.torchv.infra.common.utils.MarkdownUtils;\n\npublic class TestHtmlMarkdownFix {\n    public static void main(String[] args) {\n        // 测试用例：包含\u003cu\u003e标签的链接\n        String html \u003d \"\u003cp\u003e\u003cspan\u003e不秃头的链接\u003c/span\u003e\u003c/p\u003e\u003cp style\u003d\\\"text-align: start; line-height: var(--text-line-height);\\\"\u003e\u003ca target\u003d\\\"_blank\\\" rel\u003d\\\"noopener noreferrer nofollow\\\" href\u003d\\\"https://www.shuyixiao.cn/\\\"\u003e\u003cspan\u003e\u003cu\u003ehttps://www.shuyixiao.cn/\u003c/u\u003e\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\";\n        \n        System.out.println(\"原始 HTML:\");\n        System.out.println(html);\n        System.out.println(\"\\n转换后的 Markdown:\");\n        \n        String markdown \u003d MarkdownUtils.html2Markdown(html);\n        System.out.println(markdown);\n        \n        System.out.println(\"\\n期望输出：\");\n        System.out.println(\"不秃头的链接\\n\\n[https://www.shuyixiao.cn/](https://www.shuyixiao.cn/)\");\n        \n        // 验证结果\n        boolean correct \u003d !markdown.contains(\"++\") \u0026\u0026 markdown.contains(\"[https://www.shuyixiao.cn/](https://www.shuyixiao.cn/)\");\n        System.out.println(\"\\n测试结果: \" + (correct ? \"✓ 通过\" : \"✗ 失败\"));\n    }\n}\n\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 24
    },
    {
      "filePath": "E:/Project/hzmj/ais-server/test_html_markdown_fix.java",
      "timestamp": 1761730754572,
      "startOffset": 0,
      "endOffset": 1046,
      "codeContent": "import com.torchv.infra.common.utils.MarkdownUtils;\n\npublic class TestHtmlMarkdownFix {\n    public static void main(String[] args) {\n        // 测试用例：包含\u003cu\u003e标签的链接\n        String html \u003d \"\u003cp\u003e\u003cspan\u003e不秃头的链接\u003c/span\u003e\u003c/p\u003e\u003cp style\u003d\\\"text-align: start; line-height: var(--text-line-height);\\\"\u003e\u003ca target\u003d\\\"_blank\\\" rel\u003d\\\"noopener noreferrer nofollow\\\" href\u003d\\\"https://www.shuyixiao.cn/\\\"\u003e\u003cspan\u003e\u003cu\u003ehttps://www.shuyixiao.cn/\u003c/u\u003e\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\";\n        \n        System.out.println(\"原始 HTML:\");\n        System.out.println(html);\n        System.out.println(\"\\n转换后的 Markdown:\");\n        \n        String markdown \u003d MarkdownUtils.html2Markdown(html);\n        System.out.println(markdown);\n        \n        System.out.println(\"\\n期望输出：\");\n        System.out.println(\"不秃头的链接\\n\\n[https://www.shuyixiao.cn/](https://www.shuyixiao.cn/)\");\n        \n        // 验证结果\n        boolean correct \u003d !markdown.contains(\"++\") \u0026\u0026 markdown.contains(\"[https://www.shuyixiao.cn/](https://www.shuyixiao.cn/)\");\n        System.out.println(\"\\n测试结果: \" + (correct ? \"✓ 通过\" : \"✗ 失败\"));\n    }\n}\n\n",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 24
    },
    {
      "filePath": "E:/Project/GitHub/PandaCoder/src/main/java/com/shuyixiao/esdsl/parser/EsDslParser.java",
      "timestamp": 1761744290216,
      "startOffset": 2444,
      "endOffset": 3132,
      "codeContent": "（查询请求，而非响应）\n     * 检查是否包含ES特征字段，同时排除响应数据\n     */\n    private static boolean isEsDsl(String json) {\n        if (json \u003d\u003d null || json.trim().isEmpty()) {\n            return false;\n        }\n\n        String lower \u003d json.toLowerCase();\n\n        // ❌ 排除ES响应数据（包含这些字段的是响应，不是DSL）\n        if (lower.contains(\"\\\"_index\\\"\") ||\n            lower.contains(\"\\\"_id\\\"\") ||\n            lower.contains(\"\\\"_score\\\"\") ||\n            lower.contains(\"\\\"hits\\\"\") \u0026\u0026 lower.contains(\"\\\"total\\\"\") \u0026\u0026 lower.contains(\"\\\"max_score\\\"\") ||\n            lower.contains(\"\\\"took\\\"\") \u0026\u0026 lower.contains(\"\\\"timed_out\\\"\") \u0026\u0026 lower.contains(\"\\\"_shards\\\"\")) {\n            return false;\n        }\n\n        // ✅ ES DSL 特征关键词（查询请求）",
      "aiProbability": 95,
      "aiTool": "AI Assistant",
      "detectionMethod": "REALTIME_SPEED_ANALYSIS",
      "lineCount": 20
    }
  ],
  "toolStats": {
    "AI Assistant": {
      "usageCount": 248,
      "totalLines": 11276
    }
  }
}