buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.5.0'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.17.4'
}

group = 'com.shuyixiao'
version = '1.1.7' // 内测版本：新增Bug记录功能

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.groovy:groovy:4.0.14'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation "com.google.code.gson:gson:2.11.0"
    implementation "org.jetbrains:annotations:24.1.0"
    // Jenkins Pipeline支持所需依赖
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.jetbrains:annotations:24.1.0'
}

intellij {
    version = '2024.1.6'
    type = 'IU'
    plugins = ['java', 'org.intellij.groovy']
    updateSinceUntilBuild = false
}

// 确保图标资源被正确包含
sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
            includes = ['**/*.svg', '**/*.png', '**/*.xml', '**/*.properties', '**/*.gdsl']
        }
    }
}

tasks.withType(org.jetbrains.intellij.tasks.BuildSearchableOptionsTask) {
    enabled = false
}

ext {
    niagara_home = project.rootDir.absolutePath
}

tasks.register('minJar', Jar) {
    archiveClassifier.set('min')
    from sourceSets.main.output
}

tasks.register('proguard', proguard.gradle.ProGuardTask) {
    dependsOn minJar
    doFirst {
        ext {
            injar = tasks.named('minJar').get().archiveFile.get().asFile
            outJar = file("$buildDir/libs/${rootProject.name}-${version}-proguarded.jar")

            fileTree(dir: 'lib', include: '*.jar').files.each { jarFile ->
                libraryjars(jarFile)
            }

            libraryjars(System.getProperty("java.home") + "/jmods/java.base.jmod")
        }

        injars injar
        outjars outJar
        configuration 'sensetech.pro'
    }
    outputs.upToDateWhen { false }
}

// 运行插件配置
tasks.named("runIde") {
    // 从环境变量或系统属性中读取API配置，如果没有则使用默认值
    jvmArgs = [
        "-Xmx2g",
        // 百度翻译API配置 - 支持环境变量
        "-Dbaidu.api.key=${System.getenv('BAIDU_API_KEY') ?: System.getProperty('baidu.api.key', '')}",
        "-Dbaidu.app.id=${System.getenv('BAIDU_APP_ID') ?: System.getProperty('baidu.app.id', '')}"
    ]

    // 打印配置信息（调试用，生产环境建议移除）
    doFirst {
        println "BAIDU_API_KEY 环境变量: ${System.getenv('BAIDU_API_KEY') ? '已设置' : '未设置'}"
        println "BAIDU_APP_ID 环境变量: ${System.getenv('BAIDU_APP_ID') ? '已设置' : '未设置'}"
    }
}

patchPluginXml {
    sinceBuild.set("241") // 设置最低支持版本为 2024.1，匹配 Java 17 要求
    // 不设置 untilBuild，允许在任何更高版本上使用

    // 插件详细描述和变更说明
    pluginDescription.set("""
        PandaCoder is an intelligent development tool designed for Chinese developers, integrating Chinese programming assistant, comprehensive Jenkins Pipeline support, and SpringBoot configuration visualization.

        🎯 Core Features:

        📝 Chinese Programming Assistant:
        • Intelligent Chinese to English conversion: Achieved through large models and prompt engineering, avoiding mechanical word-for-word translation
        • Smart class creation: Supports Chinese input for quick Java class creation with automatic English conversion
        • Class name prefix recognition: Supports "Service:User Management" format for standardized naming
        • Multiple naming formats: CamelCase, PascalCase, UPPER_CASE with underscores
        • Multi-engine translation: Domestic AI models (Qianwen/Wenxin/Zhipu) > Google Cloud Translation > Baidu Translation

        🐳 Jenkins Pipeline Support:
        • Custom file type and icon: Jenkins robot icon with 5-layer theme override protection
        • Enhanced syntax highlighting: 11 vibrant colors in VS Code style
        • Intelligent completion: pipeline, stage, step keywords and methods
        • Environment variable completion: Auto-recognizes env.BUILD_NUMBER, env.WORKSPACE, etc.
        • Parameter completion: Auto-completes params.APP_NAME, params.DEPLOY_ENV, etc.
        • Documentation support: Hover documentation and method signatures
        • Customizable colors: Adjust syntax highlighting colors in IDE settings

        🍃 SpringBoot Configuration Icons:
        • Technology stack recognition: MySQL, PostgreSQL, Oracle, SQL Server, Redis, Kafka, RabbitMQ, Elasticsearch
        • Smart icon display: Colorful technology stack icons in editor gutter
        • Multi-format support: YAML and Properties configuration files
        • Priority matching: Specific technology icons override generic configuration icons
        • Hover tooltips: Display technology stack names and detailed information

        ⚙️ Advanced Features:
        • Custom translation prompts: Adapt to different technical domains
        • File template configuration: Custom Java file comment templates
        • API configuration validation: Real-time verification of translation engine APIs
        • Smart error handling: Graceful degradation ensuring functionality availability
        • Three-tier translation engine: Ensures translation quality and availability

        🎨 Technical Highlights:
        • Intelligent priority matching: Avoids icon conflicts, displays most relevant technology stack icons
        • Multi-language support: Chinese and English programming environments
        • Theme compatibility: Custom icons support light and dark themes
        • Performance optimization: Thread-safe caching and intelligent loading

        Significantly improves development efficiency for Chinese-speaking developers and enhances Jenkins Pipeline development experience while providing intuitive SpringBoot configuration visualization.
    """)

    changeNotes.set("""
        <ul>
            <li><b>1.1.7</b> - 🧪 <b>内测版本</b>：新增Bug记录功能
                <ul>
                    <li>🐛 <b>Bug记录工具窗口</b>：新增专门的Bug记录工具窗口，方便开发过程中记录和管理问题</li>
                    <li>📝 <b>智能错误解析</b>：自动解析控制台输出的错误信息，提取关键错误信息</li>
                    <li>🔍 <b>错误类型识别</b>：自动识别不同类型的错误（编译错误、运行时错误、警告等）</li>
                    <li>📊 <b>Bug状态管理</b>：支持标记Bug状态（新建、处理中、已解决、已关闭）</li>
                    <li>⏰ <b>时间戳记录</b>：自动记录Bug发现时间和处理时间</li>
                    <li>💾 <b>本地存储</b>：Bug记录保存在本地，确保数据安全</li>
                    <li>🔧 <b>控制台监控</b>：实时监控控制台输出，自动捕获错误信息</li>
                    <li>⚠️ <b>内测功能</b>：此功能目前处于内测阶段，可能存在不稳定性，请谨慎使用</li>
                </ul>
            </li>
            <li><b>1.1.6</b> - 用户体验全面升级
                <ul>
                    <li>🎨 <b>现代化欢迎界面</b>：全新设计的欢迎对话框，提供更美观的用户体验</li>
                    <li>📱 <b>微信公众号集成</b>：一键关注公众号，获取最新功能更新和技术分享</li>
                    <li>💬 <b>问题反馈优化</b>：提供更便捷的问题反馈渠道，支持微信直接联系</li>
                    <li>🏢 <b>作者信息展示</b>：显示作者所在公司信息，增强用户信任度</li>
                    <li>🔧 <b>界面布局优化</b>：重新设计界面布局，信息展示更加清晰</li>
                    <li>📊 <b>功能特性展示</b>：详细展示插件核心功能，帮助用户快速了解</li>
                    <li>🎯 <b>一键开始使用</b>：简化用户操作流程，快速进入工作状态</li>
                </ul>
            </li>
            <li><b>1.1.5</b> - 重大功能升级：新增SpringBoot配置文件图标显示功能
                <ul>
                    <li>🍃 <b>SpringBoot配置文件图标</b>：自动识别配置文件中的技术栈并显示对应图标</li>
                    <li>🎯 <b>技术栈识别</b>：支持MySQL、PostgreSQL、Oracle、SQL Server、Redis、Kafka、RabbitMQ、Elasticsearch等</li>
                    <li>📁 <b>多格式支持</b>：支持YAML和Properties格式的配置文件</li>
                    <li>🎨 <b>智能图标显示</b>：在编辑器左侧gutter区域显示彩色技术栈图标</li>
                    <li>🧠 <b>优先级匹配</b>：特定技术栈图标优先于通用配置图标</li>
                    <li>🖱️ <b>鼠标悬停提示</b>：显示技术栈名称和详细信息</li>
                </ul>
            </li>
            <li><b>1.1.4</b> - 多引擎翻译系统重大升级
                <ul>
                    <li>🤖 <b>国内大模型支持</b>：新增通义千问、文心一言、智谱AI三大国内大模型</li>
                    <li>🌐 <b>Google Cloud Translation</b>：新增Google翻译API支持</li>
                    <li>🔄 <b>三级翻译引擎</b>：国内大模型 > Google翻译 > 百度翻译智能切换</li>
                    <li>⚙️ <b>自定义翻译提示词</b>：支持用户自定义翻译prompt，适配不同技术领域</li>
                    <li>🔧 <b>API配置验证</b>：实时验证各翻译引擎的API配置</li>
                    <li>🛡️ <b>智能错误处理</b>：优雅降级，确保功能可用性</li>
                    <li>📊 <b>配置页面优化</b>：分为4个标签页，界面更加清晰易用</li>
                </ul>
            </li>
            <li><b>1.1.3</b> - 中文编程助手功能完善
                <ul>
                    <li>🎯 <b>类名前缀识别</b>：支持"Service:用户管理"格式，自动生成ServiceUserManagement等规范类名</li>
                    <li>📝 <b>自定义文件模板</b>：支持用户自定义Java文件注释模板</li>
                    <li>🔧 <b>智能精简转换</b>：自动提取核心技术词汇，去除无用词</li>
                    <li>⚙️ <b>类名前缀配置</b>：支持自定义类名前缀列表</li>
                </ul>
            </li>
            <li><b>1.1.2</b> - 新增完整Jenkins Pipeline支持
                <ul>
                    <li>✨ <b>自定义Jenkins文件类型和图标显示</b></li>
                    <li>🎨 <b>11种鲜艳颜色的语法高亮(VS Code风格)</b></li>
                    <li>🔧 <b>智能补全</b>：pipeline、stage、step等关键字</li>
                    <li>🌍 <b>环境变量补全</b>：env.BUILD_NUMBER、env.WORKSPACE等</li>
                    <li>📋 <b>参数补全</b>：params.APP_NAME、params.DEPLOY_ENV等</li>
                    <li>📖 <b>悬停文档</b>：显示方法签名和参数说明</li>
                    <li>🛡️ <b>防主题覆盖</b>：5层防护确保图标在任何主题下正确显示</li>
                    <li>⚙️ <b>可自定义颜色</b>：支持在设置中调整语法高亮颜色</li>
                </ul>
            </li>
            <li><b>1.1.0</b> - 支持IntelliJ IDEA 2024.1，升级到Java 17</li>
            <li><b>1.0.9</b> - 新增智能类创建和前缀支持</li>
            <li><b>1.0.8</b> - 改进翻译准确性，新增自定义模板</li>
            <li><b>1.0.7</b> - 首次发布，基础中英文转换功能</li>
        </ul>
    """)
}

// 插件发布配置
publishPlugin {
    // 从环境变量获取发布令牌，如果没有则尝试从系统属性获取
    token.set(System.getenv("JETBRAINS_TOKEN") ?: System.getProperty("jetbrains.token", ""))

    // 发布渠道，默认为默认渠道（稳定版）
    // 可以设置为 'eap'、'alpha' 或 'beta' 用于不同的发布阶段
    channels.set([System.getenv("JETBRAINS_CHANNEL") ?: System.getProperty("jetbrains.channel", "default")])
}

// 使用Java 17，兼容IntelliJ 2024.1.6
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    useJUnitPlatform()
}
