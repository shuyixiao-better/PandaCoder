buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.5.0'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.17.4'
}

group = 'com.shuyixiao'
version = '1.1.3' // 更新版本号反映品牌变更

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.groovy:groovy:4.0.14'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation "com.google.code.gson:gson:2.11.0"
    implementation "org.jetbrains:annotations:24.1.0"
    // Jenkins Pipeline支持所需依赖
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.jetbrains:annotations:24.1.0'
}

intellij {
    version = '2024.1.6'
    type = 'IU'
    plugins = ['java', 'org.intellij.groovy']
    updateSinceUntilBuild = false
}

tasks.withType(org.jetbrains.intellij.tasks.BuildSearchableOptionsTask) {
    enabled = false
}

ext {
    niagara_home = project.rootDir.absolutePath
}

tasks.register('minJar', Jar) {
    archiveClassifier.set('min')
    from sourceSets.main.output
}

tasks.register('proguard', proguard.gradle.ProGuardTask) {
    dependsOn minJar
    doFirst {
        ext {
            injar = tasks.named('minJar').get().archiveFile.get().asFile
            outJar = file("$buildDir/libs/${rootProject.name}-${version}-proguarded.jar")

            fileTree(dir: 'lib', include: '*.jar').files.each { jarFile ->
                libraryjars(jarFile)
            }

            libraryjars(System.getProperty("java.home") + "/jmods/java.base.jmod")
        }

        injars injar
        outjars outJar
        configuration 'sensetech.pro'
    }
    outputs.upToDateWhen { false }
}

// 运行插件配置
tasks.named("runIde") {
    // 从环境变量或系统属性中读取API配置，如果没有则使用默认值
    jvmArgs = [
        "-Xmx2g",
        // 百度翻译API配置 - 支持环境变量
        "-Dbaidu.api.key=${System.getenv('BAIDU_API_KEY') ?: System.getProperty('baidu.api.key', '')}",
        "-Dbaidu.app.id=${System.getenv('BAIDU_APP_ID') ?: System.getProperty('baidu.app.id', '')}"
    ]

    // 打印配置信息（调试用，生产环境建议移除）
    doFirst {
        println "BAIDU_API_KEY 环境变量: ${System.getenv('BAIDU_API_KEY') ? '已设置' : '未设置'}"
        println "BAIDU_APP_ID 环境变量: ${System.getenv('BAIDU_APP_ID') ? '已设置' : '未设置'}"
    }
}

patchPluginXml {
    sinceBuild.set("241") // 设置最低支持版本为 2024.1，匹配 Java 17 要求
    // 不设置 untilBuild，允许在任何更高版本上使用

    // 插件详细描述和变更说明
    pluginDescription.set("""
        PandaCoder is an intelligent development tool designed for Chinese developers, integrating Chinese programming assistant and comprehensive Jenkins Pipeline support.

        Key Features:
        • Chinese to English naming conversion: Automatically converts Chinese to English variable names, class names, etc.
        • Smart class creation: Supports Chinese input for quick Java class creation
        • Complete Jenkins Pipeline support: Provides intelligent completion, syntax highlighting, and documentation
        • Environment variable completion: Auto-recognizes env.BUILD_NUMBER, env.WORKSPACE, etc.
        • Parameter completion: Auto-completes params.APP_NAME, params.DEPLOY_ENV, etc.
        • Multiple text conversion: Supports CamelCase, PascalCase, underscore naming formats
        • Custom file icons: Jenkins robot icon with 5-layer theme override protection
        • Vibrant syntax highlighting: 11 bright colors in VS Code style
        • Customizable colors: Adjust syntax highlighting colors in IDE settings

        Significantly improves development efficiency for Chinese-speaking developers and enhances Jenkins Pipeline development experience.
    """)

    changeNotes.set("""
        <ul>
            <li><b>1.1.2</b> - 新增完整Jenkins Pipeline支持
                <ul>
                    <li>✨ 自定义Jenkins文件类型和图标显示</li>
                    <li>🎨 11种鲜艳颜色的语法高亮(VS Code风格)</li>
                    <li>🔧 智能补全：pipeline、stage、step等关键字</li>
                    <li>🌍 环境变量补全：env.BUILD_NUMBER、env.WORKSPACE等</li>
                    <li>📋 参数补全：params.APP_NAME、params.DEPLOY_ENV等</li>
                    <li>📖 悬停文档：显示方法签名和参数说明</li>
                    <li>🛡️ 防主题覆盖：5层防护确保图标在任何主题下正确显示</li>
                    <li>⚙️ 可自定义颜色：支持在设置中调整语法高亮颜色</li>
                </ul>
            </li>
            <li><b>1.1.0</b> - 支持IntelliJ IDEA 2024.1，升级到Java 17</li>
            <li><b>1.0.9</b> - 新增智能类创建和前缀支持</li>
            <li><b>1.0.8</b> - 改进翻译准确性，新增自定义模板</li>
            <li><b>1.0.7</b> - 首次发布，基础中英文转换功能</li>
        </ul>
    """)
}

// 插件发布配置
publishPlugin {
    // 从环境变量获取发布令牌，如果没有则尝试从系统属性获取
    token.set(System.getenv("JETBRAINS_TOKEN") ?: System.getProperty("jetbrains.token", ""))

    // 发布渠道，默认为默认渠道（稳定版）
    // 可以设置为 'eap'、'alpha' 或 'beta' 用于不同的发布阶段
    channels.set([System.getenv("JETBRAINS_CHANNEL") ?: System.getProperty("jetbrains.channel", "default")])
}

// 使用Java 17，兼容IntelliJ 2024.1.6
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    useJUnitPlatform()
}
