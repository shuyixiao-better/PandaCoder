buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.5.0'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.17.4'
}

group = 'com.shuyixiao'
version = '1.1.1' // 更新版本号反映品牌变更

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.groovy:groovy:4.0.14'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation "com.google.code.gson:gson:2.11.0"
    implementation "org.jetbrains:annotations:24.1.0"
}

intellij {
    version = '2024.1.6'
    type = 'IU'
    plugins = ['java', 'org.intellij.groovy']
    updateSinceUntilBuild = false
}

tasks.withType(org.jetbrains.intellij.tasks.BuildSearchableOptionsTask) {
    enabled = false
}

ext {
    niagara_home = project.rootDir.absolutePath
}

tasks.register('minJar', Jar) {
    archiveClassifier.set('min')
    from sourceSets.main.output
}

tasks.register('proguard', proguard.gradle.ProGuardTask) {
    dependsOn minJar
    doFirst {
        ext {
            injar = tasks.named('minJar').get().archiveFile.get().asFile
            outJar = file("$buildDir/libs/${rootProject.name}-${version}-proguarded.jar")

            fileTree(dir: 'lib', include: '*.jar').files.each { jarFile ->
                libraryjars(jarFile)
            }

            libraryjars(System.getProperty("java.home") + "/jmods/java.base.jmod")
        }

        injars injar
        outjars outJar
        configuration 'sensetech.pro'
    }
    outputs.upToDateWhen { false }
}

// 运行插件配置
tasks.named("runIde") {
    // 从环境变量或系统属性中读取API配置，如果没有则使用默认值
    jvmArgs = [
        "-Xmx2g",
        // 百度翻译API配置 - 支持环境变量
        "-Dbaidu.api.key=${System.getenv('BAIDU_API_KEY') ?: System.getProperty('baidu.api.key', '')}",
        "-Dbaidu.app.id=${System.getenv('BAIDU_APP_ID') ?: System.getProperty('baidu.app.id', '')}"
    ]

    // 打印配置信息（调试用，生产环境建议移除）
    doFirst {
        println "BAIDU_API_KEY 环境变量: ${System.getenv('BAIDU_API_KEY') ? '已设置' : '未设置'}"
        println "BAIDU_APP_ID 环境变量: ${System.getenv('BAIDU_APP_ID') ? '已设置' : '未设置'}"
    }
}

patchPluginXml {
    sinceBuild.set("241") // 设置最低支持版本为 2024.1，匹配 Java 17 要求
    // 不设置 untilBuild，允许在任何更高版本上使用

    // 插件详细描述和变更说明
    pluginDescription.set("""
        PandaCoder is an intelligent tool designed for Chinese developers that facilitates programming in Chinese environment. 

        Key features include:
        - Chinese to English naming conversion (CamelCase and PascalCase)
        - Smart class creation with automatic Chinese-to-English translation
        - Support for class prefix patterns
        - Custom file header templates
        - Intelligent text processing for variable and method naming

        This plugin significantly improves development efficiency for Chinese-speaking developers by bridging 
        the gap between Chinese language concepts and English code conventions.
    """)

    changeNotes.set("""
        <ul>
            <li><b>1.1.0</b> - Added support for IntelliJ IDEA 2024.1, upgraded to Java 17</li>
            <li><b>1.0.9</b> - Added smart class creation with prefix support</li>
            <li><b>1.0.8</b> - Improved translation accuracy and added custom templates</li>
            <li><b>1.0.7</b> - Initial release with basic Chinese to English conversion</li>
        </ul>
    """)
}

// 插件发布配置
publishPlugin {
    // 从环境变量获取发布令牌，如果没有则尝试从系统属性获取
    token.set(System.getenv("JETBRAINS_TOKEN") ?: System.getProperty("jetbrains.token", ""))

    // 发布渠道，默认为默认渠道（稳定版）
    // 可以设置为 'eap'、'alpha' 或 'beta' 用于不同的发布阶段
    channels.set([System.getenv("JETBRAINS_CHANNEL") ?: System.getProperty("jetbrains.channel", "default")])
}

// 使用Java 17，兼容IntelliJ 2024.1.6
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    useJUnitPlatform()
}
