// 独立的版本更新脚本
// 使用方法: gradlew -b update-version.gradle updateVersion

// 读取 gradle.properties
def props = new Properties()
file("gradle.properties").withInputStream { props.load(it) }

def pluginVersion = props.getProperty('pluginVersion')
def versionType = props.getProperty('versionType')
def releaseDate = props.getProperty('releaseDate')
def currentFeatures = props.getProperty('currentFeatures')

println "========================================="
println "开始更新版本信息..."
println "目标版本: ${pluginVersion}"
println "========================================="

// 1. 更新 version.properties
def versionFile = file("src/main/resources/version.properties")
versionFile.text = """# Auto-generated version information
# DO NOT EDIT THIS FILE MANUALLY
# This file is generated by update-version.gradle script
# To update version, edit gradle.properties file and run: gradlew -b update-version.gradle

version=${pluginVersion}
versionType=${versionType}
releaseDate=${releaseDate}
currentFeatures=${currentFeatures}
"""
println "✓ 已更新: src/main/resources/version.properties"

// 2. 更新 README.md
def readmeFile = file("README.md")
if (readmeFile.exists()) {
    def content = readmeFile.text
    content = content.replaceAll(
        /https:\/\/img\.shields\.io\/badge\/Version-[\d.]+/,
        "https://img.shields.io/badge/Version-${pluginVersion}"
    )
    readmeFile.text = content
    println "✓ 已更新: README.md"
} else {
    println "✗ 未找到: README.md"
}

println "========================================="
println "版本更新完成！"
println "当前版本: ${pluginVersion}"
println "版本类型: ${versionType}"
println "发布日期: ${releaseDate}"
println "主要功能: ${currentFeatures}"
println "========================================="
println ""
println "下一步操作："
println "1. 运行 gradlew clean build 重新构建项目"
println "2. 提交更改到 Git"
println "3. 创建版本标签: git tag v${pluginVersion}"
println "========================================="

tasks.register('updateVersion') {
    doLast {
        // 任务已经在脚本顶层执行
    }
}

defaultTasks 'updateVersion'

