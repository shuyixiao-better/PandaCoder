<?xml version="1.0" encoding="UTF-8"?>
<jenkins-pipeline>
    <definitions>
        <!-- 声明式Pipeline根元素 -->
        <definition id="pipeline" name="pipeline" hasGetter="false">
            <doc>定义一个声明式Pipeline。声明式Pipeline必须包含在pipeline块中，并且包含一个agent指令和一个stages部分。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>Pipeline的主体，包含agent、stages等指令</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Agent指令 -->
        <definition id="agent" name="agent" hasGetter="false">
            <doc>定义Pipeline或stage运行的代理。agent指令告诉Jenkins在哪里以及如何执行Pipeline。</doc>
            <parameters>
                <parameter name="any" type="boolean">
                    <doc>在任何可用的代理上执行Pipeline</doc>
                </parameter>
                <parameter name="none" type="boolean">
                    <doc>不分配全局代理，每个stage必须包含自己的agent指令</doc>
                </parameter>
                <parameter name="label" type="string">
                    <doc>在具有指定标签的代理上执行Pipeline</doc>
                </parameter>
                <parameter name="node" type="string">
                    <doc>在指定节点上执行Pipeline</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Stages部分 -->
        <definition id="stages" name="stages" hasGetter="false">
            <doc>包含一个或多个stage指令的序列。stages部分是声明式Pipeline中的核心部分。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>包含多个stage指令的闭包</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Stage指令 -->
        <definition id="stage" name="stage" hasGetter="false">
            <doc>定义Pipeline中的一个概念性不同的执行阶段。每个stage必须有一个名称。</doc>
            <parameters>
                <parameter name="name" type="string" required="true">
                    <doc>stage的名称，将在Jenkins界面中显示</doc>
                </parameter>
                <parameter name="body" type="closure" required="true">
                    <doc>stage的主体，包含steps等指令</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Steps指令 -->
        <definition id="steps" name="steps" hasGetter="false">
            <doc>包含一个或多个构建步骤的序列。steps部分包含一个或多个要执行的步骤。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>包含构建步骤的闭包</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Environment指令 -->
        <definition id="environment" name="environment" hasGetter="false">
            <doc>定义环境变量的键值对序列。environment指令指定一个键值对序列，这些键值对将被定义为所有步骤的环境变量。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>包含环境变量定义的闭包</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Options指令 -->
        <definition id="options" name="options" hasGetter="false">
            <doc>允许从Pipeline内部配置特定于Pipeline的选项。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>包含选项配置的闭包</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Parameters指令 -->
        <definition id="parameters" name="parameters" hasGetter="false">
            <doc>提供用户在触发Pipeline时应提供的参数列表。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>包含参数定义的闭包</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Tools指令 -->
        <definition id="tools" name="tools" hasGetter="false">
            <doc>定义要自动安装并放置在PATH上的工具。如果agent为none，则忽略此选项。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>包含工具配置的闭包</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Post指令 -->
        <definition id="post" name="post" hasGetter="false">
            <doc>定义在Pipeline或stage运行结束时运行的一个或多个steps。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>包含post条件和步骤的闭包</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- When指令 -->
        <definition id="when" name="when" hasGetter="false">
            <doc>允许Pipeline根据给定条件决定是否应该执行阶段。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>包含条件表达式的闭包</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- 常用构建步骤 -->
        <definition id="sh" name="sh" hasGetter="false">
            <doc>执行shell命令。在类Unix系统上运行shell命令。</doc>
            <parameters>
                <parameter name="script" type="string" required="true">
                    <doc>要执行的shell命令</doc>
                </parameter>
                <parameter name="returnStatus" type="boolean">
                    <doc>返回状态码而不是抛出异常</doc>
                </parameter>
                <parameter name="returnStdout" type="boolean">
                    <doc>返回命令的标准输出</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="bat" name="bat" hasGetter="false">
            <doc>执行Windows批处理命令。在Windows系统上运行批处理命令。</doc>
            <parameters>
                <parameter name="script" type="string" required="true">
                    <doc>要执行的批处理命令</doc>
                </parameter>
                <parameter name="returnStatus" type="boolean">
                    <doc>返回状态码而不是抛出异常</doc>
                </parameter>
                <parameter name="returnStdout" type="boolean">
                    <doc>返回命令的标准输出</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="echo" name="echo" hasGetter="false">
            <doc>向构建日志输出消息。</doc>
            <parameters>
                <parameter name="message" type="string" required="true">
                    <doc>要输出的消息</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="checkout" name="checkout" hasGetter="false">
            <doc>从版本控制系统检出代码。</doc>
            <parameters>
                <parameter name="scm" type="object" required="true">
                    <doc>源代码管理配置</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="git" name="git" hasGetter="false">
            <doc>从Git仓库检出代码。</doc>
            <parameters>
                <parameter name="url" type="string" required="true">
                    <doc>Git仓库的URL</doc>
                </parameter>
                <parameter name="branch" type="string">
                    <doc>要检出的分支</doc>
                </parameter>
                <parameter name="credentialsId" type="string">
                    <doc>访问仓库所需的凭据ID</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="script" name="script" hasGetter="false">
            <doc>在声明式Pipeline中执行脚本式Pipeline代码。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>要执行的脚本代码</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="parallel" name="parallel" hasGetter="false">
            <doc>并行执行多个步骤或阶段。</doc>
            <parameters>
                <parameter name="branches" type="map" required="true">
                    <doc>包含并行分支的映射</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="build" name="build" hasGetter="false">
            <doc>触发另一个作业的构建。</doc>
            <parameters>
                <parameter name="job" type="string" required="true">
                    <doc>要触发的作业名称</doc>
                </parameter>
                <parameter name="parameters" type="list">
                    <doc>传递给作业的参数</doc>
                </parameter>
                <parameter name="wait" type="boolean">
                    <doc>是否等待作业完成</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- 参数类型定义 -->
        <definition id="string" name="string" hasGetter="false">
            <doc>定义一个字符串参数。</doc>
            <parameters>
                <parameter name="name" type="string" required="true">
                    <doc>参数名称</doc>
                </parameter>
                <parameter name="defaultValue" type="string">
                    <doc>参数的默认值</doc>
                </parameter>
                <parameter name="description" type="string">
                    <doc>参数的描述</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="booleanParam" name="booleanParam" hasGetter="false">
            <doc>定义一个布尔参数。</doc>
            <parameters>
                <parameter name="name" type="string" required="true">
                    <doc>参数名称</doc>
                </parameter>
                <parameter name="defaultValue" type="boolean">
                    <doc>参数的默认值</doc>
                </parameter>
                <parameter name="description" type="string">
                    <doc>参数的描述</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="choice" name="choice" hasGetter="false">
            <doc>定义一个选择参数。</doc>
            <parameters>
                <parameter name="name" type="string" required="true">
                    <doc>参数名称</doc>
                </parameter>
                <parameter name="choices" type="list" required="true">
                    <doc>可选择的选项列表</doc>
                </parameter>
                <parameter name="description" type="string">
                    <doc>参数的描述</doc>
                </parameter>
            </parameters>
        </definition>

        <!-- Post条件 -->
        <definition id="always" name="always" hasGetter="false">
            <doc>无论Pipeline或stage的完成状态如何，都运行这些步骤。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>要执行的步骤</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="success" name="success" hasGetter="false">
            <doc>只有当前Pipeline或stage的状态为'success'时才运行这些步骤。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>要执行的步骤</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="failure" name="failure" hasGetter="false">
            <doc>只有当前Pipeline或stage的状态为'failure'时才运行这些步骤。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>要执行的步骤</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="unstable" name="unstable" hasGetter="false">
            <doc>只有当前Pipeline或stage的状态为'unstable'时才运行这些步骤。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>要执行的步骤</doc>
                </parameter>
            </parameters>
        </definition>

        <definition id="changed" name="changed" hasGetter="false">
            <doc>只有当前Pipeline或stage的状态与之前运行不同时才运行这些步骤。</doc>
            <parameters>
                <parameter name="body" type="closure" required="true">
                    <doc>要执行的步骤</doc>
                </parameter>
            </parameters>
        </definition>
    </definitions>
</jenkins-pipeline> 