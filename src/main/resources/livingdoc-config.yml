# PandaCoder 活文档功能配置
# @author PandaCoder Team
# @since 2.3.0

livingdoc:
  # AI 模型配置
  ai:
    # AI 提供商: gitee-ai | openai | ollama | tongyi
    provider: gitee-ai
    
    # Gitee AI (模力方舟) 配置
    gitee:
      # API Key从环境变量读取，确保安全
      api-key: ${GITEE_AI_API_KEY:}
      base-url: https://ai.gitee.com/v1
      # 推荐模型：qwen-plus（性价比高）| qwen-max（最强）| deepseek-chat（编程强）
      model: qwen-plus
      # 向量化模型：text-embedding-v3（推荐）| bge-large-zh-v1.5（中文优化）
      embedding-model: text-embedding-v3
    
    # OpenAI 配置（可选）
    openai:
      api-key: ${OPENAI_API_KEY:}
      base-url: https://api.openai.com/v1
      model: gpt-4o-mini
      embedding-model: text-embedding-3-small
    
    # Ollama 本地模型配置（可选）
    ollama:
      base-url: http://localhost:11434
      # 本地模型需要先通过 ollama pull 下载
      model: qwen2.5:7b
      embedding-model: nomic-embed-text
  
  # 向量数据库配置
  vector-store:
    # 向量存储类型: elasticsearch | pgvector | chroma | redis | simple
    type: elasticsearch
    
    # Elasticsearch 配置（默认）
    elasticsearch:
      host: localhost
      port: 9200
      username: ${ES_USERNAME:}
      password: ${ES_PASSWORD:}
      index-name: livingdoc_vectors
      # 向量维度（需要与embedding模型匹配）
      # text-embedding-v3: 1024 | bge-large-zh-v1.5: 1024 | m3e-base: 768
      dimensions: 1024
      # 相似度算法: cosine | dot_product | l2_norm
      similarity-algorithm: cosine
    
    # PGVector 配置（PostgreSQL扩展）
    pgvector:
      url: jdbc:postgresql://localhost:5432/livingdoc
      username: ${DB_USERNAME:postgres}
      password: ${DB_PASSWORD:}
      table-name: vector_store
    
    # Chroma 配置（专业RAG向量库）
    chroma:
      base-url: http://localhost:8000
      collection-name: livingdoc
    
    # Simple 配置（内存/文件，开发测试用）
    simple:
      persist-path: .livingdoc/vectors
  
  # 文档生成配置
  document:
    output-dir: docs/api
    # 支持的格式: markdown | html | openapi
    formats:
      - markdown
      - html
      - openapi
    template-dir: templates/custom
  
  # RAG 检索配置
  rag:
    # 文档分块大小（字符数）
    chunk-size: 800
    # 分块重叠大小（保证上下文连贯性）
    chunk-overlap: 200
    # 检索返回的最相似文档数量
    top-k: 5
    # 相似度阈值（0-1之间，只返回超过此值的结果）
    similarity-threshold: 0.7

